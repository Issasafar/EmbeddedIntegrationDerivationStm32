
myfirstapp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082bc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  080083d0  080083d0  000093d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa8  08008aa8  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab0  08008ab0  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab0  08008ab0  00009ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ab4  08008ab4  00009ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008ab8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001e8  08008ca0  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08008ca0  0000a358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003976  00000000  00000000  0000a211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001335  00000000  00000000  0000db87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000510  00000000  00000000  0000eec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003b4  00000000  00000000  0000f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017bcf  00000000  00000000  0000f784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d86  00000000  00000000  00027353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000829a3  00000000  00000000  0002d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afa7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  000afac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b2414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080083b4 	.word	0x080083b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080083b4 	.word	0x080083b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <LCD_Init>:



/*--------------- Initialize LCD ------------------*/
void LCD_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	
	HAL_Delay(30);
 8000bd8:	201e      	movs	r0, #30
 8000bda:	f001 f8e1 	bl	8001da0 <HAL_Delay>
	
	PIN_LOW(D4_PORT,D4_PIN);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be4:	481c      	ldr	r0, [pc, #112]	@ (8000c58 <LCD_Init+0x84>)
 8000be6:	f001 fb7e 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_HIGH(D5_PORT,D5_PIN);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bf0:	4819      	ldr	r0, [pc, #100]	@ (8000c58 <LCD_Init+0x84>)
 8000bf2:	f001 fb78 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_LOW(D6_PORT,D6_PIN);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfc:	4816      	ldr	r0, [pc, #88]	@ (8000c58 <LCD_Init+0x84>)
 8000bfe:	f001 fb72 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_LOW(D7_PORT,D7_PIN);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c08:	4813      	ldr	r0, [pc, #76]	@ (8000c58 <LCD_Init+0x84>)
 8000c0a:	f001 fb6c 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_LOW(RS_PORT,RS_PIN);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c14:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <LCD_Init+0x88>)
 8000c16:	f001 fb66 	bl	80022e6 <HAL_GPIO_WritePin>
	
	PIN_HIGH(EN_PORT,EN_PIN);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c20:	480e      	ldr	r0, [pc, #56]	@ (8000c5c <LCD_Init+0x88>)
 8000c22:	f001 fb60 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000c26:	2200      	movs	r2, #0
 8000c28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <LCD_Init+0x88>)
 8000c2e:	f001 fb5a 	bl	80022e6 <HAL_GPIO_WritePin>
	
	LCD_Write(0,0x28);
 8000c32:	2128      	movs	r1, #40	@ 0x28
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 f813 	bl	8000c60 <LCD_Write>
	LCD_Write(0,0x0c);
 8000c3a:	210c      	movs	r1, #12
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f000 f80f 	bl	8000c60 <LCD_Write>
	LCD_Write(0,0x06);
 8000c42:	2106      	movs	r1, #6
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f80b 	bl	8000c60 <LCD_Write>
	LCD_Write(0,0x01);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f807 	bl	8000c60 <LCD_Write>
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40010c00 	.word	0x40010c00
 8000c5c:	40010800 	.word	0x40010800

08000c60 <LCD_Write>:

/*--------------- Write To LCD ---------------*/
void LCD_Write(uint8_t type,uint8_t data)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(2);
 8000c70:	2002      	movs	r0, #2
 8000c72:	f001 f895 	bl	8001da0 <HAL_Delay>
	if(type)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <LCD_Write+0x2a>
	{
		PIN_HIGH(RS_PORT,RS_PIN);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c82:	485a      	ldr	r0, [pc, #360]	@ (8000dec <LCD_Write+0x18c>)
 8000c84:	f001 fb2f 	bl	80022e6 <HAL_GPIO_WritePin>
 8000c88:	e005      	b.n	8000c96 <LCD_Write+0x36>
	}else
	{
		PIN_LOW(RS_PORT,RS_PIN);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c90:	4856      	ldr	r0, [pc, #344]	@ (8000dec <LCD_Write+0x18c>)
 8000c92:	f001 fb28 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	//Send High Nibble
	if(data&0x80)
 8000c96:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da06      	bge.n	8000cac <LCD_Write+0x4c>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ca4:	4852      	ldr	r0, [pc, #328]	@ (8000df0 <LCD_Write+0x190>)
 8000ca6:	f001 fb1e 	bl	80022e6 <HAL_GPIO_WritePin>
 8000caa:	e005      	b.n	8000cb8 <LCD_Write+0x58>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000cac:	2200      	movs	r2, #0
 8000cae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb2:	484f      	ldr	r0, [pc, #316]	@ (8000df0 <LCD_Write+0x190>)
 8000cb4:	f001 fb17 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	if(data&0x40)
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d006      	beq.n	8000cd0 <LCD_Write+0x70>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc8:	4849      	ldr	r0, [pc, #292]	@ (8000df0 <LCD_Write+0x190>)
 8000cca:	f001 fb0c 	bl	80022e6 <HAL_GPIO_WritePin>
 8000cce:	e005      	b.n	8000cdc <LCD_Write+0x7c>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd6:	4846      	ldr	r0, [pc, #280]	@ (8000df0 <LCD_Write+0x190>)
 8000cd8:	f001 fb05 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	if(data&0x20)
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <LCD_Write+0x94>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cec:	4840      	ldr	r0, [pc, #256]	@ (8000df0 <LCD_Write+0x190>)
 8000cee:	f001 fafa 	bl	80022e6 <HAL_GPIO_WritePin>
 8000cf2:	e005      	b.n	8000d00 <LCD_Write+0xa0>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cfa:	483d      	ldr	r0, [pc, #244]	@ (8000df0 <LCD_Write+0x190>)
 8000cfc:	f001 faf3 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	if(data&0x10)
 8000d00:	79bb      	ldrb	r3, [r7, #6]
 8000d02:	f003 0310 	and.w	r3, r3, #16
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d006      	beq.n	8000d18 <LCD_Write+0xb8>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d10:	4837      	ldr	r0, [pc, #220]	@ (8000df0 <LCD_Write+0x190>)
 8000d12:	f001 fae8 	bl	80022e6 <HAL_GPIO_WritePin>
 8000d16:	e005      	b.n	8000d24 <LCD_Write+0xc4>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d1e:	4834      	ldr	r0, [pc, #208]	@ (8000df0 <LCD_Write+0x190>)
 8000d20:	f001 fae1 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d2a:	4830      	ldr	r0, [pc, #192]	@ (8000dec <LCD_Write+0x18c>)
 8000d2c:	f001 fadb 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d36:	482d      	ldr	r0, [pc, #180]	@ (8000dec <LCD_Write+0x18c>)
 8000d38:	f001 fad5 	bl	80022e6 <HAL_GPIO_WritePin>
	

	//Send Low Nibble
	if(data&0x08)
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <LCD_Write+0xf4>
	{
		PIN_HIGH(D7_PORT,D7_PIN);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4c:	4828      	ldr	r0, [pc, #160]	@ (8000df0 <LCD_Write+0x190>)
 8000d4e:	f001 faca 	bl	80022e6 <HAL_GPIO_WritePin>
 8000d52:	e005      	b.n	8000d60 <LCD_Write+0x100>
	}else
	{
		PIN_LOW(D7_PORT,D7_PIN);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d5a:	4825      	ldr	r0, [pc, #148]	@ (8000df0 <LCD_Write+0x190>)
 8000d5c:	f001 fac3 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	if(data&0x04)
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <LCD_Write+0x118>
	{
		PIN_HIGH(D6_PORT,D6_PIN);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d70:	481f      	ldr	r0, [pc, #124]	@ (8000df0 <LCD_Write+0x190>)
 8000d72:	f001 fab8 	bl	80022e6 <HAL_GPIO_WritePin>
 8000d76:	e005      	b.n	8000d84 <LCD_Write+0x124>
	}else
	{
		PIN_LOW(D6_PORT,D6_PIN);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7e:	481c      	ldr	r0, [pc, #112]	@ (8000df0 <LCD_Write+0x190>)
 8000d80:	f001 fab1 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	if(data&0x02)
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <LCD_Write+0x13c>
	{
		PIN_HIGH(D5_PORT,D5_PIN);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <LCD_Write+0x190>)
 8000d96:	f001 faa6 	bl	80022e6 <HAL_GPIO_WritePin>
 8000d9a:	e005      	b.n	8000da8 <LCD_Write+0x148>
	}else
	{
		PIN_LOW(D5_PORT,D5_PIN);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da2:	4813      	ldr	r0, [pc, #76]	@ (8000df0 <LCD_Write+0x190>)
 8000da4:	f001 fa9f 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	
	if(data&0x01)
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <LCD_Write+0x160>
	{
		PIN_HIGH(D4_PORT,D4_PIN);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000db8:	480d      	ldr	r0, [pc, #52]	@ (8000df0 <LCD_Write+0x190>)
 8000dba:	f001 fa94 	bl	80022e6 <HAL_GPIO_WritePin>
 8000dbe:	e005      	b.n	8000dcc <LCD_Write+0x16c>
	}else
	{
		PIN_LOW(D4_PORT,D4_PIN);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dc6:	480a      	ldr	r0, [pc, #40]	@ (8000df0 <LCD_Write+0x190>)
 8000dc8:	f001 fa8d 	bl	80022e6 <HAL_GPIO_WritePin>
	}
	PIN_HIGH(EN_PORT,EN_PIN);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <LCD_Write+0x18c>)
 8000dd4:	f001 fa87 	bl	80022e6 <HAL_GPIO_WritePin>
	PIN_LOW(EN_PORT,EN_PIN);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dde:	4803      	ldr	r0, [pc, #12]	@ (8000dec <LCD_Write+0x18c>)
 8000de0:	f001 fa81 	bl	80022e6 <HAL_GPIO_WritePin>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00

08000df4 <LCD_Puts>:

void LCD_Puts(uint8_t x, uint8_t y, int8_t *string)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	603a      	str	r2, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	460b      	mov	r3, r1
 8000e02:	71bb      	strb	r3, [r7, #6]
	//Set Cursor Position
	#ifdef LCD16xN	//For LCD16x2 or LCD16x4
	switch(x)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d837      	bhi.n	8000e7a <LCD_Puts+0x86>
 8000e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e10 <LCD_Puts+0x1c>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e31 	.word	0x08000e31
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	08000e51 	.word	0x08000e51
	{
		case 0: //Row 0
			LCD_Write(0,0x80+0x00+y);
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	3b80      	subs	r3, #128	@ 0x80
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff ff19 	bl	8000c60 <LCD_Write>
			break;
 8000e2e:	e018      	b.n	8000e62 <LCD_Puts+0x6e>
		case 1: //Row 1
			LCD_Write(0,0x80+0x40+y);
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	3b40      	subs	r3, #64	@ 0x40
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ff11 	bl	8000c60 <LCD_Write>
			break;
 8000e3e:	e010      	b.n	8000e62 <LCD_Puts+0x6e>
		case 2: //Row 2
			LCD_Write(0,0x80+0x10+y);
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	3b70      	subs	r3, #112	@ 0x70
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4619      	mov	r1, r3
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff09 	bl	8000c60 <LCD_Write>
			break;
 8000e4e:	e008      	b.n	8000e62 <LCD_Puts+0x6e>
		case 3: //Row 3
			LCD_Write(0,0x80+0x50+y);
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	3b30      	subs	r3, #48	@ 0x30
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4619      	mov	r1, r3
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ff01 	bl	8000c60 <LCD_Write>
			break;
 8000e5e:	bf00      	nop
 8000e60:	e00b      	b.n	8000e7a <LCD_Puts+0x86>
			LCD_Write(0,0x80+0x54+y);
			break;
	}
	#endif
	
	while(*string)
 8000e62:	e00a      	b.n	8000e7a <LCD_Puts+0x86>
	{
		LCD_Write(1,*string);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fef6 	bl	8000c60 <LCD_Write>
		string++;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	603b      	str	r3, [r7, #0]
	while(*string)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1ef      	bne.n	8000e64 <LCD_Puts+0x70>
	}
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop

08000e90 <LCD_Clear_RC>:

void LCD_Clear_RC(uint8_t row, uint8_t col, uint8_t length)
{
 8000e90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e94:	b087      	sub	sp, #28
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	71bb      	strb	r3, [r7, #6]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	717b      	strb	r3, [r7, #5]
 8000ea4:	466b      	mov	r3, sp
 8000ea6:	461e      	mov	r6, r3
    // Create a string of spaces with the specified length
    char spaces[length + 1];
 8000ea8:	797b      	ldrb	r3, [r7, #5]
 8000eaa:	1c59      	adds	r1, r3, #1
 8000eac:	1e4b      	subs	r3, r1, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	4690      	mov	r8, r2
 8000eb6:	4699      	mov	r9, r3
 8000eb8:	f04f 0200 	mov.w	r2, #0
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ecc:	460a      	mov	r2, r1
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	461d      	mov	r5, r3
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	00eb      	lsls	r3, r5, #3
 8000ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ee2:	00e2      	lsls	r2, r4, #3
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	3307      	adds	r3, #7
 8000ee8:	08db      	lsrs	r3, r3, #3
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	ebad 0d03 	sub.w	sp, sp, r3
 8000ef0:	466b      	mov	r3, sp
 8000ef2:	3300      	adds	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < length; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]
 8000efa:	e006      	b.n	8000f0a <LCD_Clear_RC+0x7a>
    {
        spaces[i] = ' ';
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	2120      	movs	r1, #32
 8000f02:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++)
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	3301      	adds	r3, #1
 8000f08:	75fb      	strb	r3, [r7, #23]
 8000f0a:	7dfa      	ldrb	r2, [r7, #23]
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d3f4      	bcc.n	8000efc <LCD_Clear_RC+0x6c>
    }
    spaces[length] = '\0'; // Null-terminate the string
 8000f12:	797b      	ldrb	r3, [r7, #5]
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	2100      	movs	r1, #0
 8000f18:	54d1      	strb	r1, [r2, r3]

    // Use lcd_puts to write the spaces to the specified position
    LCD_Puts(row, col, (int8_t *)spaces);
 8000f1a:	79b9      	ldrb	r1, [r7, #6]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff67 	bl	8000df4 <LCD_Puts>
 8000f26:	46b5      	mov	sp, r6
}
 8000f28:	bf00      	nop
 8000f2a:	371c      	adds	r7, #28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f32 <LCD_Clear>:

void LCD_Clear(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
	LCD_Write(0,0x01);
 8000f36:	2101      	movs	r1, #1
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fe91 	bl	8000c60 <LCD_Write>
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <derivative>:

static void MX_GPIO_Init(void);

/* USER CODE BEGIN PFP */

double derivative(enum FunctionType fun, double x, double n) {
 8000f42:	b5b0      	push	{r4, r5, r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4601      	mov	r1, r0
 8000f4a:	e9c7 2300 	strd	r2, r3, [r7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	73fb      	strb	r3, [r7, #15]
    double h = sqrt(n);
 8000f52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000f56:	f001 fdbd 	bl	8002ad4 <sqrt>
 8000f5a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    if (fun == sine) {
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d132      	bne.n	8000fca <derivative+0x88>
        return (sin(x + h) - sin(x - h)) / (2.0 * h);
 8000f64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f6c:	f7ff f8fe 	bl	800016c <__adddf3>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f001 fe16 	bl	8002ba8 <sin>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f88:	f7ff f8ee 	bl	8000168 <__aeabi_dsub>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f001 fe08 	bl	8002ba8 <sin>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	f7ff f8e2 	bl	8000168 <__aeabi_dsub>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4614      	mov	r4, r2
 8000faa:	461d      	mov	r5, r3
 8000fac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	f7ff f8da 	bl	800016c <__adddf3>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff fbb4 	bl	800072c <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	e039      	b.n	800103e <derivative+0xfc>
    } else if (fun == cosine) {
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d132      	bne.n	8001036 <derivative+0xf4>
        return (cos(x + h) - cos(x - h)) / (2.0 * h);
 8000fd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fd8:	f7ff f8c8 	bl	800016c <__adddf3>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f001 fd9a 	bl	8002b1c <cos>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff4:	f7ff f8b8 	bl	8000168 <__aeabi_dsub>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f001 fd8c 	bl	8002b1c <cos>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4620      	mov	r0, r4
 800100a:	4629      	mov	r1, r5
 800100c:	f7ff f8ac 	bl	8000168 <__aeabi_dsub>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4614      	mov	r4, r2
 8001016:	461d      	mov	r5, r3
 8001018:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	f7ff f8a4 	bl	800016c <__adddf3>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff fb7e 	bl	800072c <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	e003      	b.n	800103e <derivative+0xfc>
    } else {
        return 0;
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
    }
}
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bdb0      	pop	{r4, r5, r7, pc}

08001048 <trapezoidalIntegral>:

double trapezoidalIntegral(enum FunctionType fun, double a, double b, double n) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	@ 0x38
 800104c:	af00      	add	r7, sp, #0
 800104e:	4601      	mov	r1, r0
 8001050:	e9c7 2300 	strd	r2, r3, [r7]
 8001054:	460b      	mov	r3, r1
 8001056:	73fb      	strb	r3, [r7, #15]
    double h = (b - a) / n;
 8001058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800105c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001060:	f7ff f882 	bl	8000168 <__aeabi_dsub>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001070:	f7ff fb5c 	bl	800072c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double integral = 0.0;
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i <= n; ++i) {
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800108c:	e056      	b.n	800113c <trapezoidalIntegral+0xf4>
        double x = a + i * h;
 800108e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001090:	f7ff f9b8 	bl	8000404 <__aeabi_i2d>
 8001094:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001098:	f7ff fa1e 	bl	80004d8 <__aeabi_dmul>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010a4:	f7ff f862 	bl	800016c <__adddf3>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
        double weight = (i == 0 || i == n) ? 0.5 : 1.0;
 80010b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00b      	beq.n	80010ce <trapezoidalIntegral+0x86>
 80010b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80010b8:	f7ff f9a4 	bl	8000404 <__aeabi_i2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80010c4:	f7ff fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <trapezoidalIntegral+0x8e>
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <trapezoidalIntegral+0x130>)
 80010d4:	e002      	b.n	80010dc <trapezoidalIntegral+0x94>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <trapezoidalIntegral+0x134>)
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if (fun == sine) {
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d112      	bne.n	800110c <trapezoidalIntegral+0xc4>
            integral += weight * sin(x);
 80010e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ea:	f001 fd5d 	bl	8002ba8 <sin>
 80010ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010f2:	f7ff f9f1 	bl	80004d8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80010fe:	f7ff f835 	bl	800016c <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800110a:	e014      	b.n	8001136 <trapezoidalIntegral+0xee>
        } else if (fun == cosine) {
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d111      	bne.n	8001136 <trapezoidalIntegral+0xee>
            integral += weight * cos(x);
 8001112:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001116:	f001 fd01 	bl	8002b1c <cos>
 800111a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800111e:	f7ff f9db 	bl	80004d8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800112a:	f7ff f81f 	bl	800016c <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i <= n; ++i) {
 8001136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001138:	3301      	adds	r3, #1
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800113e:	f7ff f961 	bl	8000404 <__aeabi_i2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800114a:	f7ff fc4b 	bl	80009e4 <__aeabi_dcmpge>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d19c      	bne.n	800108e <trapezoidalIntegral+0x46>
        }
    }
    integral *= h;
 8001154:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001158:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    return integral;
 8001168:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	3738      	adds	r7, #56	@ 0x38
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	3fe00000 	.word	0x3fe00000
 800117c:	3ff00000 	.word	0x3ff00000

08001180 <printToScreen>:

void printToScreen(const char *message, enum Alignment alignment) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
    int columnCount = 16;
 800118c:	2310      	movs	r3, #16
 800118e:	60fb      	str	r3, [r7, #12]
    int messageSize = (int) strlen(message);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7fe ffdd 	bl	8000150 <strlen>
 8001196:	4603      	mov	r3, r0
 8001198:	60bb      	str	r3, [r7, #8]
    switch (alignment) {
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d84d      	bhi.n	800123c <printToScreen+0xbc>
 80011a0:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <printToScreen+0x28>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011cd 	.word	0x080011cd
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	080011e7 	.word	0x080011e7
 80011b4:	0800120b 	.word	0x0800120b
 80011b8:	080011ff 	.word	0x080011ff
 80011bc:	08001225 	.word	0x08001225
        case (topStart):
            LCD_Puts(0, 0, (int8_t *) message);
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff fe15 	bl	8000df4 <LCD_Puts>
            break;
 80011ca:	e038      	b.n	800123e <printToScreen+0xbe>
        case (topCenter):
            LCD_Puts(0, ((columnCount - messageSize) / 2), (int8_t *) message);
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	0fda      	lsrs	r2, r3, #31
 80011d4:	4413      	add	r3, r2
 80011d6:	105b      	asrs	r3, r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4619      	mov	r1, r3
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff fe08 	bl	8000df4 <LCD_Puts>
            break;
 80011e4:	e02b      	b.n	800123e <printToScreen+0xbe>
        case (topEnd):
            LCD_Puts(0, ((columnCount - messageSize)), (int8_t *) message);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4619      	mov	r1, r3
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fdfc 	bl	8000df4 <LCD_Puts>
            break;
 80011fc:	e01f      	b.n	800123e <printToScreen+0xbe>
        case (bottomStart):
            LCD_Puts(1, 0, (int8_t *) message);
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	2100      	movs	r1, #0
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fdf6 	bl	8000df4 <LCD_Puts>
            break;
 8001208:	e019      	b.n	800123e <printToScreen+0xbe>
        case (bottomCenter):
            LCD_Puts(1, ((columnCount - messageSize) / 2), (int8_t *) message);
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	0fda      	lsrs	r2, r3, #31
 8001212:	4413      	add	r3, r2
 8001214:	105b      	asrs	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4619      	mov	r1, r3
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fde9 	bl	8000df4 <LCD_Puts>
            break;
 8001222:	e00c      	b.n	800123e <printToScreen+0xbe>
        case (bottomEnd):
            LCD_Puts(1, ((columnCount - messageSize)), (int8_t *) message);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff fddd 	bl	8000df4 <LCD_Puts>
            break;
 800123a:	e000      	b.n	800123e <printToScreen+0xbe>
        default:
            break;
 800123c:	bf00      	nop
    }

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop

08001248 <selectFunction>:

enum FunctionType selectFunction(bool *exit) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    char *selectionStr[2] = {"Sin(x)", "Cos(x)"};
 8001250:	4a4a      	ldr	r2, [pc, #296]	@ (800137c <selectFunction+0x134>)
 8001252:	f107 0318 	add.w	r3, r7, #24
 8001256:	e892 0003 	ldmia.w	r2, {r0, r1}
 800125a:	e883 0003 	stmia.w	r3, {r0, r1}
    printToScreen("Select", topCenter);
 800125e:	2100      	movs	r1, #0
 8001260:	4847      	ldr	r0, [pc, #284]	@ (8001380 <selectFunction+0x138>)
 8001262:	f7ff ff8d 	bl	8001180 <printToScreen>
    printToScreen(selectionStr[0], bottomStart);
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2104      	movs	r1, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff88 	bl	8001180 <printToScreen>
    printToScreen(selectionStr[1], bottomEnd);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2105      	movs	r1, #5
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff83 	bl	8001180 <printToScreen>
    enum FunctionType choices[] = {sine, cosine};
 800127a:	2300      	movs	r3, #0
 800127c:	753b      	strb	r3, [r7, #20]
 800127e:	2301      	movs	r3, #1
 8001280:	757b      	strb	r3, [r7, #21]
    char displayStr[6];
    int i = 1;
 8001282:	2301      	movs	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
    enum FunctionType selected = choices[i];
 8001286:	f107 0214 	add.w	r2, r7, #20
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool configured = false;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    while (!configured) {
 800129a:	e061      	b.n	8001360 <selectFunction+0x118>
        // settings
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0) {
 800129c:	2120      	movs	r1, #32
 800129e:	4839      	ldr	r0, [pc, #228]	@ (8001384 <selectFunction+0x13c>)
 80012a0:	f001 f80a 	bl	80022b8 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <selectFunction+0x6a>
            *exit = true;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
            break;
 80012b0:	e05d      	b.n	800136e <selectFunction+0x126>
        }
        // inc - dec
        if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) || (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)) {
 80012b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012b6:	4834      	ldr	r0, [pc, #208]	@ (8001388 <selectFunction+0x140>)
 80012b8:	f000 fffe 	bl	80022b8 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <selectFunction+0x88>
 80012c2:	2108      	movs	r1, #8
 80012c4:	482f      	ldr	r0, [pc, #188]	@ (8001384 <selectFunction+0x13c>)
 80012c6:	f000 fff7 	bl	80022b8 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d137      	bne.n	8001340 <selectFunction+0xf8>
            ++i;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	3301      	adds	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
            i = (i) % 2;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	bfb8      	it	lt
 80012e0:	425b      	neglt	r3, r3
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
            selected = choices[i];
 80012e4:	f107 0214 	add.w	r2, r7, #20
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sprintf(displayStr, "%s", selectionStr[i]);
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	3328      	adds	r3, #40	@ 0x28
 80012f8:	443b      	add	r3, r7
 80012fa:	f853 2c10 	ldr.w	r2, [r3, #-16]
 80012fe:	f107 030c 	add.w	r3, r7, #12
 8001302:	4922      	ldr	r1, [pc, #136]	@ (800138c <selectFunction+0x144>)
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fc29 	bl	8004b5c <siprintf>
            if (selected == sine) {
 800130a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10b      	bne.n	800132a <selectFunction+0xe2>
                LCD_Clear_RC(1, 10, 6);
 8001312:	2206      	movs	r2, #6
 8001314:	210a      	movs	r1, #10
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fdba 	bl	8000e90 <LCD_Clear_RC>
                printToScreen(displayStr, bottomStart);
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2104      	movs	r1, #4
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff2c 	bl	8001180 <printToScreen>
 8001328:	e00a      	b.n	8001340 <selectFunction+0xf8>
            } else {
                LCD_Clear_RC(1, 0, 6);
 800132a:	2206      	movs	r2, #6
 800132c:	2100      	movs	r1, #0
 800132e:	2001      	movs	r0, #1
 8001330:	f7ff fdae 	bl	8000e90 <LCD_Clear_RC>
                printToScreen(displayStr, bottomEnd);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2105      	movs	r1, #5
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff20 	bl	8001180 <printToScreen>
            }
        }
        // ok
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 8001340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001344:	480f      	ldr	r0, [pc, #60]	@ (8001384 <selectFunction+0x13c>)
 8001346:	f000 ffb7 	bl	80022b8 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d104      	bne.n	800135a <selectFunction+0x112>
            LCD_Clear();
 8001350:	f7ff fdef 	bl	8000f32 <LCD_Clear>
            configured = true;
 8001354:	2301      	movs	r3, #1
 8001356:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        }
        HAL_Delay(150);
 800135a:	2096      	movs	r0, #150	@ 0x96
 800135c:	f000 fd20 	bl	8001da0 <HAL_Delay>
    while (!configured) {
 8001360:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001364:	f083 0301 	eor.w	r3, r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d196      	bne.n	800129c <selectFunction+0x54>
    }
    return selected;
 800136e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001372:	4618      	mov	r0, r3
 8001374:	3728      	adds	r7, #40	@ 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	080083ec 	.word	0x080083ec
 8001380:	080083d0 	.word	0x080083d0
 8001384:	40010c00 	.word	0x40010c00
 8001388:	40010800 	.word	0x40010800
 800138c:	080083d8 	.word	0x080083d8

08001390 <selectOperation>:

enum OperationType selectOperation(bool *exit) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	@ 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    char *selectionStr[2] = {"Diff", "Integ"};
 8001398:	4a4b      	ldr	r2, [pc, #300]	@ (80014c8 <selectOperation+0x138>)
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013a2:	e883 0003 	stmia.w	r3, {r0, r1}
    printToScreen("Select", topCenter);
 80013a6:	2100      	movs	r1, #0
 80013a8:	4848      	ldr	r0, [pc, #288]	@ (80014cc <selectOperation+0x13c>)
 80013aa:	f7ff fee9 	bl	8001180 <printToScreen>
    printToScreen(selectionStr[0], bottomStart);
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2104      	movs	r1, #4
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fee4 	bl	8001180 <printToScreen>
    printToScreen(selectionStr[1], bottomEnd);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	2105      	movs	r1, #5
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fedf 	bl	8001180 <printToScreen>
    enum OperationType choices[] = {derivation, integration};
 80013c2:	2301      	movs	r3, #1
 80013c4:	753b      	strb	r3, [r7, #20]
 80013c6:	2300      	movs	r3, #0
 80013c8:	757b      	strb	r3, [r7, #21]
    char displayStr[5];
    int i = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
    enum OperationType selected = choices[i];
 80013ce:	f107 0214 	add.w	r2, r7, #20
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    bool configured = false;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    while (!configured) {
 80013e2:	e061      	b.n	80014a8 <selectOperation+0x118>
        // settings
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0) {
 80013e4:	2120      	movs	r1, #32
 80013e6:	483a      	ldr	r0, [pc, #232]	@ (80014d0 <selectOperation+0x140>)
 80013e8:	f000 ff66 	bl	80022b8 <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <selectOperation+0x6a>
            *exit = true;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
            break;
 80013f8:	e05d      	b.n	80014b6 <selectOperation+0x126>
        }
        // inc - dec
        if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) || (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0)) {
 80013fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013fe:	4835      	ldr	r0, [pc, #212]	@ (80014d4 <selectOperation+0x144>)
 8001400:	f000 ff5a 	bl	80022b8 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <selectOperation+0x88>
 800140a:	2108      	movs	r1, #8
 800140c:	4830      	ldr	r0, [pc, #192]	@ (80014d0 <selectOperation+0x140>)
 800140e:	f000 ff53 	bl	80022b8 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d137      	bne.n	8001488 <selectOperation+0xf8>
            ++i;
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	3301      	adds	r3, #1
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
            i = i % 2;
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	2b00      	cmp	r3, #0
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	bfb8      	it	lt
 8001428:	425b      	neglt	r3, r3
 800142a:	627b      	str	r3, [r7, #36]	@ 0x24
            selected = choices[i];
 800142c:	f107 0214 	add.w	r2, r7, #20
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            sprintf(displayStr, "%s", selectionStr[i]);
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	443b      	add	r3, r7
 8001442:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4923      	ldr	r1, [pc, #140]	@ (80014d8 <selectOperation+0x148>)
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fb85 	bl	8004b5c <siprintf>
            if (selected == derivation) {
 8001452:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10b      	bne.n	8001472 <selectOperation+0xe2>
                LCD_Clear_RC(1, 10, 6);
 800145a:	2206      	movs	r2, #6
 800145c:	210a      	movs	r1, #10
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fd16 	bl	8000e90 <LCD_Clear_RC>
                printToScreen(displayStr, bottomStart);
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2104      	movs	r1, #4
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe88 	bl	8001180 <printToScreen>
 8001470:	e00a      	b.n	8001488 <selectOperation+0xf8>
            } else {
                LCD_Clear_RC(1, 0, 6);
 8001472:	2206      	movs	r2, #6
 8001474:	2100      	movs	r1, #0
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff fd0a 	bl	8000e90 <LCD_Clear_RC>
                printToScreen(displayStr, bottomEnd);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	2105      	movs	r1, #5
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe7c 	bl	8001180 <printToScreen>
            }
        }
        // ok
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 8001488:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800148c:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <selectOperation+0x140>)
 800148e:	f000 ff13 	bl	80022b8 <HAL_GPIO_ReadPin>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <selectOperation+0x112>
            LCD_Clear();
 8001498:	f7ff fd4b 	bl	8000f32 <LCD_Clear>
            configured = true;
 800149c:	2301      	movs	r3, #1
 800149e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        }
        HAL_Delay(150);
 80014a2:	2096      	movs	r0, #150	@ 0x96
 80014a4:	f000 fc7c 	bl	8001da0 <HAL_Delay>
    while (!configured) {
 80014a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d196      	bne.n	80013e4 <selectOperation+0x54>
    }
    LCD_Clear();
 80014b6:	f7ff fd3c 	bl	8000f32 <LCD_Clear>
    return selected;
 80014ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	08008404 	.word	0x08008404
 80014cc:	080083d0 	.word	0x080083d0
 80014d0:	40010c00 	.word	0x40010c00
 80014d4:	40010800 	.word	0x40010800
 80014d8:	080083d8 	.word	0x080083d8

080014dc <selectPoints>:

void selectPoints(enum OperationType operationType, bool *exit, double *points) {
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b08b      	sub	sp, #44	@ 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	73fb      	strb	r3, [r7, #15]
    char *pointsStr[2] = {"", ""};
 80014ea:	4a74      	ldr	r2, [pc, #464]	@ (80016bc <selectPoints+0x1e0>)
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014f4:	e883 0003 	stmia.w	r3, {r0, r1}
    char *x1Str = "X1=";
 80014f8:	4b71      	ldr	r3, [pc, #452]	@ (80016c0 <selectPoints+0x1e4>)
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    char *x2Str = "X2=";
 80014fc:	4b71      	ldr	r3, [pc, #452]	@ (80016c4 <selectPoints+0x1e8>)
 80014fe:	623b      	str	r3, [r7, #32]
    char *xStr = "X=";
 8001500:	4b71      	ldr	r3, [pc, #452]	@ (80016c8 <selectPoints+0x1ec>)
 8001502:	61fb      	str	r3, [r7, #28]
    bool configured[2] = {false, false};
 8001504:	2300      	movs	r3, #0
 8001506:	743b      	strb	r3, [r7, #16]
 8001508:	2300      	movs	r3, #0
 800150a:	747b      	strb	r3, [r7, #17]
    LCD_Clear();
 800150c:	f7ff fd11 	bl	8000f32 <LCD_Clear>
    while (!configured[0] || !configured[1]) {
 8001510:	e0c0      	b.n	8001694 <selectPoints+0x1b8>

        printToScreen("Select points:", topCenter);
 8001512:	2100      	movs	r1, #0
 8001514:	486d      	ldr	r0, [pc, #436]	@ (80016cc <selectPoints+0x1f0>)
 8001516:	f7ff fe33 	bl	8001180 <printToScreen>
        if (!configured[0]) {
 800151a:	7c3b      	ldrb	r3, [r7, #16]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01d      	beq.n	8001562 <selectPoints+0x86>
            // first point
            if (operationType == derivation) {
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <selectPoints+0x54>
                configured[1] = true;
 800152c:	2301      	movs	r3, #1
 800152e:	747b      	strb	r3, [r7, #17]
            }
            sprintf(pointsStr[0], "%.2f", points[0]);
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	4965      	ldr	r1, [pc, #404]	@ (80016d0 <selectPoints+0x1f4>)
 800153a:	f003 fb0f 	bl	8004b5c <siprintf>
            if (operationType == derivation) {
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d104      	bne.n	800154e <selectPoints+0x72>
                printToScreen(xStr, bottomStart);
 8001544:	2104      	movs	r1, #4
 8001546:	69f8      	ldr	r0, [r7, #28]
 8001548:	f7ff fe1a 	bl	8001180 <printToScreen>
 800154c:	e003      	b.n	8001556 <selectPoints+0x7a>
            } else {
                printToScreen(x1Str, bottomStart);
 800154e:	2104      	movs	r1, #4
 8001550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001552:	f7ff fe15 	bl	8001180 <printToScreen>
            }

            printToScreen(pointsStr[0], bottomEnd);
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2105      	movs	r1, #5
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fe10 	bl	8001180 <printToScreen>
 8001560:	e016      	b.n	8001590 <selectPoints+0xb4>

        } else if (!configured[1]) {
 8001562:	7c7b      	ldrb	r3, [r7, #17]
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <selectPoints+0xb4>
            // second point
            sprintf(pointsStr[1], "%.2f", points[1]);
 800156e:	69b8      	ldr	r0, [r7, #24]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3308      	adds	r3, #8
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	4955      	ldr	r1, [pc, #340]	@ (80016d0 <selectPoints+0x1f4>)
 800157a:	f003 faef 	bl	8004b5c <siprintf>
            printToScreen(x2Str, bottomStart);
 800157e:	2104      	movs	r1, #4
 8001580:	6a38      	ldr	r0, [r7, #32]
 8001582:	f7ff fdfd 	bl	8001180 <printToScreen>
            printToScreen(pointsStr[1], bottomEnd);
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2105      	movs	r1, #5
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fdf8 	bl	8001180 <printToScreen>
        }
        // settings
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0) {
 8001590:	2120      	movs	r1, #32
 8001592:	4850      	ldr	r0, [pc, #320]	@ (80016d4 <selectPoints+0x1f8>)
 8001594:	f000 fe90 	bl	80022b8 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d103      	bne.n	80015a6 <selectPoints+0xca>
            *exit = true;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
            break;
 80015a4:	e084      	b.n	80016b0 <selectPoints+0x1d4>
        }
        // ok
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0) {
 80015a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015aa:	484a      	ldr	r0, [pc, #296]	@ (80016d4 <selectPoints+0x1f8>)
 80015ac:	f000 fe84 	bl	80022b8 <HAL_GPIO_ReadPin>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10c      	bne.n	80015d0 <selectPoints+0xf4>
            if (!configured[0]) {
 80015b6:	7c3b      	ldrb	r3, [r7, #16]
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <selectPoints+0xf0>
                configured[0] = true;
 80015c2:	2301      	movs	r3, #1
 80015c4:	743b      	strb	r3, [r7, #16]
                LCD_Clear();
 80015c6:	f7ff fcb4 	bl	8000f32 <LCD_Clear>
 80015ca:	e001      	b.n	80015d0 <selectPoints+0xf4>
            } else {
                configured[1] = true;
 80015cc:	2301      	movs	r3, #1
 80015ce:	747b      	strb	r3, [r7, #17]
            }
        }
        if (!configured[0]) {
 80015d0:	7c3b      	ldrb	r3, [r7, #16]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d029      	beq.n	8001630 <selectPoints+0x154>
            // point x1
            // inc
            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 80015dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015e0:	483d      	ldr	r0, [pc, #244]	@ (80016d8 <selectPoints+0x1fc>)
 80015e2:	f000 fe69 	bl	80022b8 <HAL_GPIO_ReadPin>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10c      	bne.n	8001606 <selectPoints+0x12a>
                points[0] += .5f;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b39      	ldr	r3, [pc, #228]	@ (80016dc <selectPoints+0x200>)
 80015f8:	f7fe fdb8 	bl	800016c <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	e9c1 2300 	strd	r2, r3, [r1]
            }
            // dec
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0) {
 8001606:	2108      	movs	r1, #8
 8001608:	4832      	ldr	r0, [pc, #200]	@ (80016d4 <selectPoints+0x1f8>)
 800160a:	f000 fe55 	bl	80022b8 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d13c      	bne.n	800168e <selectPoints+0x1b2>
                points[0] -= .5f;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <selectPoints+0x200>)
 8001620:	f7fe fda2 	bl	8000168 <__aeabi_dsub>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	e9c1 2300 	strd	r2, r3, [r1]
 800162e:	e02e      	b.n	800168e <selectPoints+0x1b2>
            }
        } else {
            // point x2
            // inc
            if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0) {
 8001630:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001634:	4828      	ldr	r0, [pc, #160]	@ (80016d8 <selectPoints+0x1fc>)
 8001636:	f000 fe3f 	bl	80022b8 <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <selectPoints+0x184>
                points[1] += .5f;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3308      	adds	r3, #8
 8001644:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f103 0408 	add.w	r4, r3, #8
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <selectPoints+0x200>)
 8001654:	f7fe fd8a 	bl	800016c <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	e9c4 2300 	strd	r2, r3, [r4]
            }
            // dec
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3) == 0) {
 8001660:	2108      	movs	r1, #8
 8001662:	481c      	ldr	r0, [pc, #112]	@ (80016d4 <selectPoints+0x1f8>)
 8001664:	f000 fe28 	bl	80022b8 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <selectPoints+0x1b2>
                points[1] -= .5f;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3308      	adds	r3, #8
 8001672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f103 0408 	add.w	r4, r3, #8
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	4b16      	ldr	r3, [pc, #88]	@ (80016dc <selectPoints+0x200>)
 8001682:	f7fe fd71 	bl	8000168 <__aeabi_dsub>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	e9c4 2300 	strd	r2, r3, [r4]
            }
        }
        HAL_Delay(150);
 800168e:	2096      	movs	r0, #150	@ 0x96
 8001690:	f000 fb86 	bl	8001da0 <HAL_Delay>
    while (!configured[0] || !configured[1]) {
 8001694:	7c3b      	ldrb	r3, [r7, #16]
 8001696:	f083 0301 	eor.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	f47f af38 	bne.w	8001512 <selectPoints+0x36>
 80016a2:	7c7b      	ldrb	r3, [r7, #17]
 80016a4:	f083 0301 	eor.w	r3, r3, #1
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f47f af31 	bne.w	8001512 <selectPoints+0x36>
    }
    LCD_Clear();
 80016b0:	f7ff fc3f 	bl	8000f32 <LCD_Clear>
}
 80016b4:	bf00      	nop
 80016b6:	372c      	adds	r7, #44	@ 0x2c
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	08008434 	.word	0x08008434
 80016c0:	0800840c 	.word	0x0800840c
 80016c4:	08008410 	.word	0x08008410
 80016c8:	08008414 	.word	0x08008414
 80016cc:	08008418 	.word	0x08008418
 80016d0:	08008428 	.word	0x08008428
 80016d4:	40010c00 	.word	0x40010c00
 80016d8:	40010800 	.word	0x40010800
 80016dc:	3fe00000 	.word	0x3fe00000

080016e0 <printResult>:

void printResult(enum OperationType operationType, double result) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4601      	mov	r1, r0
 80016e8:	e9c7 2300 	strd	r2, r3, [r7]
 80016ec:	460b      	mov	r3, r1
 80016ee:	73fb      	strb	r3, [r7, #15]
    char str[20] = {};
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
    sprintf(str, "%.4f", result);
 8001702:	f107 0014 	add.w	r0, r7, #20
 8001706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800170a:	490c      	ldr	r1, [pc, #48]	@ (800173c <printResult+0x5c>)
 800170c:	f003 fa26 	bl	8004b5c <siprintf>
    if (operationType == derivation) {
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d104      	bne.n	8001720 <printResult+0x40>
        printToScreen("Diff-Result:", topCenter);
 8001716:	2100      	movs	r1, #0
 8001718:	4809      	ldr	r0, [pc, #36]	@ (8001740 <printResult+0x60>)
 800171a:	f7ff fd31 	bl	8001180 <printToScreen>
 800171e:	e003      	b.n	8001728 <printResult+0x48>
    } else {
        printToScreen("Integ-Result:", topCenter);
 8001720:	2100      	movs	r1, #0
 8001722:	4808      	ldr	r0, [pc, #32]	@ (8001744 <printResult+0x64>)
 8001724:	f7ff fd2c 	bl	8001180 <printToScreen>
    }
    printToScreen(str, bottomStart);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2104      	movs	r1, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fd26 	bl	8001180 <printToScreen>
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	0800843c 	.word	0x0800843c
 8001740:	08008444 	.word	0x08008444
 8001744:	08008454 	.word	0x08008454

08001748 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	b091      	sub	sp, #68	@ 0x44
 800174c:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800174e:	f000 fac5 	bl	8001cdc <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001752:	f000 f8b1 	bl	80018b8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001756:	f000 f8f3 	bl	8001940 <MX_GPIO_Init>
    /* USER CODE BEGIN 2 */

    LCD_Init(); // initialize the lcd screen
 800175a:	f7ff fa3b 	bl	8000bd4 <LCD_Init>
    LCD_Puts(0, 2, (int8_t *) "Welcome :)");
 800175e:	4a52      	ldr	r2, [pc, #328]	@ (80018a8 <main+0x160>)
 8001760:	2102      	movs	r1, #2
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fb46 	bl	8000df4 <LCD_Puts>
    //  HAL_Delay(1000);
    LCD_Puts(1, 2, (int8_t *) "PLease Wait");
 8001768:	4a50      	ldr	r2, [pc, #320]	@ (80018ac <main+0x164>)
 800176a:	2102      	movs	r1, #2
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fb41 	bl	8000df4 <LCD_Puts>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {


        HAL_Delay(2000);
 8001772:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001776:	f000 fb13 	bl	8001da0 <HAL_Delay>
        LCD_Clear();
 800177a:	f7ff fbda 	bl	8000f32 <LCD_Clear>
        bool exit = false;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]

        while (!exit) {
 8001782:	e082      	b.n	800188a <main+0x142>

            HAL_Delay(200);
 8001784:	20c8      	movs	r0, #200	@ 0xc8
 8001786:	f000 fb0b 	bl	8001da0 <HAL_Delay>
            // select function
            enum FunctionType fn = selectFunction(&exit);
 800178a:	f107 0317 	add.w	r3, r7, #23
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd5a 	bl	8001248 <selectFunction>
 8001794:	4603      	mov	r3, r0
 8001796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (exit) {
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d17c      	bne.n	800189a <main+0x152>
                break;
            }
            HAL_Delay(200);
 80017a0:	20c8      	movs	r0, #200	@ 0xc8
 80017a2:	f000 fafd 	bl	8001da0 <HAL_Delay>
            // select operation
            enum OperationType op = selectOperation(&exit);
 80017a6:	f107 0317 	add.w	r3, r7, #23
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fdf0 	bl	8001390 <selectOperation>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            if (exit) {
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d170      	bne.n	800189e <main+0x156>
                break;
            }
            HAL_Delay(200);
 80017bc:	20c8      	movs	r0, #200	@ 0xc8
 80017be:	f000 faef 	bl	8001da0 <HAL_Delay>
            // select point/s
            double points[2] = {.0f, .0f};
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9c7 2300 	strd	r2, r3, [r7]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
            selectPoints(op, &exit, points);
 80017da:	463a      	mov	r2, r7
 80017dc:	f107 0117 	add.w	r1, r7, #23
 80017e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe79 	bl	80014dc <selectPoints>
            if (exit) {
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d158      	bne.n	80018a2 <main+0x15a>
                break;
            }
            HAL_Delay(200);
 80017f0:	20c8      	movs	r0, #200	@ 0xc8
 80017f2:	f000 fad5 	bl	8001da0 <HAL_Delay>
            // show result
            double result = .0f;
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
            double n = DBL_EPSILON;
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <main+0x168>)
 8001808:	e9c7 2306 	strd	r2, r3, [r7, #24]
            if (op == derivation) {
 800180c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10f      	bne.n	8001834 <main+0xec>
                result = derivative(fn, points[0], n);
 8001814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001818:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 800181c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001820:	e9cd 2300 	strd	r2, r3, [sp]
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff fb8a 	bl	8000f42 <derivative>
 800182e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 8001832:	e016      	b.n	8001862 <main+0x11a>
            } else if (op == integration) {
 8001834:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001838:	2b00      	cmp	r3, #0
 800183a:	d112      	bne.n	8001862 <main+0x11a>
                result = trapezoidalIntegral(fn, points[0], points[1], n);
 800183c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001844:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 8001848:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800184c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001850:	e9cd 2300 	strd	r2, r3, [sp]
 8001854:	4622      	mov	r2, r4
 8001856:	462b      	mov	r3, r5
 8001858:	4630      	mov	r0, r6
 800185a:	f7ff fbf5 	bl	8001048 <trapezoidalIntegral>
 800185e:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
            }
            printResult(op, result);
 8001862:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8001866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800186a:	4608      	mov	r0, r1
 800186c:	f7ff ff38 	bl	80016e0 <printResult>
            HAL_Delay(1000);
 8001870:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001874:	f000 fa94 	bl	8001da0 <HAL_Delay>
            // wait for settings pushed to restart
            while (1) {
                if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0) {
 8001878:	2120      	movs	r1, #32
 800187a:	480e      	ldr	r0, [pc, #56]	@ (80018b4 <main+0x16c>)
 800187c:	f000 fd1c 	bl	80022b8 <HAL_GPIO_ReadPin>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f8      	bne.n	8001878 <main+0x130>
                    exit = true;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
        while (!exit) {
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	f083 0301 	eor.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	f47f af76 	bne.w	8001784 <main+0x3c>
 8001898:	e76b      	b.n	8001772 <main+0x2a>
                break;
 800189a:	bf00      	nop
 800189c:	e769      	b.n	8001772 <main+0x2a>
                break;
 800189e:	bf00      	nop
 80018a0:	e767      	b.n	8001772 <main+0x2a>
                break;
 80018a2:	bf00      	nop
    while (1) {
 80018a4:	e765      	b.n	8001772 <main+0x2a>
 80018a6:	bf00      	nop
 80018a8:	08008464 	.word	0x08008464
 80018ac:	08008470 	.word	0x08008470
 80018b0:	3cb00000 	.word	0x3cb00000
 80018b4:	40010c00 	.word	0x40010c00

080018b8 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	@ 0x40
 80018bc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0318 	add.w	r3, r7, #24
 80018c2:	2228      	movs	r2, #40	@ 0x28
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f9ab 	bl	8004c22 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e2:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e8:	2301      	movs	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80018f6:	2300      	movs	r3, #0
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fd0a 	bl	8002318 <HAL_RCC_OscConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x56>
        Error_Handler();
 800190a:	f000 f895 	bl	8001a38 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800190e:	230f      	movs	r3, #15
 8001910:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2302      	movs	r3, #2
 8001914:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001916:	2380      	movs	r3, #128	@ 0x80
 8001918:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f000 ff78 	bl	800281c <HAL_RCC_ClockConfig>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x7e>
        Error_Handler();
 8001932:	f000 f881 	bl	8001a38 <Error_Handler>
    }
}
 8001936:	bf00      	nop
 8001938:	3740      	adds	r7, #64	@ 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001954:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <MX_GPIO_Init+0xec>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a34      	ldr	r2, [pc, #208]	@ (8001a2c <MX_GPIO_Init+0xec>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <MX_GPIO_Init+0xec>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <MX_GPIO_Init+0xec>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a2e      	ldr	r2, [pc, #184]	@ (8001a2c <MX_GPIO_Init+0xec>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <MX_GPIO_Init+0xec>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <MX_GPIO_Init+0xec>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a28      	ldr	r2, [pc, #160]	@ (8001a2c <MX_GPIO_Init+0xec>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_GPIO_Init+0xec>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800199c:	2200      	movs	r2, #0
 800199e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80019a2:	4823      	ldr	r0, [pc, #140]	@ (8001a30 <MX_GPIO_Init+0xf0>)
 80019a4:	f000 fc9f 	bl	80022e6 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80019ae:	4821      	ldr	r0, [pc, #132]	@ (8001a34 <MX_GPIO_Init+0xf4>)
 80019b0:	f000 fc99 	bl	80022e6 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80019b4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4619      	mov	r1, r3
 80019cc:	4818      	ldr	r0, [pc, #96]	@ (8001a30 <MX_GPIO_Init+0xf0>)
 80019ce:	f000 faef 	bl	8001fb0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA8 PA9 */
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80019d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4619      	mov	r1, r3
 80019ea:	4812      	ldr	r0, [pc, #72]	@ (8001a34 <MX_GPIO_Init+0xf4>)
 80019ec:	f000 fae0 	bl	8001fb0 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 0310 	add.w	r3, r7, #16
 8001a02:	4619      	mov	r1, r3
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <MX_GPIO_Init+0xf4>)
 8001a06:	f000 fad3 	bl	8001fb0 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB3 PB5 PB9 */
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_9;
 8001a0a:	f44f 730a 	mov.w	r3, #552	@ 0x228
 8001a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4804      	ldr	r0, [pc, #16]	@ (8001a30 <MX_GPIO_Init+0xf0>)
 8001a20:	f000 fac6 	bl	8001fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a24:	bf00      	nop
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010c00 	.word	0x40010c00
 8001a34:	40010800 	.word	0x40010800

08001a38 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <HAL_MspInit+0x5c>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6193      	str	r3, [r2, #24]
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <HAL_MspInit+0x5c>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa0 <HAL_MspInit+0x5c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <HAL_MspInit+0x5c>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_MspInit+0x60>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4a04      	ldr	r2, [pc, #16]	@ (8001aa4 <HAL_MspInit+0x60>)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <NMI_Handler+0x4>

08001ab0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <UsageFault_Handler+0x4>

08001ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af8:	f000 f936 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_kill>:

int _kill(int pid, int sig)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b18:	f003 f8d6 	bl	8004cc8 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2216      	movs	r2, #22
 8001b20:	601a      	str	r2, [r3, #0]
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_exit>:

void _exit (int status)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffe7 	bl	8001b0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <_exit+0x12>

08001b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e00a      	b.n	8001b6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b56:	f3af 8000 	nop.w
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	b2ca      	uxtb	r2, r1
 8001b64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf0      	blt.n	8001b56 <_read+0x12>
  }

  return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e009      	b.n	8001ba4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf1      	blt.n	8001b90 <_write+0x12>
  }
  return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bdc:	605a      	str	r2, [r3, #4]
  return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <_isatty>:

int _isatty(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f003 f83e 	bl	8004cc8 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20005000 	.word	0x20005000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000204 	.word	0x20000204
 8001c80:	20000358 	.word	0x20000358

08001c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c90:	f7ff fff8 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c94:	480b      	ldr	r0, [pc, #44]	@ (8001cc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c96:	490c      	ldr	r1, [pc, #48]	@ (8001cc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ccc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c9c:	e002      	b.n	8001ca4 <LoopCopyDataInit>

08001c9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca2:	3304      	adds	r3, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca8:	d3f9      	bcc.n	8001c9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cac:	4c09      	ldr	r4, [pc, #36]	@ (8001cd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb0:	e001      	b.n	8001cb6 <LoopFillZerobss>

08001cb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb4:	3204      	adds	r2, #4

08001cb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb8:	d3fb      	bcc.n	8001cb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cba:	f003 f80b 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cbe:	f7ff fd43 	bl	8001748 <main>
  bx lr
 8001cc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ccc:	08008ab8 	.word	0x08008ab8
  ldr r2, =_sbss
 8001cd0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001cd4:	20000358 	.word	0x20000358

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_Init+0x28>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_Init+0x28>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f92b 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf2:	200f      	movs	r0, #15
 8001cf4:	f000 f808 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf8:	f7ff fea4 	bl	8001a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40022000 	.word	0x40022000

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f935 	bl	8001f96 <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d44:	f000 f90b 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	@ (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	20000008 	.word	0x20000008
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <HAL_IncTick+0x1c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_IncTick+0x20>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a03      	ldr	r2, [pc, #12]	@ (8001d88 <HAL_IncTick+0x20>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000208 	.word	0x20000208

08001d8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	@ (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	20000208 	.word	0x20000208

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff fff0 	bl	8001d8c <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffe0 	bl	8001d8c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000008 	.word	0x20000008

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	@ (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	@ (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	@ (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	@ 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f28:	f7ff ff90 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff49 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff5e 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff90 	bl	8001ea0 <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5f 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffb0 	bl	8001f04 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b08b      	sub	sp, #44	@ 0x2c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	e169      	b.n	8002298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 8158 	bne.w	8002292 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a9a      	ldr	r2, [pc, #616]	@ (8002250 <HAL_GPIO_Init+0x2a0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d05e      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8001fec:	4a98      	ldr	r2, [pc, #608]	@ (8002250 <HAL_GPIO_Init+0x2a0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d875      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8001ff2:	4a98      	ldr	r2, [pc, #608]	@ (8002254 <HAL_GPIO_Init+0x2a4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d058      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8001ff8:	4a96      	ldr	r2, [pc, #600]	@ (8002254 <HAL_GPIO_Init+0x2a4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d86f      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8001ffe:	4a96      	ldr	r2, [pc, #600]	@ (8002258 <HAL_GPIO_Init+0x2a8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d052      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8002004:	4a94      	ldr	r2, [pc, #592]	@ (8002258 <HAL_GPIO_Init+0x2a8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d869      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 800200a:	4a94      	ldr	r2, [pc, #592]	@ (800225c <HAL_GPIO_Init+0x2ac>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d04c      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8002010:	4a92      	ldr	r2, [pc, #584]	@ (800225c <HAL_GPIO_Init+0x2ac>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d863      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8002016:	4a92      	ldr	r2, [pc, #584]	@ (8002260 <HAL_GPIO_Init+0x2b0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d046      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 800201c:	4a90      	ldr	r2, [pc, #576]	@ (8002260 <HAL_GPIO_Init+0x2b0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d85d      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d82a      	bhi.n	800207c <HAL_GPIO_Init+0xcc>
 8002026:	2b12      	cmp	r3, #18
 8002028:	d859      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 800202a:	a201      	add	r2, pc, #4	@ (adr r2, 8002030 <HAL_GPIO_Init+0x80>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	080020ab 	.word	0x080020ab
 8002034:	08002085 	.word	0x08002085
 8002038:	08002097 	.word	0x08002097
 800203c:	080020d9 	.word	0x080020d9
 8002040:	080020df 	.word	0x080020df
 8002044:	080020df 	.word	0x080020df
 8002048:	080020df 	.word	0x080020df
 800204c:	080020df 	.word	0x080020df
 8002050:	080020df 	.word	0x080020df
 8002054:	080020df 	.word	0x080020df
 8002058:	080020df 	.word	0x080020df
 800205c:	080020df 	.word	0x080020df
 8002060:	080020df 	.word	0x080020df
 8002064:	080020df 	.word	0x080020df
 8002068:	080020df 	.word	0x080020df
 800206c:	080020df 	.word	0x080020df
 8002070:	080020df 	.word	0x080020df
 8002074:	0800208d 	.word	0x0800208d
 8002078:	080020a1 	.word	0x080020a1
 800207c:	4a79      	ldr	r2, [pc, #484]	@ (8002264 <HAL_GPIO_Init+0x2b4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002082:	e02c      	b.n	80020de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e029      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	3304      	adds	r3, #4
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e024      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	3308      	adds	r3, #8
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e01f      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	330c      	adds	r3, #12
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e01a      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020b2:	2304      	movs	r3, #4
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e013      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c0:	2308      	movs	r3, #8
 80020c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	611a      	str	r2, [r3, #16]
          break;
 80020ca:	e009      	b.n	80020e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020cc:	2308      	movs	r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	615a      	str	r2, [r3, #20]
          break;
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          break;
 80020de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2bff      	cmp	r3, #255	@ 0xff
 80020e4:	d801      	bhi.n	80020ea <HAL_GPIO_Init+0x13a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_Init+0x13e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2bff      	cmp	r3, #255	@ 0xff
 80020f4:	d802      	bhi.n	80020fc <HAL_GPIO_Init+0x14c>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x152>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	3b08      	subs	r3, #8
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	210f      	movs	r1, #15
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80b1 	beq.w	8002292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002130:	4b4d      	ldr	r3, [pc, #308]	@ (8002268 <HAL_GPIO_Init+0x2b8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a4c      	ldr	r2, [pc, #304]	@ (8002268 <HAL_GPIO_Init+0x2b8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_GPIO_Init+0x2b8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002148:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_GPIO_Init+0x2bc>)
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a40      	ldr	r2, [pc, #256]	@ (8002270 <HAL_GPIO_Init+0x2c0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_GPIO_Init+0x1ec>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <HAL_GPIO_Init+0x2c4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x1e8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3e      	ldr	r2, [pc, #248]	@ (8002278 <HAL_GPIO_Init+0x2c8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3d      	ldr	r2, [pc, #244]	@ (800227c <HAL_GPIO_Init+0x2cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_GPIO_Init+0x1e0>
 800218c:	2303      	movs	r3, #3
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002190:	2304      	movs	r3, #4
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800219c:	2300      	movs	r3, #0
 800219e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ae:	492f      	ldr	r1, [pc, #188]	@ (800226c <HAL_GPIO_Init+0x2bc>)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	492c      	ldr	r1, [pc, #176]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4928      	ldr	r1, [pc, #160]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	4922      	ldr	r1, [pc, #136]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	491e      	ldr	r1, [pc, #120]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002208:	4013      	ands	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002218:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4918      	ldr	r1, [pc, #96]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002226:	4b16      	ldr	r3, [pc, #88]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	4914      	ldr	r1, [pc, #80]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d021      	beq.n	8002284 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	490e      	ldr	r1, [pc, #56]	@ (8002280 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	600b      	str	r3, [r1, #0]
 800224c:	e021      	b.n	8002292 <HAL_GPIO_Init+0x2e2>
 800224e:	bf00      	nop
 8002250:	10320000 	.word	0x10320000
 8002254:	10310000 	.word	0x10310000
 8002258:	10220000 	.word	0x10220000
 800225c:	10210000 	.word	0x10210000
 8002260:	10120000 	.word	0x10120000
 8002264:	10110000 	.word	0x10110000
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	40010800 	.word	0x40010800
 8002274:	40010c00 	.word	0x40010c00
 8002278:	40011000 	.word	0x40011000
 800227c:	40011400 	.word	0x40011400
 8002280:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	43db      	mvns	r3, r3
 800228c:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <HAL_GPIO_Init+0x304>)
 800228e:	4013      	ands	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	3301      	adds	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f47f ae8e 	bne.w	8001fc4 <HAL_GPIO_Init+0x14>
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	372c      	adds	r7, #44	@ 0x2c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e001      	b.n	80022da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]
 80022f2:	4613      	mov	r3, r2
 80022f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f6:	787b      	ldrb	r3, [r7, #1]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002302:	e003      	b.n	800230c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	041a      	lsls	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	611a      	str	r2, [r3, #16]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
	...

08002318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e272      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8087 	beq.w	8002446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002338:	4b92      	ldr	r3, [pc, #584]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b04      	cmp	r3, #4
 8002342:	d00c      	beq.n	800235e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002344:	4b8f      	ldr	r3, [pc, #572]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d112      	bne.n	8002376 <HAL_RCC_OscConfig+0x5e>
 8002350:	4b8c      	ldr	r3, [pc, #560]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235c:	d10b      	bne.n	8002376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	4b89      	ldr	r3, [pc, #548]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d06c      	beq.n	8002444 <HAL_RCC_OscConfig+0x12c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d168      	bne.n	8002444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e24c      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x76>
 8002380:	4b80      	ldr	r3, [pc, #512]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a7f      	ldr	r2, [pc, #508]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e02e      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x98>
 8002396:	4b7b      	ldr	r3, [pc, #492]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7a      	ldr	r2, [pc, #488]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b78      	ldr	r3, [pc, #480]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a77      	ldr	r2, [pc, #476]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0xbc>
 80023ba:	4b72      	ldr	r3, [pc, #456]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a71      	ldr	r2, [pc, #452]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 80023d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b68      	ldr	r3, [pc, #416]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a67      	ldr	r2, [pc, #412]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fcca 	bl	8001d8c <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fcc6 	bl	8001d8c <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	@ 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e200      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b5d      	ldr	r3, [pc, #372]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xe4>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff fcb6 	bl	8001d8c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff fcb2 	bl	8001d8c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	@ 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1ec      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	4b53      	ldr	r3, [pc, #332]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x10c>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d063      	beq.n	800251a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002452:	4b4c      	ldr	r3, [pc, #304]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800245e:	4b49      	ldr	r3, [pc, #292]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b08      	cmp	r3, #8
 8002468:	d11c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x18c>
 800246a:	4b46      	ldr	r3, [pc, #280]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d116      	bne.n	80024a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	4b43      	ldr	r3, [pc, #268]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x176>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e1c0      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b3d      	ldr	r3, [pc, #244]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4939      	ldr	r1, [pc, #228]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	e03a      	b.n	800251a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ac:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fc6b 	bl	8001d8c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7ff fc67 	bl	8001d8c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1a1      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4927      	ldr	r1, [pc, #156]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <HAL_RCC_OscConfig+0x270>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fc4a 	bl	8001d8c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fc:	f7ff fc46 	bl	8001d8c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e180      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	4b1d      	ldr	r3, [pc, #116]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03a      	beq.n	800259c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d019      	beq.n	8002562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252e:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_RCC_OscConfig+0x274>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7ff fc2a 	bl	8001d8c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff fc26 	bl	8001d8c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e160      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f000 fa9c 	bl	8002a98 <RCC_Delay>
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_RCC_OscConfig+0x274>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7ff fc10 	bl	8001d8c <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256e:	e00f      	b.n	8002590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7ff fc0c 	bl	8001d8c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d908      	bls.n	8002590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e146      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	42420000 	.word	0x42420000
 800258c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b92      	ldr	r3, [pc, #584]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e9      	bne.n	8002570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a6 	beq.w	80026f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b8b      	ldr	r3, [pc, #556]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10d      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b88      	ldr	r3, [pc, #544]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a87      	ldr	r2, [pc, #540]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	61d3      	str	r3, [r2, #28]
 80025c6:	4b85      	ldr	r3, [pc, #532]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b82      	ldr	r3, [pc, #520]	@ (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b7f      	ldr	r3, [pc, #508]	@ (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7e      	ldr	r2, [pc, #504]	@ (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fbcd 	bl	8001d8c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7ff fbc9 	bl	8001d8c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	@ 0x64
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e103      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b75      	ldr	r3, [pc, #468]	@ (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x312>
 800261c:	4b6f      	ldr	r3, [pc, #444]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a6e      	ldr	r2, [pc, #440]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e02d      	b.n	8002686 <HAL_RCC_OscConfig+0x36e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x334>
 8002632:	4b6a      	ldr	r3, [pc, #424]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a69      	ldr	r2, [pc, #420]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	4b67      	ldr	r3, [pc, #412]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a66      	ldr	r2, [pc, #408]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6213      	str	r3, [r2, #32]
 800264a:	e01c      	b.n	8002686 <HAL_RCC_OscConfig+0x36e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x356>
 8002654:	4b61      	ldr	r3, [pc, #388]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a60      	ldr	r2, [pc, #384]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	4b5e      	ldr	r3, [pc, #376]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a5d      	ldr	r2, [pc, #372]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e00b      	b.n	8002686 <HAL_RCC_OscConfig+0x36e>
 800266e:	4b5b      	ldr	r3, [pc, #364]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a5a      	ldr	r2, [pc, #360]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4b58      	ldr	r3, [pc, #352]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a57      	ldr	r2, [pc, #348]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d015      	beq.n	80026ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb7d 	bl	8001d8c <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7ff fb79 	bl	8001d8c <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0b1      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	4b4b      	ldr	r3, [pc, #300]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ee      	beq.n	8002696 <HAL_RCC_OscConfig+0x37e>
 80026b8:	e014      	b.n	80026e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fb67 	bl	8001d8c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7ff fb63 	bl	8001d8c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e09b      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ee      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ea:	4b3c      	ldr	r3, [pc, #240]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a3b      	ldr	r2, [pc, #236]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002700:	4b36      	ldr	r3, [pc, #216]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d061      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d146      	bne.n	80027a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002714:	4b33      	ldr	r3, [pc, #204]	@ (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7ff fb37 	bl	8001d8c <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7ff fb33 	bl	8001d8c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e06d      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002734:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002748:	d108      	bne.n	800275c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800274a:	4b24      	ldr	r3, [pc, #144]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4921      	ldr	r1, [pc, #132]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4b1f      	ldr	r3, [pc, #124]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a19      	ldr	r1, [r3, #32]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	430b      	orrs	r3, r1
 800276e:	491b      	ldr	r1, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7ff fb07 	bl	8001d8c <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002782:	f7ff fb03 	bl	8001d8c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03d      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x46a>
 80027a0:	e035      	b.n	800280e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff faf0 	bl	8001d8c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff faec 	bl	8001d8c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e026      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x498>
 80027ce:	e01e      	b.n	800280e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e019      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_RCC_OscConfig+0x500>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d0      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b6a      	ldr	r3, [pc, #424]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b67      	ldr	r3, [pc, #412]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4965      	ldr	r1, [pc, #404]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a58      	ldr	r2, [pc, #352]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800289a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d040      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b41      	ldr	r3, [pc, #260]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e073      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3d      	ldr	r3, [pc, #244]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b39      	ldr	r3, [pc, #228]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4936      	ldr	r1, [pc, #216]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7ff fa3e 	bl	8001d8c <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7ff fa3a 	bl	8001d8c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e053      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2d      	ldr	r3, [pc, #180]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b27      	ldr	r3, [pc, #156]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d210      	bcs.n	800296c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b24      	ldr	r3, [pc, #144]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4922      	ldr	r1, [pc, #136]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002996:	4b12      	ldr	r3, [pc, #72]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f821 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	490a      	ldr	r1, [pc, #40]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	5ccb      	ldrb	r3, [r1, r3]
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	@ (80029e8 <HAL_RCC_ClockConfig+0x1cc>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_RCC_ClockConfig+0x1d0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f99c 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	0800847c 	.word	0x0800847c
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d002      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x30>
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_GetSysClockFreq+0x36>
 8002a1e:	e027      	b.n	8002a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a20:	4b19      	ldr	r3, [pc, #100]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a22:	613b      	str	r3, [r7, #16]
      break;
 8002a24:	e027      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	0c9b      	lsrs	r3, r3, #18
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a17      	ldr	r2, [pc, #92]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a3e:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	0c5b      	lsrs	r3, r3, #17
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a4a:	5cd3      	ldrb	r3, [r2, r3]
 8002a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a0d      	ldr	r2, [pc, #52]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a52:	fb03 f202 	mul.w	r2, r3, r2
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e004      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0c      	ldr	r2, [pc, #48]	@ (8002a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	613b      	str	r3, [r7, #16]
      break;
 8002a6e:	e002      	b.n	8002a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a70:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a72:	613b      	str	r3, [r7, #16]
      break;
 8002a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a76:	693b      	ldr	r3, [r7, #16]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	007a1200 	.word	0x007a1200
 8002a8c:	0800848c 	.word	0x0800848c
 8002a90:	0800849c 	.word	0x0800849c
 8002a94:	003d0900 	.word	0x003d0900

08002a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8002acc <RCC_Delay+0x34>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <RCC_Delay+0x38>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	0a5b      	lsrs	r3, r3, #9
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ab4:	bf00      	nop
  }
  while (Delay --);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	60fa      	str	r2, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1f9      	bne.n	8002ab4 <RCC_Delay+0x1c>
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	10624dd3 	.word	0x10624dd3

08002ad4 <sqrt>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	4606      	mov	r6, r0
 8002ad8:	460f      	mov	r7, r1
 8002ada:	f000 f8ab 	bl	8002c34 <__ieee754_sqrt>
 8002ade:	4632      	mov	r2, r6
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	4630      	mov	r0, r6
 8002ae8:	4639      	mov	r1, r7
 8002aea:	f7fd ff8f 	bl	8000a0c <__aeabi_dcmpun>
 8002aee:	b990      	cbnz	r0, 8002b16 <sqrt+0x42>
 8002af0:	2200      	movs	r2, #0
 8002af2:	2300      	movs	r3, #0
 8002af4:	4630      	mov	r0, r6
 8002af6:	4639      	mov	r1, r7
 8002af8:	f7fd ff60 	bl	80009bc <__aeabi_dcmplt>
 8002afc:	b158      	cbz	r0, 8002b16 <sqrt+0x42>
 8002afe:	f002 f8e3 	bl	8004cc8 <__errno>
 8002b02:	2321      	movs	r3, #33	@ 0x21
 8002b04:	2200      	movs	r2, #0
 8002b06:	6003      	str	r3, [r0, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fd fe0d 	bl	800072c <__aeabi_ddiv>
 8002b12:	4604      	mov	r4, r0
 8002b14:	460d      	mov	r5, r1
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b1c <cos>:
 8002b1c:	b530      	push	{r4, r5, lr}
 8002b1e:	4d20      	ldr	r5, [pc, #128]	@ (8002ba0 <cos+0x84>)
 8002b20:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002b24:	42ac      	cmp	r4, r5
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	d806      	bhi.n	8002b3c <cos+0x20>
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2300      	movs	r3, #0
 8002b32:	b007      	add	sp, #28
 8002b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b38:	f000 b952 	b.w	8002de0 <__kernel_cos>
 8002b3c:	4d19      	ldr	r5, [pc, #100]	@ (8002ba4 <cos+0x88>)
 8002b3e:	42ac      	cmp	r4, r5
 8002b40:	d903      	bls.n	8002b4a <cos+0x2e>
 8002b42:	f7fd fb11 	bl	8000168 <__aeabi_dsub>
 8002b46:	b007      	add	sp, #28
 8002b48:	bd30      	pop	{r4, r5, pc}
 8002b4a:	aa02      	add	r2, sp, #8
 8002b4c:	f000 fac0 	bl	80030d0 <__ieee754_rem_pio2>
 8002b50:	f000 0003 	and.w	r0, r0, #3
 8002b54:	2801      	cmp	r0, #1
 8002b56:	d009      	beq.n	8002b6c <cos+0x50>
 8002b58:	2802      	cmp	r0, #2
 8002b5a:	d011      	beq.n	8002b80 <cos+0x64>
 8002b5c:	b9b8      	cbnz	r0, 8002b8e <cos+0x72>
 8002b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b66:	f000 f93b 	bl	8002de0 <__kernel_cos>
 8002b6a:	e7ec      	b.n	8002b46 <cos+0x2a>
 8002b6c:	9000      	str	r0, [sp, #0]
 8002b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b76:	f000 f9f3 	bl	8002f60 <__kernel_sin>
 8002b7a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002b7e:	e7e2      	b.n	8002b46 <cos+0x2a>
 8002b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b88:	f000 f92a 	bl	8002de0 <__kernel_cos>
 8002b8c:	e7f5      	b.n	8002b7a <cos+0x5e>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002b9a:	f000 f9e1 	bl	8002f60 <__kernel_sin>
 8002b9e:	e7d2      	b.n	8002b46 <cos+0x2a>
 8002ba0:	3fe921fb 	.word	0x3fe921fb
 8002ba4:	7fefffff 	.word	0x7fefffff

08002ba8 <sin>:
 8002ba8:	b530      	push	{r4, r5, lr}
 8002baa:	4d20      	ldr	r5, [pc, #128]	@ (8002c2c <sin+0x84>)
 8002bac:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8002bb0:	42ac      	cmp	r4, r5
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	d806      	bhi.n	8002bc8 <sin+0x20>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f000 f9cd 	bl	8002f60 <__kernel_sin>
 8002bc6:	e004      	b.n	8002bd2 <sin+0x2a>
 8002bc8:	4d19      	ldr	r5, [pc, #100]	@ (8002c30 <sin+0x88>)
 8002bca:	42ac      	cmp	r4, r5
 8002bcc:	d903      	bls.n	8002bd6 <sin+0x2e>
 8002bce:	f7fd facb 	bl	8000168 <__aeabi_dsub>
 8002bd2:	b007      	add	sp, #28
 8002bd4:	bd30      	pop	{r4, r5, pc}
 8002bd6:	aa02      	add	r2, sp, #8
 8002bd8:	f000 fa7a 	bl	80030d0 <__ieee754_rem_pio2>
 8002bdc:	f000 0003 	and.w	r0, r0, #3
 8002be0:	2801      	cmp	r0, #1
 8002be2:	d009      	beq.n	8002bf8 <sin+0x50>
 8002be4:	2802      	cmp	r0, #2
 8002be6:	d00e      	beq.n	8002c06 <sin+0x5e>
 8002be8:	b9c0      	cbnz	r0, 8002c1c <sin+0x74>
 8002bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bf6:	e7e4      	b.n	8002bc2 <sin+0x1a>
 8002bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c00:	f000 f8ee 	bl	8002de0 <__kernel_cos>
 8002c04:	e7e5      	b.n	8002bd2 <sin+0x2a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c12:	f000 f9a5 	bl	8002f60 <__kernel_sin>
 8002c16:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8002c1a:	e7da      	b.n	8002bd2 <sin+0x2a>
 8002c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c24:	f000 f8dc 	bl	8002de0 <__kernel_cos>
 8002c28:	e7f5      	b.n	8002c16 <sin+0x6e>
 8002c2a:	bf00      	nop
 8002c2c:	3fe921fb 	.word	0x3fe921fb
 8002c30:	7fefffff 	.word	0x7fefffff

08002c34 <__ieee754_sqrt>:
 8002c34:	4a67      	ldr	r2, [pc, #412]	@ (8002dd4 <__ieee754_sqrt+0x1a0>)
 8002c36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	4606      	mov	r6, r0
 8002c3e:	460f      	mov	r7, r1
 8002c40:	460b      	mov	r3, r1
 8002c42:	4604      	mov	r4, r0
 8002c44:	d10e      	bne.n	8002c64 <__ieee754_sqrt+0x30>
 8002c46:	4602      	mov	r2, r0
 8002c48:	f7fd fc46 	bl	80004d8 <__aeabi_dmul>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4630      	mov	r0, r6
 8002c52:	4639      	mov	r1, r7
 8002c54:	f7fd fa8a 	bl	800016c <__adddf3>
 8002c58:	4606      	mov	r6, r0
 8002c5a:	460f      	mov	r7, r1
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	4639      	mov	r1, r7
 8002c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c64:	2900      	cmp	r1, #0
 8002c66:	dc0c      	bgt.n	8002c82 <__ieee754_sqrt+0x4e>
 8002c68:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8002c6c:	4302      	orrs	r2, r0
 8002c6e:	d0f5      	beq.n	8002c5c <__ieee754_sqrt+0x28>
 8002c70:	b189      	cbz	r1, 8002c96 <__ieee754_sqrt+0x62>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f7fd fa78 	bl	8000168 <__aeabi_dsub>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	f7fd fd56 	bl	800072c <__aeabi_ddiv>
 8002c80:	e7ea      	b.n	8002c58 <__ieee754_sqrt+0x24>
 8002c82:	150a      	asrs	r2, r1, #20
 8002c84:	d115      	bne.n	8002cb2 <__ieee754_sqrt+0x7e>
 8002c86:	2100      	movs	r1, #0
 8002c88:	e009      	b.n	8002c9e <__ieee754_sqrt+0x6a>
 8002c8a:	0ae3      	lsrs	r3, r4, #11
 8002c8c:	3a15      	subs	r2, #21
 8002c8e:	0564      	lsls	r4, r4, #21
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0fa      	beq.n	8002c8a <__ieee754_sqrt+0x56>
 8002c94:	e7f7      	b.n	8002c86 <__ieee754_sqrt+0x52>
 8002c96:	460a      	mov	r2, r1
 8002c98:	e7fa      	b.n	8002c90 <__ieee754_sqrt+0x5c>
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	3101      	adds	r1, #1
 8002c9e:	02d8      	lsls	r0, r3, #11
 8002ca0:	d5fb      	bpl.n	8002c9a <__ieee754_sqrt+0x66>
 8002ca2:	1e48      	subs	r0, r1, #1
 8002ca4:	1a12      	subs	r2, r2, r0
 8002ca6:	f1c1 0020 	rsb	r0, r1, #32
 8002caa:	fa24 f000 	lsr.w	r0, r4, r0
 8002cae:	4303      	orrs	r3, r0
 8002cb0:	408c      	lsls	r4, r1
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8002cb8:	2116      	movs	r1, #22
 8002cba:	07d2      	lsls	r2, r2, #31
 8002cbc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002cc0:	4632      	mov	r2, r6
 8002cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cca:	bf5c      	itt	pl
 8002ccc:	005b      	lslpl	r3, r3, #1
 8002cce:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8002cd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002cd6:	bf58      	it	pl
 8002cd8:	0064      	lslpl	r4, r4, #1
 8002cda:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8002cde:	107f      	asrs	r7, r7, #1
 8002ce0:	0064      	lsls	r4, r4, #1
 8002ce2:	1815      	adds	r5, r2, r0
 8002ce4:	429d      	cmp	r5, r3
 8002ce6:	bfde      	ittt	le
 8002ce8:	182a      	addle	r2, r5, r0
 8002cea:	1b5b      	suble	r3, r3, r5
 8002cec:	1836      	addle	r6, r6, r0
 8002cee:	0fe5      	lsrs	r5, r4, #31
 8002cf0:	3901      	subs	r1, #1
 8002cf2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002cf6:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8002cfa:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002cfe:	d1f0      	bne.n	8002ce2 <__ieee754_sqrt+0xae>
 8002d00:	460d      	mov	r5, r1
 8002d02:	f04f 0a20 	mov.w	sl, #32
 8002d06:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	eb01 0c00 	add.w	ip, r1, r0
 8002d10:	db02      	blt.n	8002d18 <__ieee754_sqrt+0xe4>
 8002d12:	d113      	bne.n	8002d3c <__ieee754_sqrt+0x108>
 8002d14:	45a4      	cmp	ip, r4
 8002d16:	d811      	bhi.n	8002d3c <__ieee754_sqrt+0x108>
 8002d18:	f1bc 0f00 	cmp.w	ip, #0
 8002d1c:	eb0c 0100 	add.w	r1, ip, r0
 8002d20:	da42      	bge.n	8002da8 <__ieee754_sqrt+0x174>
 8002d22:	2900      	cmp	r1, #0
 8002d24:	db40      	blt.n	8002da8 <__ieee754_sqrt+0x174>
 8002d26:	f102 0e01 	add.w	lr, r2, #1
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	4672      	mov	r2, lr
 8002d2e:	45a4      	cmp	ip, r4
 8002d30:	bf88      	it	hi
 8002d32:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8002d36:	eba4 040c 	sub.w	r4, r4, ip
 8002d3a:	4405      	add	r5, r0
 8002d3c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8002d40:	f1ba 0a01 	subs.w	sl, sl, #1
 8002d44:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8002d48:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8002d4c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8002d50:	d1db      	bne.n	8002d0a <__ieee754_sqrt+0xd6>
 8002d52:	431c      	orrs	r4, r3
 8002d54:	d01a      	beq.n	8002d8c <__ieee754_sqrt+0x158>
 8002d56:	4c20      	ldr	r4, [pc, #128]	@ (8002dd8 <__ieee754_sqrt+0x1a4>)
 8002d58:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8002ddc <__ieee754_sqrt+0x1a8>
 8002d5c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002d60:	e9db 2300 	ldrd	r2, r3, [fp]
 8002d64:	f7fd fa00 	bl	8000168 <__aeabi_dsub>
 8002d68:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4640      	mov	r0, r8
 8002d72:	4649      	mov	r1, r9
 8002d74:	f7fd fe2c 	bl	80009d0 <__aeabi_dcmple>
 8002d78:	b140      	cbz	r0, 8002d8c <__ieee754_sqrt+0x158>
 8002d7a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002d7e:	e9db 2300 	ldrd	r2, r3, [fp]
 8002d82:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8002d86:	d111      	bne.n	8002dac <__ieee754_sqrt+0x178>
 8002d88:	4655      	mov	r5, sl
 8002d8a:	3601      	adds	r6, #1
 8002d8c:	1072      	asrs	r2, r6, #1
 8002d8e:	086b      	lsrs	r3, r5, #1
 8002d90:	07f1      	lsls	r1, r6, #31
 8002d92:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8002d96:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8002d9a:	bf48      	it	mi
 8002d9c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8002da0:	4618      	mov	r0, r3
 8002da2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8002da6:	e757      	b.n	8002c58 <__ieee754_sqrt+0x24>
 8002da8:	4696      	mov	lr, r2
 8002daa:	e7be      	b.n	8002d2a <__ieee754_sqrt+0xf6>
 8002dac:	f7fd f9de 	bl	800016c <__adddf3>
 8002db0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4640      	mov	r0, r8
 8002dba:	4649      	mov	r1, r9
 8002dbc:	f7fd fdfe 	bl	80009bc <__aeabi_dcmplt>
 8002dc0:	b120      	cbz	r0, 8002dcc <__ieee754_sqrt+0x198>
 8002dc2:	1ca8      	adds	r0, r5, #2
 8002dc4:	bf08      	it	eq
 8002dc6:	3601      	addeq	r6, #1
 8002dc8:	3502      	adds	r5, #2
 8002dca:	e7df      	b.n	8002d8c <__ieee754_sqrt+0x158>
 8002dcc:	1c6b      	adds	r3, r5, #1
 8002dce:	f023 0501 	bic.w	r5, r3, #1
 8002dd2:	e7db      	b.n	8002d8c <__ieee754_sqrt+0x158>
 8002dd4:	7ff00000 	.word	0x7ff00000
 8002dd8:	20000018 	.word	0x20000018
 8002ddc:	20000010 	.word	0x20000010

08002de0 <__kernel_cos>:
 8002de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8002de8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8002dec:	4680      	mov	r8, r0
 8002dee:	4689      	mov	r9, r1
 8002df0:	e9cd 2300 	strd	r2, r3, [sp]
 8002df4:	d204      	bcs.n	8002e00 <__kernel_cos+0x20>
 8002df6:	f7fd fe1f 	bl	8000a38 <__aeabi_d2iz>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	f000 8086 	beq.w	8002f0c <__kernel_cos+0x12c>
 8002e00:	4642      	mov	r2, r8
 8002e02:	464b      	mov	r3, r9
 8002e04:	4640      	mov	r0, r8
 8002e06:	4649      	mov	r1, r9
 8002e08:	f7fd fb66 	bl	80004d8 <__aeabi_dmul>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f48 <__kernel_cos+0x168>)
 8002e10:	4604      	mov	r4, r0
 8002e12:	460d      	mov	r5, r1
 8002e14:	f7fd fb60 	bl	80004d8 <__aeabi_dmul>
 8002e18:	a33f      	add	r3, pc, #252	@ (adr r3, 8002f18 <__kernel_cos+0x138>)
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	4682      	mov	sl, r0
 8002e20:	468b      	mov	fp, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fb57 	bl	80004d8 <__aeabi_dmul>
 8002e2a:	a33d      	add	r3, pc, #244	@ (adr r3, 8002f20 <__kernel_cos+0x140>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd f99c 	bl	800016c <__adddf3>
 8002e34:	4622      	mov	r2, r4
 8002e36:	462b      	mov	r3, r5
 8002e38:	f7fd fb4e 	bl	80004d8 <__aeabi_dmul>
 8002e3c:	a33a      	add	r3, pc, #232	@ (adr r3, 8002f28 <__kernel_cos+0x148>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f7fd f991 	bl	8000168 <__aeabi_dsub>
 8002e46:	4622      	mov	r2, r4
 8002e48:	462b      	mov	r3, r5
 8002e4a:	f7fd fb45 	bl	80004d8 <__aeabi_dmul>
 8002e4e:	a338      	add	r3, pc, #224	@ (adr r3, 8002f30 <__kernel_cos+0x150>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd f98a 	bl	800016c <__adddf3>
 8002e58:	4622      	mov	r2, r4
 8002e5a:	462b      	mov	r3, r5
 8002e5c:	f7fd fb3c 	bl	80004d8 <__aeabi_dmul>
 8002e60:	a335      	add	r3, pc, #212	@ (adr r3, 8002f38 <__kernel_cos+0x158>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd f97f 	bl	8000168 <__aeabi_dsub>
 8002e6a:	4622      	mov	r2, r4
 8002e6c:	462b      	mov	r3, r5
 8002e6e:	f7fd fb33 	bl	80004d8 <__aeabi_dmul>
 8002e72:	a333      	add	r3, pc, #204	@ (adr r3, 8002f40 <__kernel_cos+0x160>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd f978 	bl	800016c <__adddf3>
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	462b      	mov	r3, r5
 8002e80:	f7fd fb2a 	bl	80004d8 <__aeabi_dmul>
 8002e84:	4622      	mov	r2, r4
 8002e86:	462b      	mov	r3, r5
 8002e88:	f7fd fb26 	bl	80004d8 <__aeabi_dmul>
 8002e8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e90:	4604      	mov	r4, r0
 8002e92:	460d      	mov	r5, r1
 8002e94:	4640      	mov	r0, r8
 8002e96:	4649      	mov	r1, r9
 8002e98:	f7fd fb1e 	bl	80004d8 <__aeabi_dmul>
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7fd f960 	bl	8000168 <__aeabi_dsub>
 8002ea8:	4b28      	ldr	r3, [pc, #160]	@ (8002f4c <__kernel_cos+0x16c>)
 8002eaa:	4680      	mov	r8, r0
 8002eac:	429e      	cmp	r6, r3
 8002eae:	4689      	mov	r9, r1
 8002eb0:	d80e      	bhi.n	8002ed0 <__kernel_cos+0xf0>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4650      	mov	r0, sl
 8002eb8:	4659      	mov	r1, fp
 8002eba:	f7fd f955 	bl	8000168 <__aeabi_dsub>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4922      	ldr	r1, [pc, #136]	@ (8002f50 <__kernel_cos+0x170>)
 8002ec6:	f7fd f94f 	bl	8000168 <__aeabi_dsub>
 8002eca:	b003      	add	sp, #12
 8002ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed0:	2400      	movs	r4, #0
 8002ed2:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <__kernel_cos+0x174>)
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	429e      	cmp	r6, r3
 8002ed8:	bf8c      	ite	hi
 8002eda:	4d1f      	ldrhi	r5, [pc, #124]	@ (8002f58 <__kernel_cos+0x178>)
 8002edc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8002ee0:	462b      	mov	r3, r5
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	491a      	ldr	r1, [pc, #104]	@ (8002f50 <__kernel_cos+0x170>)
 8002ee6:	f7fd f93f 	bl	8000168 <__aeabi_dsub>
 8002eea:	4622      	mov	r2, r4
 8002eec:	4606      	mov	r6, r0
 8002eee:	460f      	mov	r7, r1
 8002ef0:	462b      	mov	r3, r5
 8002ef2:	4650      	mov	r0, sl
 8002ef4:	4659      	mov	r1, fp
 8002ef6:	f7fd f937 	bl	8000168 <__aeabi_dsub>
 8002efa:	4642      	mov	r2, r8
 8002efc:	464b      	mov	r3, r9
 8002efe:	f7fd f933 	bl	8000168 <__aeabi_dsub>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4630      	mov	r0, r6
 8002f08:	4639      	mov	r1, r7
 8002f0a:	e7dc      	b.n	8002ec6 <__kernel_cos+0xe6>
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	4910      	ldr	r1, [pc, #64]	@ (8002f50 <__kernel_cos+0x170>)
 8002f10:	e7db      	b.n	8002eca <__kernel_cos+0xea>
 8002f12:	bf00      	nop
 8002f14:	f3af 8000 	nop.w
 8002f18:	be8838d4 	.word	0xbe8838d4
 8002f1c:	bda8fae9 	.word	0xbda8fae9
 8002f20:	bdb4b1c4 	.word	0xbdb4b1c4
 8002f24:	3e21ee9e 	.word	0x3e21ee9e
 8002f28:	809c52ad 	.word	0x809c52ad
 8002f2c:	3e927e4f 	.word	0x3e927e4f
 8002f30:	19cb1590 	.word	0x19cb1590
 8002f34:	3efa01a0 	.word	0x3efa01a0
 8002f38:	16c15177 	.word	0x16c15177
 8002f3c:	3f56c16c 	.word	0x3f56c16c
 8002f40:	5555554c 	.word	0x5555554c
 8002f44:	3fa55555 	.word	0x3fa55555
 8002f48:	3fe00000 	.word	0x3fe00000
 8002f4c:	3fd33332 	.word	0x3fd33332
 8002f50:	3ff00000 	.word	0x3ff00000
 8002f54:	3fe90000 	.word	0x3fe90000
 8002f58:	3fd20000 	.word	0x3fd20000
 8002f5c:	00000000 	.word	0x00000000

08002f60 <__kernel_sin>:
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	461f      	mov	r7, r3
 8002f66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8002f6a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8002f6e:	4604      	mov	r4, r0
 8002f70:	460d      	mov	r5, r1
 8002f72:	4616      	mov	r6, r2
 8002f74:	b085      	sub	sp, #20
 8002f76:	d203      	bcs.n	8002f80 <__kernel_sin+0x20>
 8002f78:	f7fd fd5e 	bl	8000a38 <__aeabi_d2iz>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d051      	beq.n	8003024 <__kernel_sin+0xc4>
 8002f80:	4622      	mov	r2, r4
 8002f82:	462b      	mov	r3, r5
 8002f84:	4620      	mov	r0, r4
 8002f86:	4629      	mov	r1, r5
 8002f88:	f7fd faa6 	bl	80004d8 <__aeabi_dmul>
 8002f8c:	4682      	mov	sl, r0
 8002f8e:	468b      	mov	fp, r1
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd fa9e 	bl	80004d8 <__aeabi_dmul>
 8002f9c:	a33e      	add	r3, pc, #248	@ (adr r3, 8003098 <__kernel_sin+0x138>)
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	4680      	mov	r8, r0
 8002fa4:	4689      	mov	r9, r1
 8002fa6:	4650      	mov	r0, sl
 8002fa8:	4659      	mov	r1, fp
 8002faa:	f7fd fa95 	bl	80004d8 <__aeabi_dmul>
 8002fae:	a33c      	add	r3, pc, #240	@ (adr r3, 80030a0 <__kernel_sin+0x140>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd f8d8 	bl	8000168 <__aeabi_dsub>
 8002fb8:	4652      	mov	r2, sl
 8002fba:	465b      	mov	r3, fp
 8002fbc:	f7fd fa8c 	bl	80004d8 <__aeabi_dmul>
 8002fc0:	a339      	add	r3, pc, #228	@ (adr r3, 80030a8 <__kernel_sin+0x148>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd f8d1 	bl	800016c <__adddf3>
 8002fca:	4652      	mov	r2, sl
 8002fcc:	465b      	mov	r3, fp
 8002fce:	f7fd fa83 	bl	80004d8 <__aeabi_dmul>
 8002fd2:	a337      	add	r3, pc, #220	@ (adr r3, 80030b0 <__kernel_sin+0x150>)
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	f7fd f8c6 	bl	8000168 <__aeabi_dsub>
 8002fdc:	4652      	mov	r2, sl
 8002fde:	465b      	mov	r3, fp
 8002fe0:	f7fd fa7a 	bl	80004d8 <__aeabi_dmul>
 8002fe4:	a334      	add	r3, pc, #208	@ (adr r3, 80030b8 <__kernel_sin+0x158>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd f8bf 	bl	800016c <__adddf3>
 8002fee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ff0:	e9cd 0100 	strd	r0, r1, [sp]
 8002ff4:	b9db      	cbnz	r3, 800302e <__kernel_sin+0xce>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4650      	mov	r0, sl
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	f7fd fa6b 	bl	80004d8 <__aeabi_dmul>
 8003002:	a32f      	add	r3, pc, #188	@ (adr r3, 80030c0 <__kernel_sin+0x160>)
 8003004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003008:	f7fd f8ae 	bl	8000168 <__aeabi_dsub>
 800300c:	4642      	mov	r2, r8
 800300e:	464b      	mov	r3, r9
 8003010:	f7fd fa62 	bl	80004d8 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4620      	mov	r0, r4
 800301a:	4629      	mov	r1, r5
 800301c:	f7fd f8a6 	bl	800016c <__adddf3>
 8003020:	4604      	mov	r4, r0
 8003022:	460d      	mov	r5, r1
 8003024:	4620      	mov	r0, r4
 8003026:	4629      	mov	r1, r5
 8003028:	b005      	add	sp, #20
 800302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800302e:	2200      	movs	r2, #0
 8003030:	4630      	mov	r0, r6
 8003032:	4639      	mov	r1, r7
 8003034:	4b24      	ldr	r3, [pc, #144]	@ (80030c8 <__kernel_sin+0x168>)
 8003036:	f7fd fa4f 	bl	80004d8 <__aeabi_dmul>
 800303a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800303e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003042:	4640      	mov	r0, r8
 8003044:	4649      	mov	r1, r9
 8003046:	f7fd fa47 	bl	80004d8 <__aeabi_dmul>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003052:	f7fd f889 	bl	8000168 <__aeabi_dsub>
 8003056:	4652      	mov	r2, sl
 8003058:	465b      	mov	r3, fp
 800305a:	f7fd fa3d 	bl	80004d8 <__aeabi_dmul>
 800305e:	4632      	mov	r2, r6
 8003060:	463b      	mov	r3, r7
 8003062:	f7fd f881 	bl	8000168 <__aeabi_dsub>
 8003066:	a316      	add	r3, pc, #88	@ (adr r3, 80030c0 <__kernel_sin+0x160>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	4606      	mov	r6, r0
 800306e:	460f      	mov	r7, r1
 8003070:	4640      	mov	r0, r8
 8003072:	4649      	mov	r1, r9
 8003074:	f7fd fa30 	bl	80004d8 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4630      	mov	r0, r6
 800307e:	4639      	mov	r1, r7
 8003080:	f7fd f874 	bl	800016c <__adddf3>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd f86c 	bl	8000168 <__aeabi_dsub>
 8003090:	e7c6      	b.n	8003020 <__kernel_sin+0xc0>
 8003092:	bf00      	nop
 8003094:	f3af 8000 	nop.w
 8003098:	5acfd57c 	.word	0x5acfd57c
 800309c:	3de5d93a 	.word	0x3de5d93a
 80030a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80030a4:	3e5ae5e6 	.word	0x3e5ae5e6
 80030a8:	57b1fe7d 	.word	0x57b1fe7d
 80030ac:	3ec71de3 	.word	0x3ec71de3
 80030b0:	19c161d5 	.word	0x19c161d5
 80030b4:	3f2a01a0 	.word	0x3f2a01a0
 80030b8:	1110f8a6 	.word	0x1110f8a6
 80030bc:	3f811111 	.word	0x3f811111
 80030c0:	55555549 	.word	0x55555549
 80030c4:	3fc55555 	.word	0x3fc55555
 80030c8:	3fe00000 	.word	0x3fe00000
 80030cc:	00000000 	.word	0x00000000

080030d0 <__ieee754_rem_pio2>:
 80030d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d4:	4bc4      	ldr	r3, [pc, #784]	@ (80033e8 <__ieee754_rem_pio2+0x318>)
 80030d6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80030da:	b08d      	sub	sp, #52	@ 0x34
 80030dc:	4598      	cmp	r8, r3
 80030de:	4606      	mov	r6, r0
 80030e0:	460f      	mov	r7, r1
 80030e2:	4614      	mov	r4, r2
 80030e4:	9104      	str	r1, [sp, #16]
 80030e6:	d807      	bhi.n	80030f8 <__ieee754_rem_pio2+0x28>
 80030e8:	e9c2 6700 	strd	r6, r7, [r2]
 80030ec:	2300      	movs	r3, #0
 80030ee:	2200      	movs	r2, #0
 80030f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80030f4:	2500      	movs	r5, #0
 80030f6:	e026      	b.n	8003146 <__ieee754_rem_pio2+0x76>
 80030f8:	4bbc      	ldr	r3, [pc, #752]	@ (80033ec <__ieee754_rem_pio2+0x31c>)
 80030fa:	4598      	cmp	r8, r3
 80030fc:	d876      	bhi.n	80031ec <__ieee754_rem_pio2+0x11c>
 80030fe:	9b04      	ldr	r3, [sp, #16]
 8003100:	4dbb      	ldr	r5, [pc, #748]	@ (80033f0 <__ieee754_rem_pio2+0x320>)
 8003102:	2b00      	cmp	r3, #0
 8003104:	a3aa      	add	r3, pc, #680	@ (adr r3, 80033b0 <__ieee754_rem_pio2+0x2e0>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	dd38      	ble.n	800317e <__ieee754_rem_pio2+0xae>
 800310c:	f7fd f82c 	bl	8000168 <__aeabi_dsub>
 8003110:	45a8      	cmp	r8, r5
 8003112:	4606      	mov	r6, r0
 8003114:	460f      	mov	r7, r1
 8003116:	d01a      	beq.n	800314e <__ieee754_rem_pio2+0x7e>
 8003118:	a3a7      	add	r3, pc, #668	@ (adr r3, 80033b8 <__ieee754_rem_pio2+0x2e8>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd f823 	bl	8000168 <__aeabi_dsub>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4680      	mov	r8, r0
 8003128:	4689      	mov	r9, r1
 800312a:	4630      	mov	r0, r6
 800312c:	4639      	mov	r1, r7
 800312e:	f7fd f81b 	bl	8000168 <__aeabi_dsub>
 8003132:	a3a1      	add	r3, pc, #644	@ (adr r3, 80033b8 <__ieee754_rem_pio2+0x2e8>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd f816 	bl	8000168 <__aeabi_dsub>
 800313c:	2501      	movs	r5, #1
 800313e:	e9c4 8900 	strd	r8, r9, [r4]
 8003142:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003146:	4628      	mov	r0, r5
 8003148:	b00d      	add	sp, #52	@ 0x34
 800314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800314e:	a39c      	add	r3, pc, #624	@ (adr r3, 80033c0 <__ieee754_rem_pio2+0x2f0>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f7fd f808 	bl	8000168 <__aeabi_dsub>
 8003158:	a39b      	add	r3, pc, #620	@ (adr r3, 80033c8 <__ieee754_rem_pio2+0x2f8>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	4606      	mov	r6, r0
 8003160:	460f      	mov	r7, r1
 8003162:	f7fd f801 	bl	8000168 <__aeabi_dsub>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4680      	mov	r8, r0
 800316c:	4689      	mov	r9, r1
 800316e:	4630      	mov	r0, r6
 8003170:	4639      	mov	r1, r7
 8003172:	f7fc fff9 	bl	8000168 <__aeabi_dsub>
 8003176:	a394      	add	r3, pc, #592	@ (adr r3, 80033c8 <__ieee754_rem_pio2+0x2f8>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	e7dc      	b.n	8003138 <__ieee754_rem_pio2+0x68>
 800317e:	f7fc fff5 	bl	800016c <__adddf3>
 8003182:	45a8      	cmp	r8, r5
 8003184:	4606      	mov	r6, r0
 8003186:	460f      	mov	r7, r1
 8003188:	d018      	beq.n	80031bc <__ieee754_rem_pio2+0xec>
 800318a:	a38b      	add	r3, pc, #556	@ (adr r3, 80033b8 <__ieee754_rem_pio2+0x2e8>)
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f7fc ffec 	bl	800016c <__adddf3>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4680      	mov	r8, r0
 800319a:	4689      	mov	r9, r1
 800319c:	4630      	mov	r0, r6
 800319e:	4639      	mov	r1, r7
 80031a0:	f7fc ffe2 	bl	8000168 <__aeabi_dsub>
 80031a4:	a384      	add	r3, pc, #528	@ (adr r3, 80033b8 <__ieee754_rem_pio2+0x2e8>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f7fc ffdf 	bl	800016c <__adddf3>
 80031ae:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80031b2:	e9c4 8900 	strd	r8, r9, [r4]
 80031b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80031ba:	e7c4      	b.n	8003146 <__ieee754_rem_pio2+0x76>
 80031bc:	a380      	add	r3, pc, #512	@ (adr r3, 80033c0 <__ieee754_rem_pio2+0x2f0>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	f7fc ffd3 	bl	800016c <__adddf3>
 80031c6:	a380      	add	r3, pc, #512	@ (adr r3, 80033c8 <__ieee754_rem_pio2+0x2f8>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	4606      	mov	r6, r0
 80031ce:	460f      	mov	r7, r1
 80031d0:	f7fc ffcc 	bl	800016c <__adddf3>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4680      	mov	r8, r0
 80031da:	4689      	mov	r9, r1
 80031dc:	4630      	mov	r0, r6
 80031de:	4639      	mov	r1, r7
 80031e0:	f7fc ffc2 	bl	8000168 <__aeabi_dsub>
 80031e4:	a378      	add	r3, pc, #480	@ (adr r3, 80033c8 <__ieee754_rem_pio2+0x2f8>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	e7de      	b.n	80031aa <__ieee754_rem_pio2+0xda>
 80031ec:	4b81      	ldr	r3, [pc, #516]	@ (80033f4 <__ieee754_rem_pio2+0x324>)
 80031ee:	4598      	cmp	r8, r3
 80031f0:	f200 80cf 	bhi.w	8003392 <__ieee754_rem_pio2+0x2c2>
 80031f4:	f000 f962 	bl	80034bc <fabs>
 80031f8:	a375      	add	r3, pc, #468	@ (adr r3, 80033d0 <__ieee754_rem_pio2+0x300>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	4606      	mov	r6, r0
 8003200:	460f      	mov	r7, r1
 8003202:	f7fd f969 	bl	80004d8 <__aeabi_dmul>
 8003206:	2200      	movs	r2, #0
 8003208:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <__ieee754_rem_pio2+0x328>)
 800320a:	f7fc ffaf 	bl	800016c <__adddf3>
 800320e:	f7fd fc13 	bl	8000a38 <__aeabi_d2iz>
 8003212:	4605      	mov	r5, r0
 8003214:	f7fd f8f6 	bl	8000404 <__aeabi_i2d>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003220:	a363      	add	r3, pc, #396	@ (adr r3, 80033b0 <__ieee754_rem_pio2+0x2e0>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd f957 	bl	80004d8 <__aeabi_dmul>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4630      	mov	r0, r6
 8003230:	4639      	mov	r1, r7
 8003232:	f7fc ff99 	bl	8000168 <__aeabi_dsub>
 8003236:	a360      	add	r3, pc, #384	@ (adr r3, 80033b8 <__ieee754_rem_pio2+0x2e8>)
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	4682      	mov	sl, r0
 800323e:	468b      	mov	fp, r1
 8003240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003244:	f7fd f948 	bl	80004d8 <__aeabi_dmul>
 8003248:	2d1f      	cmp	r5, #31
 800324a:	4606      	mov	r6, r0
 800324c:	460f      	mov	r7, r1
 800324e:	dc0c      	bgt.n	800326a <__ieee754_rem_pio2+0x19a>
 8003250:	4b6a      	ldr	r3, [pc, #424]	@ (80033fc <__ieee754_rem_pio2+0x32c>)
 8003252:	1e6a      	subs	r2, r5, #1
 8003254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003258:	4543      	cmp	r3, r8
 800325a:	d006      	beq.n	800326a <__ieee754_rem_pio2+0x19a>
 800325c:	4632      	mov	r2, r6
 800325e:	463b      	mov	r3, r7
 8003260:	4650      	mov	r0, sl
 8003262:	4659      	mov	r1, fp
 8003264:	f7fc ff80 	bl	8000168 <__aeabi_dsub>
 8003268:	e00e      	b.n	8003288 <__ieee754_rem_pio2+0x1b8>
 800326a:	463b      	mov	r3, r7
 800326c:	4632      	mov	r2, r6
 800326e:	4650      	mov	r0, sl
 8003270:	4659      	mov	r1, fp
 8003272:	f7fc ff79 	bl	8000168 <__aeabi_dsub>
 8003276:	ea4f 5328 	mov.w	r3, r8, asr #20
 800327a:	9305      	str	r3, [sp, #20]
 800327c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003280:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003284:	2b10      	cmp	r3, #16
 8003286:	dc02      	bgt.n	800328e <__ieee754_rem_pio2+0x1be>
 8003288:	e9c4 0100 	strd	r0, r1, [r4]
 800328c:	e039      	b.n	8003302 <__ieee754_rem_pio2+0x232>
 800328e:	a34c      	add	r3, pc, #304	@ (adr r3, 80033c0 <__ieee754_rem_pio2+0x2f0>)
 8003290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003298:	f7fd f91e 	bl	80004d8 <__aeabi_dmul>
 800329c:	4606      	mov	r6, r0
 800329e:	460f      	mov	r7, r1
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4650      	mov	r0, sl
 80032a6:	4659      	mov	r1, fp
 80032a8:	f7fc ff5e 	bl	8000168 <__aeabi_dsub>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4680      	mov	r8, r0
 80032b2:	4689      	mov	r9, r1
 80032b4:	4650      	mov	r0, sl
 80032b6:	4659      	mov	r1, fp
 80032b8:	f7fc ff56 	bl	8000168 <__aeabi_dsub>
 80032bc:	4632      	mov	r2, r6
 80032be:	463b      	mov	r3, r7
 80032c0:	f7fc ff52 	bl	8000168 <__aeabi_dsub>
 80032c4:	a340      	add	r3, pc, #256	@ (adr r3, 80033c8 <__ieee754_rem_pio2+0x2f8>)
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	4606      	mov	r6, r0
 80032cc:	460f      	mov	r7, r1
 80032ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032d2:	f7fd f901 	bl	80004d8 <__aeabi_dmul>
 80032d6:	4632      	mov	r2, r6
 80032d8:	463b      	mov	r3, r7
 80032da:	f7fc ff45 	bl	8000168 <__aeabi_dsub>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4606      	mov	r6, r0
 80032e4:	460f      	mov	r7, r1
 80032e6:	4640      	mov	r0, r8
 80032e8:	4649      	mov	r1, r9
 80032ea:	f7fc ff3d 	bl	8000168 <__aeabi_dsub>
 80032ee:	9a05      	ldr	r2, [sp, #20]
 80032f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b31      	cmp	r3, #49	@ 0x31
 80032f8:	dc20      	bgt.n	800333c <__ieee754_rem_pio2+0x26c>
 80032fa:	46c2      	mov	sl, r8
 80032fc:	46cb      	mov	fp, r9
 80032fe:	e9c4 0100 	strd	r0, r1, [r4]
 8003302:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003306:	4650      	mov	r0, sl
 8003308:	4642      	mov	r2, r8
 800330a:	464b      	mov	r3, r9
 800330c:	4659      	mov	r1, fp
 800330e:	f7fc ff2b 	bl	8000168 <__aeabi_dsub>
 8003312:	463b      	mov	r3, r7
 8003314:	4632      	mov	r2, r6
 8003316:	f7fc ff27 	bl	8000168 <__aeabi_dsub>
 800331a:	9b04      	ldr	r3, [sp, #16]
 800331c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f6bf af10 	bge.w	8003146 <__ieee754_rem_pio2+0x76>
 8003326:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800332a:	6063      	str	r3, [r4, #4]
 800332c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003330:	f8c4 8000 	str.w	r8, [r4]
 8003334:	60a0      	str	r0, [r4, #8]
 8003336:	60e3      	str	r3, [r4, #12]
 8003338:	426d      	negs	r5, r5
 800333a:	e704      	b.n	8003146 <__ieee754_rem_pio2+0x76>
 800333c:	a326      	add	r3, pc, #152	@ (adr r3, 80033d8 <__ieee754_rem_pio2+0x308>)
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003346:	f7fd f8c7 	bl	80004d8 <__aeabi_dmul>
 800334a:	4606      	mov	r6, r0
 800334c:	460f      	mov	r7, r1
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4640      	mov	r0, r8
 8003354:	4649      	mov	r1, r9
 8003356:	f7fc ff07 	bl	8000168 <__aeabi_dsub>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4682      	mov	sl, r0
 8003360:	468b      	mov	fp, r1
 8003362:	4640      	mov	r0, r8
 8003364:	4649      	mov	r1, r9
 8003366:	f7fc feff 	bl	8000168 <__aeabi_dsub>
 800336a:	4632      	mov	r2, r6
 800336c:	463b      	mov	r3, r7
 800336e:	f7fc fefb 	bl	8000168 <__aeabi_dsub>
 8003372:	a31b      	add	r3, pc, #108	@ (adr r3, 80033e0 <__ieee754_rem_pio2+0x310>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	4606      	mov	r6, r0
 800337a:	460f      	mov	r7, r1
 800337c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003380:	f7fd f8aa 	bl	80004d8 <__aeabi_dmul>
 8003384:	4632      	mov	r2, r6
 8003386:	463b      	mov	r3, r7
 8003388:	f7fc feee 	bl	8000168 <__aeabi_dsub>
 800338c:	4606      	mov	r6, r0
 800338e:	460f      	mov	r7, r1
 8003390:	e764      	b.n	800325c <__ieee754_rem_pio2+0x18c>
 8003392:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <__ieee754_rem_pio2+0x330>)
 8003394:	4598      	cmp	r8, r3
 8003396:	d935      	bls.n	8003404 <__ieee754_rem_pio2+0x334>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	f7fc fee4 	bl	8000168 <__aeabi_dsub>
 80033a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80033a4:	e9c4 0100 	strd	r0, r1, [r4]
 80033a8:	e6a4      	b.n	80030f4 <__ieee754_rem_pio2+0x24>
 80033aa:	bf00      	nop
 80033ac:	f3af 8000 	nop.w
 80033b0:	54400000 	.word	0x54400000
 80033b4:	3ff921fb 	.word	0x3ff921fb
 80033b8:	1a626331 	.word	0x1a626331
 80033bc:	3dd0b461 	.word	0x3dd0b461
 80033c0:	1a600000 	.word	0x1a600000
 80033c4:	3dd0b461 	.word	0x3dd0b461
 80033c8:	2e037073 	.word	0x2e037073
 80033cc:	3ba3198a 	.word	0x3ba3198a
 80033d0:	6dc9c883 	.word	0x6dc9c883
 80033d4:	3fe45f30 	.word	0x3fe45f30
 80033d8:	2e000000 	.word	0x2e000000
 80033dc:	3ba3198a 	.word	0x3ba3198a
 80033e0:	252049c1 	.word	0x252049c1
 80033e4:	397b839a 	.word	0x397b839a
 80033e8:	3fe921fb 	.word	0x3fe921fb
 80033ec:	4002d97b 	.word	0x4002d97b
 80033f0:	3ff921fb 	.word	0x3ff921fb
 80033f4:	413921fb 	.word	0x413921fb
 80033f8:	3fe00000 	.word	0x3fe00000
 80033fc:	080084a0 	.word	0x080084a0
 8003400:	7fefffff 	.word	0x7fefffff
 8003404:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003408:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800340c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003410:	460f      	mov	r7, r1
 8003412:	f7fd fb11 	bl	8000a38 <__aeabi_d2iz>
 8003416:	f7fc fff5 	bl	8000404 <__aeabi_i2d>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4630      	mov	r0, r6
 8003420:	4639      	mov	r1, r7
 8003422:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003426:	f7fc fe9f 	bl	8000168 <__aeabi_dsub>
 800342a:	2200      	movs	r2, #0
 800342c:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <__ieee754_rem_pio2+0x3e4>)
 800342e:	f7fd f853 	bl	80004d8 <__aeabi_dmul>
 8003432:	460f      	mov	r7, r1
 8003434:	4606      	mov	r6, r0
 8003436:	f7fd faff 	bl	8000a38 <__aeabi_d2iz>
 800343a:	f7fc ffe3 	bl	8000404 <__aeabi_i2d>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4630      	mov	r0, r6
 8003444:	4639      	mov	r1, r7
 8003446:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800344a:	f7fc fe8d 	bl	8000168 <__aeabi_dsub>
 800344e:	2200      	movs	r2, #0
 8003450:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <__ieee754_rem_pio2+0x3e4>)
 8003452:	f7fd f841 	bl	80004d8 <__aeabi_dmul>
 8003456:	f04f 0803 	mov.w	r8, #3
 800345a:	2600      	movs	r6, #0
 800345c:	2700      	movs	r7, #0
 800345e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003462:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003466:	4632      	mov	r2, r6
 8003468:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800346c:	463b      	mov	r3, r7
 800346e:	46c2      	mov	sl, r8
 8003470:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003474:	f7fd fa98 	bl	80009a8 <__aeabi_dcmpeq>
 8003478:	2800      	cmp	r0, #0
 800347a:	d1f4      	bne.n	8003466 <__ieee754_rem_pio2+0x396>
 800347c:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <__ieee754_rem_pio2+0x3e8>)
 800347e:	462a      	mov	r2, r5
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2302      	movs	r3, #2
 8003484:	4621      	mov	r1, r4
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	a806      	add	r0, sp, #24
 800348a:	4653      	mov	r3, sl
 800348c:	f000 f81a 	bl	80034c4 <__kernel_rem_pio2>
 8003490:	9b04      	ldr	r3, [sp, #16]
 8003492:	4605      	mov	r5, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	f6bf ae56 	bge.w	8003146 <__ieee754_rem_pio2+0x76>
 800349a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800349e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80034a2:	e9c4 2300 	strd	r2, r3, [r4]
 80034a6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80034aa:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80034ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80034b2:	e741      	b.n	8003338 <__ieee754_rem_pio2+0x268>
 80034b4:	41700000 	.word	0x41700000
 80034b8:	08008520 	.word	0x08008520

080034bc <fabs>:
 80034bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80034c0:	4619      	mov	r1, r3
 80034c2:	4770      	bx	lr

080034c4 <__kernel_rem_pio2>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80034cc:	9308      	str	r3, [sp, #32]
 80034ce:	9104      	str	r1, [sp, #16]
 80034d0:	4bb6      	ldr	r3, [pc, #728]	@ (80037ac <__kernel_rem_pio2+0x2e8>)
 80034d2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80034d4:	f112 0f14 	cmn.w	r2, #20
 80034d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80034dc:	bfa8      	it	ge
 80034de:	1ed4      	subge	r4, r2, #3
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	9b08      	ldr	r3, [sp, #32]
 80034e4:	bfb8      	it	lt
 80034e6:	2400      	movlt	r4, #0
 80034e8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80034ec:	9306      	str	r3, [sp, #24]
 80034ee:	bfa4      	itt	ge
 80034f0:	2318      	movge	r3, #24
 80034f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80034f6:	f06f 0317 	mvn.w	r3, #23
 80034fa:	fb04 3303 	mla	r3, r4, r3, r3
 80034fe:	eb03 0a02 	add.w	sl, r3, r2
 8003502:	9a06      	ldr	r2, [sp, #24]
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	1aa7      	subs	r7, r4, r2
 8003508:	eb03 0802 	add.w	r8, r3, r2
 800350c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800350e:	2500      	movs	r5, #0
 8003510:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003514:	2200      	movs	r2, #0
 8003516:	2300      	movs	r3, #0
 8003518:	9009      	str	r0, [sp, #36]	@ 0x24
 800351a:	ae20      	add	r6, sp, #128	@ 0x80
 800351c:	4545      	cmp	r5, r8
 800351e:	dd14      	ble.n	800354a <__kernel_rem_pio2+0x86>
 8003520:	f04f 0800 	mov.w	r8, #0
 8003524:	9a08      	ldr	r2, [sp, #32]
 8003526:	ab20      	add	r3, sp, #128	@ 0x80
 8003528:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800352c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8003530:	9b02      	ldr	r3, [sp, #8]
 8003532:	4598      	cmp	r8, r3
 8003534:	dc35      	bgt.n	80035a2 <__kernel_rem_pio2+0xde>
 8003536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003538:	2200      	movs	r2, #0
 800353a:	f1a3 0908 	sub.w	r9, r3, #8
 800353e:	2300      	movs	r3, #0
 8003540:	462f      	mov	r7, r5
 8003542:	2600      	movs	r6, #0
 8003544:	e9cd 2300 	strd	r2, r3, [sp]
 8003548:	e01f      	b.n	800358a <__kernel_rem_pio2+0xc6>
 800354a:	42ef      	cmn	r7, r5
 800354c:	d40b      	bmi.n	8003566 <__kernel_rem_pio2+0xa2>
 800354e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003552:	e9cd 2300 	strd	r2, r3, [sp]
 8003556:	f7fc ff55 	bl	8000404 <__aeabi_i2d>
 800355a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800355e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003562:	3501      	adds	r5, #1
 8003564:	e7da      	b.n	800351c <__kernel_rem_pio2+0x58>
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	e7f8      	b.n	800355e <__kernel_rem_pio2+0x9a>
 800356c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003570:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003574:	f7fc ffb0 	bl	80004d8 <__aeabi_dmul>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003580:	f7fc fdf4 	bl	800016c <__adddf3>
 8003584:	e9cd 0100 	strd	r0, r1, [sp]
 8003588:	3601      	adds	r6, #1
 800358a:	9b06      	ldr	r3, [sp, #24]
 800358c:	3f08      	subs	r7, #8
 800358e:	429e      	cmp	r6, r3
 8003590:	ddec      	ble.n	800356c <__kernel_rem_pio2+0xa8>
 8003592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003596:	f108 0801 	add.w	r8, r8, #1
 800359a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800359e:	3508      	adds	r5, #8
 80035a0:	e7c6      	b.n	8003530 <__kernel_rem_pio2+0x6c>
 80035a2:	9b02      	ldr	r3, [sp, #8]
 80035a4:	aa0c      	add	r2, sp, #48	@ 0x30
 80035a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80035aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80035ac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80035ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 80035b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80035b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80035b8:	ab98      	add	r3, sp, #608	@ 0x260
 80035ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80035be:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80035c2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80035c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80035c8:	ae0c      	add	r6, sp, #48	@ 0x30
 80035ca:	4698      	mov	r8, r3
 80035cc:	46b1      	mov	r9, r6
 80035ce:	465f      	mov	r7, fp
 80035d0:	9307      	str	r3, [sp, #28]
 80035d2:	2f00      	cmp	r7, #0
 80035d4:	f1a8 0808 	sub.w	r8, r8, #8
 80035d8:	dc71      	bgt.n	80036be <__kernel_rem_pio2+0x1fa>
 80035da:	4652      	mov	r2, sl
 80035dc:	4620      	mov	r0, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	f000 fa96 	bl	8003b10 <scalbn>
 80035e4:	2200      	movs	r2, #0
 80035e6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80035ea:	4604      	mov	r4, r0
 80035ec:	460d      	mov	r5, r1
 80035ee:	f7fc ff73 	bl	80004d8 <__aeabi_dmul>
 80035f2:	f000 fb05 	bl	8003c00 <floor>
 80035f6:	2200      	movs	r2, #0
 80035f8:	4b6d      	ldr	r3, [pc, #436]	@ (80037b0 <__kernel_rem_pio2+0x2ec>)
 80035fa:	f7fc ff6d 	bl	80004d8 <__aeabi_dmul>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4620      	mov	r0, r4
 8003604:	4629      	mov	r1, r5
 8003606:	f7fc fdaf 	bl	8000168 <__aeabi_dsub>
 800360a:	460d      	mov	r5, r1
 800360c:	4604      	mov	r4, r0
 800360e:	f7fd fa13 	bl	8000a38 <__aeabi_d2iz>
 8003612:	9005      	str	r0, [sp, #20]
 8003614:	f7fc fef6 	bl	8000404 <__aeabi_i2d>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fda2 	bl	8000168 <__aeabi_dsub>
 8003624:	f1ba 0f00 	cmp.w	sl, #0
 8003628:	4680      	mov	r8, r0
 800362a:	4689      	mov	r9, r1
 800362c:	dd6d      	ble.n	800370a <__kernel_rem_pio2+0x246>
 800362e:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 8003632:	ab0c      	add	r3, sp, #48	@ 0x30
 8003634:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003638:	9c05      	ldr	r4, [sp, #20]
 800363a:	f1ca 0018 	rsb	r0, sl, #24
 800363e:	fa43 f200 	asr.w	r2, r3, r0
 8003642:	4414      	add	r4, r2
 8003644:	4082      	lsls	r2, r0
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	aa0c      	add	r2, sp, #48	@ 0x30
 800364a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800364e:	f1ca 0217 	rsb	r2, sl, #23
 8003652:	9405      	str	r4, [sp, #20]
 8003654:	4113      	asrs	r3, r2
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	9b00      	ldr	r3, [sp, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	dd64      	ble.n	8003728 <__kernel_rem_pio2+0x264>
 800365e:	2200      	movs	r2, #0
 8003660:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003664:	4614      	mov	r4, r2
 8003666:	9b05      	ldr	r3, [sp, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	9305      	str	r3, [sp, #20]
 800366c:	4593      	cmp	fp, r2
 800366e:	f300 80ab 	bgt.w	80037c8 <__kernel_rem_pio2+0x304>
 8003672:	f1ba 0f00 	cmp.w	sl, #0
 8003676:	dd07      	ble.n	8003688 <__kernel_rem_pio2+0x1c4>
 8003678:	f1ba 0f01 	cmp.w	sl, #1
 800367c:	f000 80b2 	beq.w	80037e4 <__kernel_rem_pio2+0x320>
 8003680:	f1ba 0f02 	cmp.w	sl, #2
 8003684:	f000 80b9 	beq.w	80037fa <__kernel_rem_pio2+0x336>
 8003688:	9b00      	ldr	r3, [sp, #0]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d14c      	bne.n	8003728 <__kernel_rem_pio2+0x264>
 800368e:	4642      	mov	r2, r8
 8003690:	464b      	mov	r3, r9
 8003692:	2000      	movs	r0, #0
 8003694:	4947      	ldr	r1, [pc, #284]	@ (80037b4 <__kernel_rem_pio2+0x2f0>)
 8003696:	f7fc fd67 	bl	8000168 <__aeabi_dsub>
 800369a:	4680      	mov	r8, r0
 800369c:	4689      	mov	r9, r1
 800369e:	2c00      	cmp	r4, #0
 80036a0:	d042      	beq.n	8003728 <__kernel_rem_pio2+0x264>
 80036a2:	4652      	mov	r2, sl
 80036a4:	2000      	movs	r0, #0
 80036a6:	4943      	ldr	r1, [pc, #268]	@ (80037b4 <__kernel_rem_pio2+0x2f0>)
 80036a8:	f000 fa32 	bl	8003b10 <scalbn>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4640      	mov	r0, r8
 80036b2:	4649      	mov	r1, r9
 80036b4:	f7fc fd58 	bl	8000168 <__aeabi_dsub>
 80036b8:	4680      	mov	r8, r0
 80036ba:	4689      	mov	r9, r1
 80036bc:	e034      	b.n	8003728 <__kernel_rem_pio2+0x264>
 80036be:	2200      	movs	r2, #0
 80036c0:	4b3d      	ldr	r3, [pc, #244]	@ (80037b8 <__kernel_rem_pio2+0x2f4>)
 80036c2:	4620      	mov	r0, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	f7fc ff07 	bl	80004d8 <__aeabi_dmul>
 80036ca:	f7fd f9b5 	bl	8000a38 <__aeabi_d2iz>
 80036ce:	f7fc fe99 	bl	8000404 <__aeabi_i2d>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	e9cd 2300 	strd	r2, r3, [sp]
 80036da:	2200      	movs	r2, #0
 80036dc:	4b37      	ldr	r3, [pc, #220]	@ (80037bc <__kernel_rem_pio2+0x2f8>)
 80036de:	f7fc fefb 	bl	80004d8 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f7fc fd3d 	bl	8000168 <__aeabi_dsub>
 80036ee:	f7fd f9a3 	bl	8000a38 <__aeabi_d2iz>
 80036f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80036f6:	f849 0b04 	str.w	r0, [r9], #4
 80036fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036fe:	f7fc fd35 	bl	800016c <__adddf3>
 8003702:	3f01      	subs	r7, #1
 8003704:	4604      	mov	r4, r0
 8003706:	460d      	mov	r5, r1
 8003708:	e763      	b.n	80035d2 <__kernel_rem_pio2+0x10e>
 800370a:	d106      	bne.n	800371a <__kernel_rem_pio2+0x256>
 800370c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8003710:	aa0c      	add	r2, sp, #48	@ 0x30
 8003712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003716:	15db      	asrs	r3, r3, #23
 8003718:	e79d      	b.n	8003656 <__kernel_rem_pio2+0x192>
 800371a:	2200      	movs	r2, #0
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <__kernel_rem_pio2+0x2fc>)
 800371e:	f7fd f961 	bl	80009e4 <__aeabi_dcmpge>
 8003722:	2800      	cmp	r0, #0
 8003724:	d13f      	bne.n	80037a6 <__kernel_rem_pio2+0x2e2>
 8003726:	9000      	str	r0, [sp, #0]
 8003728:	2200      	movs	r2, #0
 800372a:	2300      	movs	r3, #0
 800372c:	4640      	mov	r0, r8
 800372e:	4649      	mov	r1, r9
 8003730:	f7fd f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8003734:	2800      	cmp	r0, #0
 8003736:	f000 80af 	beq.w	8003898 <__kernel_rem_pio2+0x3d4>
 800373a:	2200      	movs	r2, #0
 800373c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8003740:	9902      	ldr	r1, [sp, #8]
 8003742:	428b      	cmp	r3, r1
 8003744:	da61      	bge.n	800380a <__kernel_rem_pio2+0x346>
 8003746:	2a00      	cmp	r2, #0
 8003748:	d076      	beq.n	8003838 <__kernel_rem_pio2+0x374>
 800374a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800374e:	ab0c      	add	r3, sp, #48	@ 0x30
 8003750:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8003754:	f1aa 0a18 	sub.w	sl, sl, #24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f6      	beq.n	800374a <__kernel_rem_pio2+0x286>
 800375c:	4652      	mov	r2, sl
 800375e:	2000      	movs	r0, #0
 8003760:	4914      	ldr	r1, [pc, #80]	@ (80037b4 <__kernel_rem_pio2+0x2f0>)
 8003762:	f000 f9d5 	bl	8003b10 <scalbn>
 8003766:	465d      	mov	r5, fp
 8003768:	4606      	mov	r6, r0
 800376a:	460f      	mov	r7, r1
 800376c:	f04f 0900 	mov.w	r9, #0
 8003770:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003772:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80037b8 <__kernel_rem_pio2+0x2f4>
 8003776:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800377a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800377e:	2d00      	cmp	r5, #0
 8003780:	f280 80c0 	bge.w	8003904 <__kernel_rem_pio2+0x440>
 8003784:	465d      	mov	r5, fp
 8003786:	2d00      	cmp	r5, #0
 8003788:	f2c0 80f0 	blt.w	800396c <__kernel_rem_pio2+0x4a8>
 800378c:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <__kernel_rem_pio2+0x300>)
 800378e:	f04f 0900 	mov.w	r9, #0
 8003792:	9306      	str	r3, [sp, #24]
 8003794:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003796:	f04f 0a00 	mov.w	sl, #0
 800379a:	2700      	movs	r7, #0
 800379c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80037a0:	ebab 0605 	sub.w	r6, fp, r5
 80037a4:	e0d6      	b.n	8003954 <__kernel_rem_pio2+0x490>
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	e758      	b.n	800365e <__kernel_rem_pio2+0x19a>
 80037ac:	08008668 	.word	0x08008668
 80037b0:	40200000 	.word	0x40200000
 80037b4:	3ff00000 	.word	0x3ff00000
 80037b8:	3e700000 	.word	0x3e700000
 80037bc:	41700000 	.word	0x41700000
 80037c0:	3fe00000 	.word	0x3fe00000
 80037c4:	08008628 	.word	0x08008628
 80037c8:	f856 3b04 	ldr.w	r3, [r6], #4
 80037cc:	b944      	cbnz	r4, 80037e0 <__kernel_rem_pio2+0x31c>
 80037ce:	b123      	cbz	r3, 80037da <__kernel_rem_pio2+0x316>
 80037d0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80037d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80037d8:	2301      	movs	r3, #1
 80037da:	461c      	mov	r4, r3
 80037dc:	3201      	adds	r2, #1
 80037de:	e745      	b.n	800366c <__kernel_rem_pio2+0x1a8>
 80037e0:	1acb      	subs	r3, r1, r3
 80037e2:	e7f7      	b.n	80037d4 <__kernel_rem_pio2+0x310>
 80037e4:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80037e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80037ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80037f2:	a90c      	add	r1, sp, #48	@ 0x30
 80037f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80037f8:	e746      	b.n	8003688 <__kernel_rem_pio2+0x1c4>
 80037fa:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80037fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8003800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003804:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003808:	e7f3      	b.n	80037f2 <__kernel_rem_pio2+0x32e>
 800380a:	a90c      	add	r1, sp, #48	@ 0x30
 800380c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003810:	3b01      	subs	r3, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	e794      	b.n	8003740 <__kernel_rem_pio2+0x27c>
 8003816:	3401      	adds	r4, #1
 8003818:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800381c:	2a00      	cmp	r2, #0
 800381e:	d0fa      	beq.n	8003816 <__kernel_rem_pio2+0x352>
 8003820:	9b08      	ldr	r3, [sp, #32]
 8003822:	aa20      	add	r2, sp, #128	@ 0x80
 8003824:	445b      	add	r3, fp
 8003826:	f10b 0801 	add.w	r8, fp, #1
 800382a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800382e:	445c      	add	r4, fp
 8003830:	4544      	cmp	r4, r8
 8003832:	da04      	bge.n	800383e <__kernel_rem_pio2+0x37a>
 8003834:	46a3      	mov	fp, r4
 8003836:	e6bf      	b.n	80035b8 <__kernel_rem_pio2+0xf4>
 8003838:	2401      	movs	r4, #1
 800383a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800383c:	e7ec      	b.n	8003818 <__kernel_rem_pio2+0x354>
 800383e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003840:	46ab      	mov	fp, r5
 8003842:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003846:	f7fc fddd 	bl	8000404 <__aeabi_i2d>
 800384a:	f04f 0900 	mov.w	r9, #0
 800384e:	2600      	movs	r6, #0
 8003850:	2700      	movs	r7, #0
 8003852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003854:	e9c5 0100 	strd	r0, r1, [r5]
 8003858:	3b08      	subs	r3, #8
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	9b06      	ldr	r3, [sp, #24]
 800385e:	4599      	cmp	r9, r3
 8003860:	dd07      	ble.n	8003872 <__kernel_rem_pio2+0x3ae>
 8003862:	9b07      	ldr	r3, [sp, #28]
 8003864:	f108 0801 	add.w	r8, r8, #1
 8003868:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800386c:	3508      	adds	r5, #8
 800386e:	9307      	str	r3, [sp, #28]
 8003870:	e7de      	b.n	8003830 <__kernel_rem_pio2+0x36c>
 8003872:	9900      	ldr	r1, [sp, #0]
 8003874:	f109 0901 	add.w	r9, r9, #1
 8003878:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800387c:	9100      	str	r1, [sp, #0]
 800387e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8003882:	f7fc fe29 	bl	80004d8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4630      	mov	r0, r6
 800388c:	4639      	mov	r1, r7
 800388e:	f7fc fc6d 	bl	800016c <__adddf3>
 8003892:	4606      	mov	r6, r0
 8003894:	460f      	mov	r7, r1
 8003896:	e7e1      	b.n	800385c <__kernel_rem_pio2+0x398>
 8003898:	f1ca 0200 	rsb	r2, sl, #0
 800389c:	4640      	mov	r0, r8
 800389e:	4649      	mov	r1, r9
 80038a0:	f000 f936 	bl	8003b10 <scalbn>
 80038a4:	2200      	movs	r2, #0
 80038a6:	4b97      	ldr	r3, [pc, #604]	@ (8003b04 <__kernel_rem_pio2+0x640>)
 80038a8:	4604      	mov	r4, r0
 80038aa:	460d      	mov	r5, r1
 80038ac:	f7fd f89a 	bl	80009e4 <__aeabi_dcmpge>
 80038b0:	b300      	cbz	r0, 80038f4 <__kernel_rem_pio2+0x430>
 80038b2:	2200      	movs	r2, #0
 80038b4:	4b94      	ldr	r3, [pc, #592]	@ (8003b08 <__kernel_rem_pio2+0x644>)
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7fc fe0d 	bl	80004d8 <__aeabi_dmul>
 80038be:	f7fd f8bb 	bl	8000a38 <__aeabi_d2iz>
 80038c2:	4606      	mov	r6, r0
 80038c4:	f7fc fd9e 	bl	8000404 <__aeabi_i2d>
 80038c8:	2200      	movs	r2, #0
 80038ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003b04 <__kernel_rem_pio2+0x640>)
 80038cc:	f7fc fe04 	bl	80004d8 <__aeabi_dmul>
 80038d0:	460b      	mov	r3, r1
 80038d2:	4602      	mov	r2, r0
 80038d4:	4629      	mov	r1, r5
 80038d6:	4620      	mov	r0, r4
 80038d8:	f7fc fc46 	bl	8000168 <__aeabi_dsub>
 80038dc:	f7fd f8ac 	bl	8000a38 <__aeabi_d2iz>
 80038e0:	ab0c      	add	r3, sp, #48	@ 0x30
 80038e2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80038e6:	f10b 0b01 	add.w	fp, fp, #1
 80038ea:	f10a 0a18 	add.w	sl, sl, #24
 80038ee:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80038f2:	e733      	b.n	800375c <__kernel_rem_pio2+0x298>
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7fd f89e 	bl	8000a38 <__aeabi_d2iz>
 80038fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80038fe:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8003902:	e72b      	b.n	800375c <__kernel_rem_pio2+0x298>
 8003904:	ab0c      	add	r3, sp, #48	@ 0x30
 8003906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800390a:	f7fc fd7b 	bl	8000404 <__aeabi_i2d>
 800390e:	4632      	mov	r2, r6
 8003910:	463b      	mov	r3, r7
 8003912:	f7fc fde1 	bl	80004d8 <__aeabi_dmul>
 8003916:	464a      	mov	r2, r9
 8003918:	e868 0102 	strd	r0, r1, [r8], #-8
 800391c:	4653      	mov	r3, sl
 800391e:	4630      	mov	r0, r6
 8003920:	4639      	mov	r1, r7
 8003922:	f7fc fdd9 	bl	80004d8 <__aeabi_dmul>
 8003926:	3d01      	subs	r5, #1
 8003928:	4606      	mov	r6, r0
 800392a:	460f      	mov	r7, r1
 800392c:	e727      	b.n	800377e <__kernel_rem_pio2+0x2ba>
 800392e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8003932:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8003936:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800393a:	f8cd c018 	str.w	ip, [sp, #24]
 800393e:	f7fc fdcb 	bl	80004d8 <__aeabi_dmul>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4648      	mov	r0, r9
 8003948:	4651      	mov	r1, sl
 800394a:	f7fc fc0f 	bl	800016c <__adddf3>
 800394e:	4681      	mov	r9, r0
 8003950:	468a      	mov	sl, r1
 8003952:	3701      	adds	r7, #1
 8003954:	9b02      	ldr	r3, [sp, #8]
 8003956:	429f      	cmp	r7, r3
 8003958:	dc01      	bgt.n	800395e <__kernel_rem_pio2+0x49a>
 800395a:	42be      	cmp	r6, r7
 800395c:	dae7      	bge.n	800392e <__kernel_rem_pio2+0x46a>
 800395e:	ab48      	add	r3, sp, #288	@ 0x120
 8003960:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003964:	e9c6 9a00 	strd	r9, sl, [r6]
 8003968:	3d01      	subs	r5, #1
 800396a:	e70c      	b.n	8003786 <__kernel_rem_pio2+0x2c2>
 800396c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800396e:	2b02      	cmp	r3, #2
 8003970:	dc09      	bgt.n	8003986 <__kernel_rem_pio2+0x4c2>
 8003972:	2b00      	cmp	r3, #0
 8003974:	dc2c      	bgt.n	80039d0 <__kernel_rem_pio2+0x50c>
 8003976:	d04e      	beq.n	8003a16 <__kernel_rem_pio2+0x552>
 8003978:	9b05      	ldr	r3, [sp, #20]
 800397a:	f003 0007 	and.w	r0, r3, #7
 800397e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8003982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003986:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8003988:	2b03      	cmp	r3, #3
 800398a:	d1f5      	bne.n	8003978 <__kernel_rem_pio2+0x4b4>
 800398c:	ab48      	add	r3, sp, #288	@ 0x120
 800398e:	441c      	add	r4, r3
 8003990:	4625      	mov	r5, r4
 8003992:	46da      	mov	sl, fp
 8003994:	f1ba 0f00 	cmp.w	sl, #0
 8003998:	dc63      	bgt.n	8003a62 <__kernel_rem_pio2+0x59e>
 800399a:	4625      	mov	r5, r4
 800399c:	46da      	mov	sl, fp
 800399e:	f1ba 0f01 	cmp.w	sl, #1
 80039a2:	dc7b      	bgt.n	8003a9c <__kernel_rem_pio2+0x5d8>
 80039a4:	2000      	movs	r0, #0
 80039a6:	2100      	movs	r1, #0
 80039a8:	f1bb 0f01 	cmp.w	fp, #1
 80039ac:	f300 8093 	bgt.w	8003ad6 <__kernel_rem_pio2+0x612>
 80039b0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80039b4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80039b8:	9b00      	ldr	r3, [sp, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8092 	bne.w	8003ae4 <__kernel_rem_pio2+0x620>
 80039c0:	9b04      	ldr	r3, [sp, #16]
 80039c2:	e9c3 7800 	strd	r7, r8, [r3]
 80039c6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80039ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80039ce:	e7d3      	b.n	8003978 <__kernel_rem_pio2+0x4b4>
 80039d0:	465d      	mov	r5, fp
 80039d2:	2000      	movs	r0, #0
 80039d4:	2100      	movs	r1, #0
 80039d6:	ab48      	add	r3, sp, #288	@ 0x120
 80039d8:	441c      	add	r4, r3
 80039da:	2d00      	cmp	r5, #0
 80039dc:	da32      	bge.n	8003a44 <__kernel_rem_pio2+0x580>
 80039de:	9b00      	ldr	r3, [sp, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d035      	beq.n	8003a50 <__kernel_rem_pio2+0x58c>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80039ea:	9c04      	ldr	r4, [sp, #16]
 80039ec:	2501      	movs	r5, #1
 80039ee:	e9c4 2300 	strd	r2, r3, [r4]
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80039fa:	f7fc fbb5 	bl	8000168 <__aeabi_dsub>
 80039fe:	ac48      	add	r4, sp, #288	@ 0x120
 8003a00:	45ab      	cmp	fp, r5
 8003a02:	da28      	bge.n	8003a56 <__kernel_rem_pio2+0x592>
 8003a04:	9b00      	ldr	r3, [sp, #0]
 8003a06:	b113      	cbz	r3, 8003a0e <__kernel_rem_pio2+0x54a>
 8003a08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	9b04      	ldr	r3, [sp, #16]
 8003a10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003a14:	e7b0      	b.n	8003978 <__kernel_rem_pio2+0x4b4>
 8003a16:	2000      	movs	r0, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	ab48      	add	r3, sp, #288	@ 0x120
 8003a1c:	441c      	add	r4, r3
 8003a1e:	f1bb 0f00 	cmp.w	fp, #0
 8003a22:	da08      	bge.n	8003a36 <__kernel_rem_pio2+0x572>
 8003a24:	9b00      	ldr	r3, [sp, #0]
 8003a26:	b113      	cbz	r3, 8003a2e <__kernel_rem_pio2+0x56a>
 8003a28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	9b04      	ldr	r3, [sp, #16]
 8003a30:	e9c3 0100 	strd	r0, r1, [r3]
 8003a34:	e7a0      	b.n	8003978 <__kernel_rem_pio2+0x4b4>
 8003a36:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003a3a:	f7fc fb97 	bl	800016c <__adddf3>
 8003a3e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8003a42:	e7ec      	b.n	8003a1e <__kernel_rem_pio2+0x55a>
 8003a44:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003a48:	f7fc fb90 	bl	800016c <__adddf3>
 8003a4c:	3d01      	subs	r5, #1
 8003a4e:	e7c4      	b.n	80039da <__kernel_rem_pio2+0x516>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	e7c9      	b.n	80039ea <__kernel_rem_pio2+0x526>
 8003a56:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8003a5a:	f7fc fb87 	bl	800016c <__adddf3>
 8003a5e:	3501      	adds	r5, #1
 8003a60:	e7ce      	b.n	8003a00 <__kernel_rem_pio2+0x53c>
 8003a62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003a66:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8003a6a:	4640      	mov	r0, r8
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a72:	f7fc fb7b 	bl	800016c <__adddf3>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4606      	mov	r6, r0
 8003a7c:	460f      	mov	r7, r1
 8003a7e:	4640      	mov	r0, r8
 8003a80:	4649      	mov	r1, r9
 8003a82:	f7fc fb71 	bl	8000168 <__aeabi_dsub>
 8003a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a8a:	f7fc fb6f 	bl	800016c <__adddf3>
 8003a8e:	e865 0102 	strd	r0, r1, [r5], #-8
 8003a92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003a96:	e9c5 6700 	strd	r6, r7, [r5]
 8003a9a:	e77b      	b.n	8003994 <__kernel_rem_pio2+0x4d0>
 8003a9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003aa0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aac:	f7fc fb5e 	bl	800016c <__adddf3>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	460f      	mov	r7, r1
 8003ab8:	4640      	mov	r0, r8
 8003aba:	4649      	mov	r1, r9
 8003abc:	f7fc fb54 	bl	8000168 <__aeabi_dsub>
 8003ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ac4:	f7fc fb52 	bl	800016c <__adddf3>
 8003ac8:	e865 0102 	strd	r0, r1, [r5], #-8
 8003acc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003ad0:	e9c5 6700 	strd	r6, r7, [r5]
 8003ad4:	e763      	b.n	800399e <__kernel_rem_pio2+0x4da>
 8003ad6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8003ada:	f7fc fb47 	bl	800016c <__adddf3>
 8003ade:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8003ae2:	e761      	b.n	80039a8 <__kernel_rem_pio2+0x4e4>
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	9a04      	ldr	r2, [sp, #16]
 8003ae8:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8003aec:	601f      	str	r7, [r3, #0]
 8003aee:	605c      	str	r4, [r3, #4]
 8003af0:	609d      	str	r5, [r3, #8]
 8003af2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003afc:	6110      	str	r0, [r2, #16]
 8003afe:	6153      	str	r3, [r2, #20]
 8003b00:	e73a      	b.n	8003978 <__kernel_rem_pio2+0x4b4>
 8003b02:	bf00      	nop
 8003b04:	41700000 	.word	0x41700000
 8003b08:	3e700000 	.word	0x3e700000
 8003b0c:	00000000 	.word	0x00000000

08003b10 <scalbn>:
 8003b10:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8003b14:	4616      	mov	r6, r2
 8003b16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b1a:	4683      	mov	fp, r0
 8003b1c:	468c      	mov	ip, r1
 8003b1e:	460b      	mov	r3, r1
 8003b20:	b982      	cbnz	r2, 8003b44 <scalbn+0x34>
 8003b22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003b26:	4303      	orrs	r3, r0
 8003b28:	d039      	beq.n	8003b9e <scalbn+0x8e>
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <scalbn+0xd8>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f7fc fcd3 	bl	80004d8 <__aeabi_dmul>
 8003b32:	4b2e      	ldr	r3, [pc, #184]	@ (8003bec <scalbn+0xdc>)
 8003b34:	4683      	mov	fp, r0
 8003b36:	429e      	cmp	r6, r3
 8003b38:	468c      	mov	ip, r1
 8003b3a:	da0d      	bge.n	8003b58 <scalbn+0x48>
 8003b3c:	a326      	add	r3, pc, #152	@ (adr r3, 8003bd8 <scalbn+0xc8>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	e01b      	b.n	8003b7c <scalbn+0x6c>
 8003b44:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8003b48:	42ba      	cmp	r2, r7
 8003b4a:	d109      	bne.n	8003b60 <scalbn+0x50>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	f7fc fb0d 	bl	800016c <__adddf3>
 8003b52:	4683      	mov	fp, r0
 8003b54:	468c      	mov	ip, r1
 8003b56:	e022      	b.n	8003b9e <scalbn+0x8e>
 8003b58:	460b      	mov	r3, r1
 8003b5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003b5e:	3a36      	subs	r2, #54	@ 0x36
 8003b60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003b64:	428e      	cmp	r6, r1
 8003b66:	dd0c      	ble.n	8003b82 <scalbn+0x72>
 8003b68:	a31d      	add	r3, pc, #116	@ (adr r3, 8003be0 <scalbn+0xd0>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	461c      	mov	r4, r3
 8003b70:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8003b74:	f361 74df 	bfi	r4, r1, #31, #1
 8003b78:	4621      	mov	r1, r4
 8003b7a:	481d      	ldr	r0, [pc, #116]	@ (8003bf0 <scalbn+0xe0>)
 8003b7c:	f7fc fcac 	bl	80004d8 <__aeabi_dmul>
 8003b80:	e7e7      	b.n	8003b52 <scalbn+0x42>
 8003b82:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8003b86:	4432      	add	r2, r6
 8003b88:	428a      	cmp	r2, r1
 8003b8a:	dced      	bgt.n	8003b68 <scalbn+0x58>
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	dd0a      	ble.n	8003ba6 <scalbn+0x96>
 8003b90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003b94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003b98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003b9c:	46ac      	mov	ip, r5
 8003b9e:	4658      	mov	r0, fp
 8003ba0:	4661      	mov	r1, ip
 8003ba2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8003ba6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8003baa:	da09      	bge.n	8003bc0 <scalbn+0xb0>
 8003bac:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8003bb0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8003bb4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8003bb8:	480e      	ldr	r0, [pc, #56]	@ (8003bf4 <scalbn+0xe4>)
 8003bba:	f041 011f 	orr.w	r1, r1, #31
 8003bbe:	e7bd      	b.n	8003b3c <scalbn+0x2c>
 8003bc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8003bc4:	3236      	adds	r2, #54	@ 0x36
 8003bc6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003bca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003bce:	4658      	mov	r0, fp
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <scalbn+0xe8>)
 8003bd6:	e7d1      	b.n	8003b7c <scalbn+0x6c>
 8003bd8:	c2f8f359 	.word	0xc2f8f359
 8003bdc:	01a56e1f 	.word	0x01a56e1f
 8003be0:	8800759c 	.word	0x8800759c
 8003be4:	7e37e43c 	.word	0x7e37e43c
 8003be8:	43500000 	.word	0x43500000
 8003bec:	ffff3cb0 	.word	0xffff3cb0
 8003bf0:	8800759c 	.word	0x8800759c
 8003bf4:	c2f8f359 	.word	0xc2f8f359
 8003bf8:	3c900000 	.word	0x3c900000
 8003bfc:	00000000 	.word	0x00000000

08003c00 <floor>:
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003c08:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8003c0c:	2e13      	cmp	r6, #19
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	460c      	mov	r4, r1
 8003c14:	4605      	mov	r5, r0
 8003c16:	4680      	mov	r8, r0
 8003c18:	dc35      	bgt.n	8003c86 <floor+0x86>
 8003c1a:	2e00      	cmp	r6, #0
 8003c1c:	da17      	bge.n	8003c4e <floor+0x4e>
 8003c1e:	a334      	add	r3, pc, #208	@ (adr r3, 8003cf0 <floor+0xf0>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc faa2 	bl	800016c <__adddf3>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f7fc fee4 	bl	80009f8 <__aeabi_dcmpgt>
 8003c30:	b150      	cbz	r0, 8003c48 <floor+0x48>
 8003c32:	2c00      	cmp	r4, #0
 8003c34:	da57      	bge.n	8003ce6 <floor+0xe6>
 8003c36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8003c3a:	432c      	orrs	r4, r5
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	42ac      	cmp	r4, r5
 8003c40:	4c2d      	ldr	r4, [pc, #180]	@ (8003cf8 <floor+0xf8>)
 8003c42:	bf08      	it	eq
 8003c44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8003c48:	4623      	mov	r3, r4
 8003c4a:	462a      	mov	r2, r5
 8003c4c:	e024      	b.n	8003c98 <floor+0x98>
 8003c4e:	4f2b      	ldr	r7, [pc, #172]	@ (8003cfc <floor+0xfc>)
 8003c50:	4137      	asrs	r7, r6
 8003c52:	ea01 0c07 	and.w	ip, r1, r7
 8003c56:	ea5c 0c00 	orrs.w	ip, ip, r0
 8003c5a:	d01d      	beq.n	8003c98 <floor+0x98>
 8003c5c:	a324      	add	r3, pc, #144	@ (adr r3, 8003cf0 <floor+0xf0>)
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f7fc fa83 	bl	800016c <__adddf3>
 8003c66:	2200      	movs	r2, #0
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f7fc fec5 	bl	80009f8 <__aeabi_dcmpgt>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d0ea      	beq.n	8003c48 <floor+0x48>
 8003c72:	2c00      	cmp	r4, #0
 8003c74:	bfbe      	ittt	lt
 8003c76:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8003c7a:	4133      	asrlt	r3, r6
 8003c7c:	18e4      	addlt	r4, r4, r3
 8003c7e:	2500      	movs	r5, #0
 8003c80:	ea24 0407 	bic.w	r4, r4, r7
 8003c84:	e7e0      	b.n	8003c48 <floor+0x48>
 8003c86:	2e33      	cmp	r6, #51	@ 0x33
 8003c88:	dd0a      	ble.n	8003ca0 <floor+0xa0>
 8003c8a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003c8e:	d103      	bne.n	8003c98 <floor+0x98>
 8003c90:	f7fc fa6c 	bl	800016c <__adddf3>
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8003ca4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8003ca8:	fa2c f707 	lsr.w	r7, ip, r7
 8003cac:	4207      	tst	r7, r0
 8003cae:	d0f3      	beq.n	8003c98 <floor+0x98>
 8003cb0:	a30f      	add	r3, pc, #60	@ (adr r3, 8003cf0 <floor+0xf0>)
 8003cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb6:	f7fc fa59 	bl	800016c <__adddf3>
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f7fc fe9b 	bl	80009f8 <__aeabi_dcmpgt>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d0c0      	beq.n	8003c48 <floor+0x48>
 8003cc6:	2c00      	cmp	r4, #0
 8003cc8:	da0a      	bge.n	8003ce0 <floor+0xe0>
 8003cca:	2e14      	cmp	r6, #20
 8003ccc:	d101      	bne.n	8003cd2 <floor+0xd2>
 8003cce:	3401      	adds	r4, #1
 8003cd0:	e006      	b.n	8003ce0 <floor+0xe0>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003cd8:	40b3      	lsls	r3, r6
 8003cda:	441d      	add	r5, r3
 8003cdc:	4545      	cmp	r5, r8
 8003cde:	d3f6      	bcc.n	8003cce <floor+0xce>
 8003ce0:	ea25 0507 	bic.w	r5, r5, r7
 8003ce4:	e7b0      	b.n	8003c48 <floor+0x48>
 8003ce6:	2500      	movs	r5, #0
 8003ce8:	462c      	mov	r4, r5
 8003cea:	e7ad      	b.n	8003c48 <floor+0x48>
 8003cec:	f3af 8000 	nop.w
 8003cf0:	8800759c 	.word	0x8800759c
 8003cf4:	7e37e43c 	.word	0x7e37e43c
 8003cf8:	bff00000 	.word	0xbff00000
 8003cfc:	000fffff 	.word	0x000fffff

08003d00 <__cvt>:
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d06:	461d      	mov	r5, r3
 8003d08:	bfbb      	ittet	lt
 8003d0a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003d0e:	461d      	movlt	r5, r3
 8003d10:	2300      	movge	r3, #0
 8003d12:	232d      	movlt	r3, #45	@ 0x2d
 8003d14:	b088      	sub	sp, #32
 8003d16:	4614      	mov	r4, r2
 8003d18:	bfb8      	it	lt
 8003d1a:	4614      	movlt	r4, r2
 8003d1c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003d1e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003d20:	7013      	strb	r3, [r2, #0]
 8003d22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d24:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003d28:	f023 0820 	bic.w	r8, r3, #32
 8003d2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d30:	d005      	beq.n	8003d3e <__cvt+0x3e>
 8003d32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003d36:	d100      	bne.n	8003d3a <__cvt+0x3a>
 8003d38:	3601      	adds	r6, #1
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e000      	b.n	8003d40 <__cvt+0x40>
 8003d3e:	2303      	movs	r3, #3
 8003d40:	aa07      	add	r2, sp, #28
 8003d42:	9204      	str	r2, [sp, #16]
 8003d44:	aa06      	add	r2, sp, #24
 8003d46:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003d4a:	e9cd 3600 	strd	r3, r6, [sp]
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	f001 f881 	bl	8004e58 <_dtoa_r>
 8003d56:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003d5a:	4607      	mov	r7, r0
 8003d5c:	d119      	bne.n	8003d92 <__cvt+0x92>
 8003d5e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003d60:	07db      	lsls	r3, r3, #31
 8003d62:	d50e      	bpl.n	8003d82 <__cvt+0x82>
 8003d64:	eb00 0906 	add.w	r9, r0, r6
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f7fc fe1a 	bl	80009a8 <__aeabi_dcmpeq>
 8003d74:	b108      	cbz	r0, 8003d7a <__cvt+0x7a>
 8003d76:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d7a:	2230      	movs	r2, #48	@ 0x30
 8003d7c:	9b07      	ldr	r3, [sp, #28]
 8003d7e:	454b      	cmp	r3, r9
 8003d80:	d31e      	bcc.n	8003dc0 <__cvt+0xc0>
 8003d82:	4638      	mov	r0, r7
 8003d84:	9b07      	ldr	r3, [sp, #28]
 8003d86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003d88:	1bdb      	subs	r3, r3, r7
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	b008      	add	sp, #32
 8003d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d92:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003d96:	eb00 0906 	add.w	r9, r0, r6
 8003d9a:	d1e5      	bne.n	8003d68 <__cvt+0x68>
 8003d9c:	7803      	ldrb	r3, [r0, #0]
 8003d9e:	2b30      	cmp	r3, #48	@ 0x30
 8003da0:	d10a      	bne.n	8003db8 <__cvt+0xb8>
 8003da2:	2200      	movs	r2, #0
 8003da4:	2300      	movs	r3, #0
 8003da6:	4620      	mov	r0, r4
 8003da8:	4629      	mov	r1, r5
 8003daa:	f7fc fdfd 	bl	80009a8 <__aeabi_dcmpeq>
 8003dae:	b918      	cbnz	r0, 8003db8 <__cvt+0xb8>
 8003db0:	f1c6 0601 	rsb	r6, r6, #1
 8003db4:	f8ca 6000 	str.w	r6, [sl]
 8003db8:	f8da 3000 	ldr.w	r3, [sl]
 8003dbc:	4499      	add	r9, r3
 8003dbe:	e7d3      	b.n	8003d68 <__cvt+0x68>
 8003dc0:	1c59      	adds	r1, r3, #1
 8003dc2:	9107      	str	r1, [sp, #28]
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e7d9      	b.n	8003d7c <__cvt+0x7c>

08003dc8 <__exponent>:
 8003dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	bfb6      	itet	lt
 8003dce:	232d      	movlt	r3, #45	@ 0x2d
 8003dd0:	232b      	movge	r3, #43	@ 0x2b
 8003dd2:	4249      	neglt	r1, r1
 8003dd4:	2909      	cmp	r1, #9
 8003dd6:	7002      	strb	r2, [r0, #0]
 8003dd8:	7043      	strb	r3, [r0, #1]
 8003dda:	dd29      	ble.n	8003e30 <__exponent+0x68>
 8003ddc:	f10d 0307 	add.w	r3, sp, #7
 8003de0:	461d      	mov	r5, r3
 8003de2:	270a      	movs	r7, #10
 8003de4:	fbb1 f6f7 	udiv	r6, r1, r7
 8003de8:	461a      	mov	r2, r3
 8003dea:	fb07 1416 	mls	r4, r7, r6, r1
 8003dee:	3430      	adds	r4, #48	@ 0x30
 8003df0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003df4:	460c      	mov	r4, r1
 8003df6:	2c63      	cmp	r4, #99	@ 0x63
 8003df8:	4631      	mov	r1, r6
 8003dfa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003dfe:	dcf1      	bgt.n	8003de4 <__exponent+0x1c>
 8003e00:	3130      	adds	r1, #48	@ 0x30
 8003e02:	1e94      	subs	r4, r2, #2
 8003e04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e08:	4623      	mov	r3, r4
 8003e0a:	1c41      	adds	r1, r0, #1
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	d30a      	bcc.n	8003e26 <__exponent+0x5e>
 8003e10:	f10d 0309 	add.w	r3, sp, #9
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	42ac      	cmp	r4, r5
 8003e18:	bf88      	it	hi
 8003e1a:	2300      	movhi	r3, #0
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	4403      	add	r3, r0
 8003e20:	1a18      	subs	r0, r3, r0
 8003e22:	b003      	add	sp, #12
 8003e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003e2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003e2e:	e7ed      	b.n	8003e0c <__exponent+0x44>
 8003e30:	2330      	movs	r3, #48	@ 0x30
 8003e32:	3130      	adds	r1, #48	@ 0x30
 8003e34:	7083      	strb	r3, [r0, #2]
 8003e36:	70c1      	strb	r1, [r0, #3]
 8003e38:	1d03      	adds	r3, r0, #4
 8003e3a:	e7f1      	b.n	8003e20 <__exponent+0x58>

08003e3c <_printf_float>:
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	b091      	sub	sp, #68	@ 0x44
 8003e42:	460c      	mov	r4, r1
 8003e44:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003e48:	4616      	mov	r6, r2
 8003e4a:	461f      	mov	r7, r3
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	f000 fef1 	bl	8004c34 <_localeconv_r>
 8003e52:	6803      	ldr	r3, [r0, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	9308      	str	r3, [sp, #32]
 8003e58:	f7fc f97a 	bl	8000150 <strlen>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e60:	f8d8 3000 	ldr.w	r3, [r8]
 8003e64:	9009      	str	r0, [sp, #36]	@ 0x24
 8003e66:	3307      	adds	r3, #7
 8003e68:	f023 0307 	bic.w	r3, r3, #7
 8003e6c:	f103 0208 	add.w	r2, r3, #8
 8003e70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003e74:	f8d4 b000 	ldr.w	fp, [r4]
 8003e78:	f8c8 2000 	str.w	r2, [r8]
 8003e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e86:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003e8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003e92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003e96:	4b9c      	ldr	r3, [pc, #624]	@ (8004108 <_printf_float+0x2cc>)
 8003e98:	f7fc fdb8 	bl	8000a0c <__aeabi_dcmpun>
 8003e9c:	bb70      	cbnz	r0, 8003efc <_printf_float+0xc0>
 8003e9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ea6:	4b98      	ldr	r3, [pc, #608]	@ (8004108 <_printf_float+0x2cc>)
 8003ea8:	f7fc fd92 	bl	80009d0 <__aeabi_dcmple>
 8003eac:	bb30      	cbnz	r0, 8003efc <_printf_float+0xc0>
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	f7fc fd81 	bl	80009bc <__aeabi_dcmplt>
 8003eba:	b110      	cbz	r0, 8003ec2 <_printf_float+0x86>
 8003ebc:	232d      	movs	r3, #45	@ 0x2d
 8003ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec2:	4a92      	ldr	r2, [pc, #584]	@ (800410c <_printf_float+0x2d0>)
 8003ec4:	4b92      	ldr	r3, [pc, #584]	@ (8004110 <_printf_float+0x2d4>)
 8003ec6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003eca:	bf94      	ite	ls
 8003ecc:	4690      	movls	r8, r2
 8003ece:	4698      	movhi	r8, r3
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	f04f 0900 	mov.w	r9, #0
 8003ed6:	6123      	str	r3, [r4, #16]
 8003ed8:	f02b 0304 	bic.w	r3, fp, #4
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	4633      	mov	r3, r6
 8003ee0:	4621      	mov	r1, r4
 8003ee2:	4628      	mov	r0, r5
 8003ee4:	9700      	str	r7, [sp, #0]
 8003ee6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003ee8:	f000 f9d4 	bl	8004294 <_printf_common>
 8003eec:	3001      	adds	r0, #1
 8003eee:	f040 8090 	bne.w	8004012 <_printf_float+0x1d6>
 8003ef2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ef6:	b011      	add	sp, #68	@ 0x44
 8003ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003efc:	4642      	mov	r2, r8
 8003efe:	464b      	mov	r3, r9
 8003f00:	4640      	mov	r0, r8
 8003f02:	4649      	mov	r1, r9
 8003f04:	f7fc fd82 	bl	8000a0c <__aeabi_dcmpun>
 8003f08:	b148      	cbz	r0, 8003f1e <_printf_float+0xe2>
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bfb8      	it	lt
 8003f10:	232d      	movlt	r3, #45	@ 0x2d
 8003f12:	4a80      	ldr	r2, [pc, #512]	@ (8004114 <_printf_float+0x2d8>)
 8003f14:	bfb8      	it	lt
 8003f16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8004118 <_printf_float+0x2dc>)
 8003f1c:	e7d3      	b.n	8003ec6 <_printf_float+0x8a>
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	d13f      	bne.n	8003fa8 <_printf_float+0x16c>
 8003f28:	2306      	movs	r3, #6
 8003f2a:	6063      	str	r3, [r4, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	9206      	str	r2, [sp, #24]
 8003f36:	aa0e      	add	r2, sp, #56	@ 0x38
 8003f38:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003f3c:	aa0d      	add	r2, sp, #52	@ 0x34
 8003f3e:	9203      	str	r2, [sp, #12]
 8003f40:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003f44:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	4642      	mov	r2, r8
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	4628      	mov	r0, r5
 8003f50:	464b      	mov	r3, r9
 8003f52:	910a      	str	r1, [sp, #40]	@ 0x28
 8003f54:	f7ff fed4 	bl	8003d00 <__cvt>
 8003f58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003f5a:	4680      	mov	r8, r0
 8003f5c:	2947      	cmp	r1, #71	@ 0x47
 8003f5e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003f60:	d128      	bne.n	8003fb4 <_printf_float+0x178>
 8003f62:	1cc8      	adds	r0, r1, #3
 8003f64:	db02      	blt.n	8003f6c <_printf_float+0x130>
 8003f66:	6863      	ldr	r3, [r4, #4]
 8003f68:	4299      	cmp	r1, r3
 8003f6a:	dd40      	ble.n	8003fee <_printf_float+0x1b2>
 8003f6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f70:	fa5f fa8a 	uxtb.w	sl, sl
 8003f74:	4652      	mov	r2, sl
 8003f76:	3901      	subs	r1, #1
 8003f78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003f7c:	910d      	str	r1, [sp, #52]	@ 0x34
 8003f7e:	f7ff ff23 	bl	8003dc8 <__exponent>
 8003f82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f84:	4681      	mov	r9, r0
 8003f86:	1813      	adds	r3, r2, r0
 8003f88:	2a01      	cmp	r2, #1
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	dc02      	bgt.n	8003f94 <_printf_float+0x158>
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	07d2      	lsls	r2, r2, #31
 8003f92:	d501      	bpl.n	8003f98 <_printf_float+0x15c>
 8003f94:	3301      	adds	r3, #1
 8003f96:	6123      	str	r3, [r4, #16]
 8003f98:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d09e      	beq.n	8003ede <_printf_float+0xa2>
 8003fa0:	232d      	movs	r3, #45	@ 0x2d
 8003fa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fa6:	e79a      	b.n	8003ede <_printf_float+0xa2>
 8003fa8:	2947      	cmp	r1, #71	@ 0x47
 8003faa:	d1bf      	bne.n	8003f2c <_printf_float+0xf0>
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1bd      	bne.n	8003f2c <_printf_float+0xf0>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e7ba      	b.n	8003f2a <_printf_float+0xee>
 8003fb4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003fb8:	d9dc      	bls.n	8003f74 <_printf_float+0x138>
 8003fba:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003fbe:	d118      	bne.n	8003ff2 <_printf_float+0x1b6>
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	6863      	ldr	r3, [r4, #4]
 8003fc4:	dd0b      	ble.n	8003fde <_printf_float+0x1a2>
 8003fc6:	6121      	str	r1, [r4, #16]
 8003fc8:	b913      	cbnz	r3, 8003fd0 <_printf_float+0x194>
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	07d0      	lsls	r0, r2, #31
 8003fce:	d502      	bpl.n	8003fd6 <_printf_float+0x19a>
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	440b      	add	r3, r1
 8003fd4:	6123      	str	r3, [r4, #16]
 8003fd6:	f04f 0900 	mov.w	r9, #0
 8003fda:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003fdc:	e7dc      	b.n	8003f98 <_printf_float+0x15c>
 8003fde:	b913      	cbnz	r3, 8003fe6 <_printf_float+0x1aa>
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	07d2      	lsls	r2, r2, #31
 8003fe4:	d501      	bpl.n	8003fea <_printf_float+0x1ae>
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	e7f4      	b.n	8003fd4 <_printf_float+0x198>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e7f2      	b.n	8003fd4 <_printf_float+0x198>
 8003fee:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	db05      	blt.n	8004004 <_printf_float+0x1c8>
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	6121      	str	r1, [r4, #16]
 8003ffc:	07d8      	lsls	r0, r3, #31
 8003ffe:	d5ea      	bpl.n	8003fd6 <_printf_float+0x19a>
 8004000:	1c4b      	adds	r3, r1, #1
 8004002:	e7e7      	b.n	8003fd4 <_printf_float+0x198>
 8004004:	2900      	cmp	r1, #0
 8004006:	bfcc      	ite	gt
 8004008:	2201      	movgt	r2, #1
 800400a:	f1c1 0202 	rsble	r2, r1, #2
 800400e:	4413      	add	r3, r2
 8004010:	e7e0      	b.n	8003fd4 <_printf_float+0x198>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	055a      	lsls	r2, r3, #21
 8004016:	d407      	bmi.n	8004028 <_printf_float+0x1ec>
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	4642      	mov	r2, r8
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	47b8      	blx	r7
 8004022:	3001      	adds	r0, #1
 8004024:	d12b      	bne.n	800407e <_printf_float+0x242>
 8004026:	e764      	b.n	8003ef2 <_printf_float+0xb6>
 8004028:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800402c:	f240 80dc 	bls.w	80041e8 <_printf_float+0x3ac>
 8004030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004034:	2200      	movs	r2, #0
 8004036:	2300      	movs	r3, #0
 8004038:	f7fc fcb6 	bl	80009a8 <__aeabi_dcmpeq>
 800403c:	2800      	cmp	r0, #0
 800403e:	d033      	beq.n	80040a8 <_printf_float+0x26c>
 8004040:	2301      	movs	r3, #1
 8004042:	4631      	mov	r1, r6
 8004044:	4628      	mov	r0, r5
 8004046:	4a35      	ldr	r2, [pc, #212]	@ (800411c <_printf_float+0x2e0>)
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	f43f af51 	beq.w	8003ef2 <_printf_float+0xb6>
 8004050:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004054:	4543      	cmp	r3, r8
 8004056:	db02      	blt.n	800405e <_printf_float+0x222>
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	07d8      	lsls	r0, r3, #31
 800405c:	d50f      	bpl.n	800407e <_printf_float+0x242>
 800405e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004062:	4631      	mov	r1, r6
 8004064:	4628      	mov	r0, r5
 8004066:	47b8      	blx	r7
 8004068:	3001      	adds	r0, #1
 800406a:	f43f af42 	beq.w	8003ef2 <_printf_float+0xb6>
 800406e:	f04f 0900 	mov.w	r9, #0
 8004072:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004076:	f104 0a1a 	add.w	sl, r4, #26
 800407a:	45c8      	cmp	r8, r9
 800407c:	dc09      	bgt.n	8004092 <_printf_float+0x256>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	f100 8102 	bmi.w	800428a <_printf_float+0x44e>
 8004086:	68e0      	ldr	r0, [r4, #12]
 8004088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800408a:	4298      	cmp	r0, r3
 800408c:	bfb8      	it	lt
 800408e:	4618      	movlt	r0, r3
 8004090:	e731      	b.n	8003ef6 <_printf_float+0xba>
 8004092:	2301      	movs	r3, #1
 8004094:	4652      	mov	r2, sl
 8004096:	4631      	mov	r1, r6
 8004098:	4628      	mov	r0, r5
 800409a:	47b8      	blx	r7
 800409c:	3001      	adds	r0, #1
 800409e:	f43f af28 	beq.w	8003ef2 <_printf_float+0xb6>
 80040a2:	f109 0901 	add.w	r9, r9, #1
 80040a6:	e7e8      	b.n	800407a <_printf_float+0x23e>
 80040a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	dc38      	bgt.n	8004120 <_printf_float+0x2e4>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	4a19      	ldr	r2, [pc, #100]	@ (800411c <_printf_float+0x2e0>)
 80040b6:	47b8      	blx	r7
 80040b8:	3001      	adds	r0, #1
 80040ba:	f43f af1a 	beq.w	8003ef2 <_printf_float+0xb6>
 80040be:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80040c2:	ea59 0303 	orrs.w	r3, r9, r3
 80040c6:	d102      	bne.n	80040ce <_printf_float+0x292>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	07d9      	lsls	r1, r3, #31
 80040cc:	d5d7      	bpl.n	800407e <_printf_float+0x242>
 80040ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f af0a 	beq.w	8003ef2 <_printf_float+0xb6>
 80040de:	f04f 0a00 	mov.w	sl, #0
 80040e2:	f104 0b1a 	add.w	fp, r4, #26
 80040e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80040e8:	425b      	negs	r3, r3
 80040ea:	4553      	cmp	r3, sl
 80040ec:	dc01      	bgt.n	80040f2 <_printf_float+0x2b6>
 80040ee:	464b      	mov	r3, r9
 80040f0:	e793      	b.n	800401a <_printf_float+0x1de>
 80040f2:	2301      	movs	r3, #1
 80040f4:	465a      	mov	r2, fp
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b8      	blx	r7
 80040fc:	3001      	adds	r0, #1
 80040fe:	f43f aef8 	beq.w	8003ef2 <_printf_float+0xb6>
 8004102:	f10a 0a01 	add.w	sl, sl, #1
 8004106:	e7ee      	b.n	80040e6 <_printf_float+0x2aa>
 8004108:	7fefffff 	.word	0x7fefffff
 800410c:	08008678 	.word	0x08008678
 8004110:	0800867c 	.word	0x0800867c
 8004114:	08008680 	.word	0x08008680
 8004118:	08008684 	.word	0x08008684
 800411c:	08008688 	.word	0x08008688
 8004120:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004122:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004126:	4553      	cmp	r3, sl
 8004128:	bfa8      	it	ge
 800412a:	4653      	movge	r3, sl
 800412c:	2b00      	cmp	r3, #0
 800412e:	4699      	mov	r9, r3
 8004130:	dc36      	bgt.n	80041a0 <_printf_float+0x364>
 8004132:	f04f 0b00 	mov.w	fp, #0
 8004136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800413a:	f104 021a 	add.w	r2, r4, #26
 800413e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004140:	930a      	str	r3, [sp, #40]	@ 0x28
 8004142:	eba3 0309 	sub.w	r3, r3, r9
 8004146:	455b      	cmp	r3, fp
 8004148:	dc31      	bgt.n	80041ae <_printf_float+0x372>
 800414a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800414c:	459a      	cmp	sl, r3
 800414e:	dc3a      	bgt.n	80041c6 <_printf_float+0x38a>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	07da      	lsls	r2, r3, #31
 8004154:	d437      	bmi.n	80041c6 <_printf_float+0x38a>
 8004156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004158:	ebaa 0903 	sub.w	r9, sl, r3
 800415c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800415e:	ebaa 0303 	sub.w	r3, sl, r3
 8004162:	4599      	cmp	r9, r3
 8004164:	bfa8      	it	ge
 8004166:	4699      	movge	r9, r3
 8004168:	f1b9 0f00 	cmp.w	r9, #0
 800416c:	dc33      	bgt.n	80041d6 <_printf_float+0x39a>
 800416e:	f04f 0800 	mov.w	r8, #0
 8004172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004176:	f104 0b1a 	add.w	fp, r4, #26
 800417a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800417c:	ebaa 0303 	sub.w	r3, sl, r3
 8004180:	eba3 0309 	sub.w	r3, r3, r9
 8004184:	4543      	cmp	r3, r8
 8004186:	f77f af7a 	ble.w	800407e <_printf_float+0x242>
 800418a:	2301      	movs	r3, #1
 800418c:	465a      	mov	r2, fp
 800418e:	4631      	mov	r1, r6
 8004190:	4628      	mov	r0, r5
 8004192:	47b8      	blx	r7
 8004194:	3001      	adds	r0, #1
 8004196:	f43f aeac 	beq.w	8003ef2 <_printf_float+0xb6>
 800419a:	f108 0801 	add.w	r8, r8, #1
 800419e:	e7ec      	b.n	800417a <_printf_float+0x33e>
 80041a0:	4642      	mov	r2, r8
 80041a2:	4631      	mov	r1, r6
 80041a4:	4628      	mov	r0, r5
 80041a6:	47b8      	blx	r7
 80041a8:	3001      	adds	r0, #1
 80041aa:	d1c2      	bne.n	8004132 <_printf_float+0x2f6>
 80041ac:	e6a1      	b.n	8003ef2 <_printf_float+0xb6>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4631      	mov	r1, r6
 80041b2:	4628      	mov	r0, r5
 80041b4:	920a      	str	r2, [sp, #40]	@ 0x28
 80041b6:	47b8      	blx	r7
 80041b8:	3001      	adds	r0, #1
 80041ba:	f43f ae9a 	beq.w	8003ef2 <_printf_float+0xb6>
 80041be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041c0:	f10b 0b01 	add.w	fp, fp, #1
 80041c4:	e7bb      	b.n	800413e <_printf_float+0x302>
 80041c6:	4631      	mov	r1, r6
 80041c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b8      	blx	r7
 80041d0:	3001      	adds	r0, #1
 80041d2:	d1c0      	bne.n	8004156 <_printf_float+0x31a>
 80041d4:	e68d      	b.n	8003ef2 <_printf_float+0xb6>
 80041d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80041d8:	464b      	mov	r3, r9
 80041da:	4631      	mov	r1, r6
 80041dc:	4628      	mov	r0, r5
 80041de:	4442      	add	r2, r8
 80041e0:	47b8      	blx	r7
 80041e2:	3001      	adds	r0, #1
 80041e4:	d1c3      	bne.n	800416e <_printf_float+0x332>
 80041e6:	e684      	b.n	8003ef2 <_printf_float+0xb6>
 80041e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80041ec:	f1ba 0f01 	cmp.w	sl, #1
 80041f0:	dc01      	bgt.n	80041f6 <_printf_float+0x3ba>
 80041f2:	07db      	lsls	r3, r3, #31
 80041f4:	d536      	bpl.n	8004264 <_printf_float+0x428>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4642      	mov	r2, r8
 80041fa:	4631      	mov	r1, r6
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b8      	blx	r7
 8004200:	3001      	adds	r0, #1
 8004202:	f43f ae76 	beq.w	8003ef2 <_printf_float+0xb6>
 8004206:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	f43f ae6e 	beq.w	8003ef2 <_printf_float+0xb6>
 8004216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800421a:	2200      	movs	r2, #0
 800421c:	2300      	movs	r3, #0
 800421e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004222:	f7fc fbc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004226:	b9c0      	cbnz	r0, 800425a <_printf_float+0x41e>
 8004228:	4653      	mov	r3, sl
 800422a:	f108 0201 	add.w	r2, r8, #1
 800422e:	4631      	mov	r1, r6
 8004230:	4628      	mov	r0, r5
 8004232:	47b8      	blx	r7
 8004234:	3001      	adds	r0, #1
 8004236:	d10c      	bne.n	8004252 <_printf_float+0x416>
 8004238:	e65b      	b.n	8003ef2 <_printf_float+0xb6>
 800423a:	2301      	movs	r3, #1
 800423c:	465a      	mov	r2, fp
 800423e:	4631      	mov	r1, r6
 8004240:	4628      	mov	r0, r5
 8004242:	47b8      	blx	r7
 8004244:	3001      	adds	r0, #1
 8004246:	f43f ae54 	beq.w	8003ef2 <_printf_float+0xb6>
 800424a:	f108 0801 	add.w	r8, r8, #1
 800424e:	45d0      	cmp	r8, sl
 8004250:	dbf3      	blt.n	800423a <_printf_float+0x3fe>
 8004252:	464b      	mov	r3, r9
 8004254:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004258:	e6e0      	b.n	800401c <_printf_float+0x1e0>
 800425a:	f04f 0800 	mov.w	r8, #0
 800425e:	f104 0b1a 	add.w	fp, r4, #26
 8004262:	e7f4      	b.n	800424e <_printf_float+0x412>
 8004264:	2301      	movs	r3, #1
 8004266:	4642      	mov	r2, r8
 8004268:	e7e1      	b.n	800422e <_printf_float+0x3f2>
 800426a:	2301      	movs	r3, #1
 800426c:	464a      	mov	r2, r9
 800426e:	4631      	mov	r1, r6
 8004270:	4628      	mov	r0, r5
 8004272:	47b8      	blx	r7
 8004274:	3001      	adds	r0, #1
 8004276:	f43f ae3c 	beq.w	8003ef2 <_printf_float+0xb6>
 800427a:	f108 0801 	add.w	r8, r8, #1
 800427e:	68e3      	ldr	r3, [r4, #12]
 8004280:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004282:	1a5b      	subs	r3, r3, r1
 8004284:	4543      	cmp	r3, r8
 8004286:	dcf0      	bgt.n	800426a <_printf_float+0x42e>
 8004288:	e6fd      	b.n	8004086 <_printf_float+0x24a>
 800428a:	f04f 0800 	mov.w	r8, #0
 800428e:	f104 0919 	add.w	r9, r4, #25
 8004292:	e7f4      	b.n	800427e <_printf_float+0x442>

08004294 <_printf_common>:
 8004294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	4616      	mov	r6, r2
 800429a:	4698      	mov	r8, r3
 800429c:	688a      	ldr	r2, [r1, #8]
 800429e:	690b      	ldr	r3, [r1, #16]
 80042a0:	4607      	mov	r7, r0
 80042a2:	4293      	cmp	r3, r2
 80042a4:	bfb8      	it	lt
 80042a6:	4613      	movlt	r3, r2
 80042a8:	6033      	str	r3, [r6, #0]
 80042aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80042ae:	460c      	mov	r4, r1
 80042b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80042b4:	b10a      	cbz	r2, 80042ba <_printf_common+0x26>
 80042b6:	3301      	adds	r3, #1
 80042b8:	6033      	str	r3, [r6, #0]
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	0699      	lsls	r1, r3, #26
 80042be:	bf42      	ittt	mi
 80042c0:	6833      	ldrmi	r3, [r6, #0]
 80042c2:	3302      	addmi	r3, #2
 80042c4:	6033      	strmi	r3, [r6, #0]
 80042c6:	6825      	ldr	r5, [r4, #0]
 80042c8:	f015 0506 	ands.w	r5, r5, #6
 80042cc:	d106      	bne.n	80042dc <_printf_common+0x48>
 80042ce:	f104 0a19 	add.w	sl, r4, #25
 80042d2:	68e3      	ldr	r3, [r4, #12]
 80042d4:	6832      	ldr	r2, [r6, #0]
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	42ab      	cmp	r3, r5
 80042da:	dc2b      	bgt.n	8004334 <_printf_common+0xa0>
 80042dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	3b00      	subs	r3, #0
 80042e4:	bf18      	it	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	0692      	lsls	r2, r2, #26
 80042ea:	d430      	bmi.n	800434e <_printf_common+0xba>
 80042ec:	4641      	mov	r1, r8
 80042ee:	4638      	mov	r0, r7
 80042f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042f4:	47c8      	blx	r9
 80042f6:	3001      	adds	r0, #1
 80042f8:	d023      	beq.n	8004342 <_printf_common+0xae>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	6922      	ldr	r2, [r4, #16]
 80042fe:	f003 0306 	and.w	r3, r3, #6
 8004302:	2b04      	cmp	r3, #4
 8004304:	bf14      	ite	ne
 8004306:	2500      	movne	r5, #0
 8004308:	6833      	ldreq	r3, [r6, #0]
 800430a:	f04f 0600 	mov.w	r6, #0
 800430e:	bf08      	it	eq
 8004310:	68e5      	ldreq	r5, [r4, #12]
 8004312:	f104 041a 	add.w	r4, r4, #26
 8004316:	bf08      	it	eq
 8004318:	1aed      	subeq	r5, r5, r3
 800431a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800431e:	bf08      	it	eq
 8004320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004324:	4293      	cmp	r3, r2
 8004326:	bfc4      	itt	gt
 8004328:	1a9b      	subgt	r3, r3, r2
 800432a:	18ed      	addgt	r5, r5, r3
 800432c:	42b5      	cmp	r5, r6
 800432e:	d11a      	bne.n	8004366 <_printf_common+0xd2>
 8004330:	2000      	movs	r0, #0
 8004332:	e008      	b.n	8004346 <_printf_common+0xb2>
 8004334:	2301      	movs	r3, #1
 8004336:	4652      	mov	r2, sl
 8004338:	4641      	mov	r1, r8
 800433a:	4638      	mov	r0, r7
 800433c:	47c8      	blx	r9
 800433e:	3001      	adds	r0, #1
 8004340:	d103      	bne.n	800434a <_printf_common+0xb6>
 8004342:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800434a:	3501      	adds	r5, #1
 800434c:	e7c1      	b.n	80042d2 <_printf_common+0x3e>
 800434e:	2030      	movs	r0, #48	@ 0x30
 8004350:	18e1      	adds	r1, r4, r3
 8004352:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800435c:	4422      	add	r2, r4
 800435e:	3302      	adds	r3, #2
 8004360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004364:	e7c2      	b.n	80042ec <_printf_common+0x58>
 8004366:	2301      	movs	r3, #1
 8004368:	4622      	mov	r2, r4
 800436a:	4641      	mov	r1, r8
 800436c:	4638      	mov	r0, r7
 800436e:	47c8      	blx	r9
 8004370:	3001      	adds	r0, #1
 8004372:	d0e6      	beq.n	8004342 <_printf_common+0xae>
 8004374:	3601      	adds	r6, #1
 8004376:	e7d9      	b.n	800432c <_printf_common+0x98>

08004378 <_printf_i>:
 8004378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800437c:	7e0f      	ldrb	r7, [r1, #24]
 800437e:	4691      	mov	r9, r2
 8004380:	2f78      	cmp	r7, #120	@ 0x78
 8004382:	4680      	mov	r8, r0
 8004384:	460c      	mov	r4, r1
 8004386:	469a      	mov	sl, r3
 8004388:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800438a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800438e:	d807      	bhi.n	80043a0 <_printf_i+0x28>
 8004390:	2f62      	cmp	r7, #98	@ 0x62
 8004392:	d80a      	bhi.n	80043aa <_printf_i+0x32>
 8004394:	2f00      	cmp	r7, #0
 8004396:	f000 80d3 	beq.w	8004540 <_printf_i+0x1c8>
 800439a:	2f58      	cmp	r7, #88	@ 0x58
 800439c:	f000 80ba 	beq.w	8004514 <_printf_i+0x19c>
 80043a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80043a8:	e03a      	b.n	8004420 <_printf_i+0xa8>
 80043aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80043ae:	2b15      	cmp	r3, #21
 80043b0:	d8f6      	bhi.n	80043a0 <_printf_i+0x28>
 80043b2:	a101      	add	r1, pc, #4	@ (adr r1, 80043b8 <_printf_i+0x40>)
 80043b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043b8:	08004411 	.word	0x08004411
 80043bc:	08004425 	.word	0x08004425
 80043c0:	080043a1 	.word	0x080043a1
 80043c4:	080043a1 	.word	0x080043a1
 80043c8:	080043a1 	.word	0x080043a1
 80043cc:	080043a1 	.word	0x080043a1
 80043d0:	08004425 	.word	0x08004425
 80043d4:	080043a1 	.word	0x080043a1
 80043d8:	080043a1 	.word	0x080043a1
 80043dc:	080043a1 	.word	0x080043a1
 80043e0:	080043a1 	.word	0x080043a1
 80043e4:	08004527 	.word	0x08004527
 80043e8:	0800444f 	.word	0x0800444f
 80043ec:	080044e1 	.word	0x080044e1
 80043f0:	080043a1 	.word	0x080043a1
 80043f4:	080043a1 	.word	0x080043a1
 80043f8:	08004549 	.word	0x08004549
 80043fc:	080043a1 	.word	0x080043a1
 8004400:	0800444f 	.word	0x0800444f
 8004404:	080043a1 	.word	0x080043a1
 8004408:	080043a1 	.word	0x080043a1
 800440c:	080044e9 	.word	0x080044e9
 8004410:	6833      	ldr	r3, [r6, #0]
 8004412:	1d1a      	adds	r2, r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6032      	str	r2, [r6, #0]
 8004418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800441c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004420:	2301      	movs	r3, #1
 8004422:	e09e      	b.n	8004562 <_printf_i+0x1ea>
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	1d19      	adds	r1, r3, #4
 800442a:	6031      	str	r1, [r6, #0]
 800442c:	0606      	lsls	r6, r0, #24
 800442e:	d501      	bpl.n	8004434 <_printf_i+0xbc>
 8004430:	681d      	ldr	r5, [r3, #0]
 8004432:	e003      	b.n	800443c <_printf_i+0xc4>
 8004434:	0645      	lsls	r5, r0, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0xb8>
 8004438:	f9b3 5000 	ldrsh.w	r5, [r3]
 800443c:	2d00      	cmp	r5, #0
 800443e:	da03      	bge.n	8004448 <_printf_i+0xd0>
 8004440:	232d      	movs	r3, #45	@ 0x2d
 8004442:	426d      	negs	r5, r5
 8004444:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004448:	230a      	movs	r3, #10
 800444a:	4859      	ldr	r0, [pc, #356]	@ (80045b0 <_printf_i+0x238>)
 800444c:	e011      	b.n	8004472 <_printf_i+0xfa>
 800444e:	6821      	ldr	r1, [r4, #0]
 8004450:	6833      	ldr	r3, [r6, #0]
 8004452:	0608      	lsls	r0, r1, #24
 8004454:	f853 5b04 	ldr.w	r5, [r3], #4
 8004458:	d402      	bmi.n	8004460 <_printf_i+0xe8>
 800445a:	0649      	lsls	r1, r1, #25
 800445c:	bf48      	it	mi
 800445e:	b2ad      	uxthmi	r5, r5
 8004460:	2f6f      	cmp	r7, #111	@ 0x6f
 8004462:	6033      	str	r3, [r6, #0]
 8004464:	bf14      	ite	ne
 8004466:	230a      	movne	r3, #10
 8004468:	2308      	moveq	r3, #8
 800446a:	4851      	ldr	r0, [pc, #324]	@ (80045b0 <_printf_i+0x238>)
 800446c:	2100      	movs	r1, #0
 800446e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004472:	6866      	ldr	r6, [r4, #4]
 8004474:	2e00      	cmp	r6, #0
 8004476:	bfa8      	it	ge
 8004478:	6821      	ldrge	r1, [r4, #0]
 800447a:	60a6      	str	r6, [r4, #8]
 800447c:	bfa4      	itt	ge
 800447e:	f021 0104 	bicge.w	r1, r1, #4
 8004482:	6021      	strge	r1, [r4, #0]
 8004484:	b90d      	cbnz	r5, 800448a <_printf_i+0x112>
 8004486:	2e00      	cmp	r6, #0
 8004488:	d04b      	beq.n	8004522 <_printf_i+0x1aa>
 800448a:	4616      	mov	r6, r2
 800448c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004490:	fb03 5711 	mls	r7, r3, r1, r5
 8004494:	5dc7      	ldrb	r7, [r0, r7]
 8004496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800449a:	462f      	mov	r7, r5
 800449c:	42bb      	cmp	r3, r7
 800449e:	460d      	mov	r5, r1
 80044a0:	d9f4      	bls.n	800448c <_printf_i+0x114>
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d10b      	bne.n	80044be <_printf_i+0x146>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	07df      	lsls	r7, r3, #31
 80044aa:	d508      	bpl.n	80044be <_printf_i+0x146>
 80044ac:	6923      	ldr	r3, [r4, #16]
 80044ae:	6861      	ldr	r1, [r4, #4]
 80044b0:	4299      	cmp	r1, r3
 80044b2:	bfde      	ittt	le
 80044b4:	2330      	movle	r3, #48	@ 0x30
 80044b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044ba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80044be:	1b92      	subs	r2, r2, r6
 80044c0:	6122      	str	r2, [r4, #16]
 80044c2:	464b      	mov	r3, r9
 80044c4:	4621      	mov	r1, r4
 80044c6:	4640      	mov	r0, r8
 80044c8:	f8cd a000 	str.w	sl, [sp]
 80044cc:	aa03      	add	r2, sp, #12
 80044ce:	f7ff fee1 	bl	8004294 <_printf_common>
 80044d2:	3001      	adds	r0, #1
 80044d4:	d14a      	bne.n	800456c <_printf_i+0x1f4>
 80044d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044da:	b004      	add	sp, #16
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	f043 0320 	orr.w	r3, r3, #32
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	2778      	movs	r7, #120	@ 0x78
 80044ea:	4832      	ldr	r0, [pc, #200]	@ (80045b4 <_printf_i+0x23c>)
 80044ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	6831      	ldr	r1, [r6, #0]
 80044f4:	061f      	lsls	r7, r3, #24
 80044f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80044fa:	d402      	bmi.n	8004502 <_printf_i+0x18a>
 80044fc:	065f      	lsls	r7, r3, #25
 80044fe:	bf48      	it	mi
 8004500:	b2ad      	uxthmi	r5, r5
 8004502:	6031      	str	r1, [r6, #0]
 8004504:	07d9      	lsls	r1, r3, #31
 8004506:	bf44      	itt	mi
 8004508:	f043 0320 	orrmi.w	r3, r3, #32
 800450c:	6023      	strmi	r3, [r4, #0]
 800450e:	b11d      	cbz	r5, 8004518 <_printf_i+0x1a0>
 8004510:	2310      	movs	r3, #16
 8004512:	e7ab      	b.n	800446c <_printf_i+0xf4>
 8004514:	4826      	ldr	r0, [pc, #152]	@ (80045b0 <_printf_i+0x238>)
 8004516:	e7e9      	b.n	80044ec <_printf_i+0x174>
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f023 0320 	bic.w	r3, r3, #32
 800451e:	6023      	str	r3, [r4, #0]
 8004520:	e7f6      	b.n	8004510 <_printf_i+0x198>
 8004522:	4616      	mov	r6, r2
 8004524:	e7bd      	b.n	80044a2 <_printf_i+0x12a>
 8004526:	6833      	ldr	r3, [r6, #0]
 8004528:	6825      	ldr	r5, [r4, #0]
 800452a:	1d18      	adds	r0, r3, #4
 800452c:	6961      	ldr	r1, [r4, #20]
 800452e:	6030      	str	r0, [r6, #0]
 8004530:	062e      	lsls	r6, r5, #24
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	d501      	bpl.n	800453a <_printf_i+0x1c2>
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	e002      	b.n	8004540 <_printf_i+0x1c8>
 800453a:	0668      	lsls	r0, r5, #25
 800453c:	d5fb      	bpl.n	8004536 <_printf_i+0x1be>
 800453e:	8019      	strh	r1, [r3, #0]
 8004540:	2300      	movs	r3, #0
 8004542:	4616      	mov	r6, r2
 8004544:	6123      	str	r3, [r4, #16]
 8004546:	e7bc      	b.n	80044c2 <_printf_i+0x14a>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	2100      	movs	r1, #0
 800454c:	1d1a      	adds	r2, r3, #4
 800454e:	6032      	str	r2, [r6, #0]
 8004550:	681e      	ldr	r6, [r3, #0]
 8004552:	6862      	ldr	r2, [r4, #4]
 8004554:	4630      	mov	r0, r6
 8004556:	f000 fbe4 	bl	8004d22 <memchr>
 800455a:	b108      	cbz	r0, 8004560 <_printf_i+0x1e8>
 800455c:	1b80      	subs	r0, r0, r6
 800455e:	6060      	str	r0, [r4, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2300      	movs	r3, #0
 8004566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800456a:	e7aa      	b.n	80044c2 <_printf_i+0x14a>
 800456c:	4632      	mov	r2, r6
 800456e:	4649      	mov	r1, r9
 8004570:	4640      	mov	r0, r8
 8004572:	6923      	ldr	r3, [r4, #16]
 8004574:	47d0      	blx	sl
 8004576:	3001      	adds	r0, #1
 8004578:	d0ad      	beq.n	80044d6 <_printf_i+0x15e>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	079b      	lsls	r3, r3, #30
 800457e:	d413      	bmi.n	80045a8 <_printf_i+0x230>
 8004580:	68e0      	ldr	r0, [r4, #12]
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	4298      	cmp	r0, r3
 8004586:	bfb8      	it	lt
 8004588:	4618      	movlt	r0, r3
 800458a:	e7a6      	b.n	80044da <_printf_i+0x162>
 800458c:	2301      	movs	r3, #1
 800458e:	4632      	mov	r2, r6
 8004590:	4649      	mov	r1, r9
 8004592:	4640      	mov	r0, r8
 8004594:	47d0      	blx	sl
 8004596:	3001      	adds	r0, #1
 8004598:	d09d      	beq.n	80044d6 <_printf_i+0x15e>
 800459a:	3501      	adds	r5, #1
 800459c:	68e3      	ldr	r3, [r4, #12]
 800459e:	9903      	ldr	r1, [sp, #12]
 80045a0:	1a5b      	subs	r3, r3, r1
 80045a2:	42ab      	cmp	r3, r5
 80045a4:	dcf2      	bgt.n	800458c <_printf_i+0x214>
 80045a6:	e7eb      	b.n	8004580 <_printf_i+0x208>
 80045a8:	2500      	movs	r5, #0
 80045aa:	f104 0619 	add.w	r6, r4, #25
 80045ae:	e7f5      	b.n	800459c <_printf_i+0x224>
 80045b0:	0800868a 	.word	0x0800868a
 80045b4:	0800869b 	.word	0x0800869b

080045b8 <_scanf_float>:
 80045b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	b087      	sub	sp, #28
 80045be:	9303      	str	r3, [sp, #12]
 80045c0:	688b      	ldr	r3, [r1, #8]
 80045c2:	4617      	mov	r7, r2
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80045ca:	bf82      	ittt	hi
 80045cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80045d0:	eb03 0b05 	addhi.w	fp, r3, r5
 80045d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80045d8:	460a      	mov	r2, r1
 80045da:	f04f 0500 	mov.w	r5, #0
 80045de:	bf88      	it	hi
 80045e0:	608b      	strhi	r3, [r1, #8]
 80045e2:	680b      	ldr	r3, [r1, #0]
 80045e4:	4680      	mov	r8, r0
 80045e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80045ea:	f842 3b1c 	str.w	r3, [r2], #28
 80045ee:	460c      	mov	r4, r1
 80045f0:	bf98      	it	ls
 80045f2:	f04f 0b00 	movls.w	fp, #0
 80045f6:	4616      	mov	r6, r2
 80045f8:	46aa      	mov	sl, r5
 80045fa:	46a9      	mov	r9, r5
 80045fc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004600:	9201      	str	r2, [sp, #4]
 8004602:	9502      	str	r5, [sp, #8]
 8004604:	68a2      	ldr	r2, [r4, #8]
 8004606:	b152      	cbz	r2, 800461e <_scanf_float+0x66>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b4e      	cmp	r3, #78	@ 0x4e
 800460e:	d865      	bhi.n	80046dc <_scanf_float+0x124>
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d83d      	bhi.n	8004690 <_scanf_float+0xd8>
 8004614:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004618:	b2c8      	uxtb	r0, r1
 800461a:	280e      	cmp	r0, #14
 800461c:	d93b      	bls.n	8004696 <_scanf_float+0xde>
 800461e:	f1b9 0f00 	cmp.w	r9, #0
 8004622:	d003      	beq.n	800462c <_scanf_float+0x74>
 8004624:	6823      	ldr	r3, [r4, #0]
 8004626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004630:	f1ba 0f01 	cmp.w	sl, #1
 8004634:	f200 8118 	bhi.w	8004868 <_scanf_float+0x2b0>
 8004638:	9b01      	ldr	r3, [sp, #4]
 800463a:	429e      	cmp	r6, r3
 800463c:	f200 8109 	bhi.w	8004852 <_scanf_float+0x29a>
 8004640:	2001      	movs	r0, #1
 8004642:	b007      	add	sp, #28
 8004644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004648:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800464c:	2a0d      	cmp	r2, #13
 800464e:	d8e6      	bhi.n	800461e <_scanf_float+0x66>
 8004650:	a101      	add	r1, pc, #4	@ (adr r1, 8004658 <_scanf_float+0xa0>)
 8004652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800479f 	.word	0x0800479f
 800465c:	0800461f 	.word	0x0800461f
 8004660:	0800461f 	.word	0x0800461f
 8004664:	0800461f 	.word	0x0800461f
 8004668:	080047ff 	.word	0x080047ff
 800466c:	080047d7 	.word	0x080047d7
 8004670:	0800461f 	.word	0x0800461f
 8004674:	0800461f 	.word	0x0800461f
 8004678:	080047ad 	.word	0x080047ad
 800467c:	0800461f 	.word	0x0800461f
 8004680:	0800461f 	.word	0x0800461f
 8004684:	0800461f 	.word	0x0800461f
 8004688:	0800461f 	.word	0x0800461f
 800468c:	08004765 	.word	0x08004765
 8004690:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004694:	e7da      	b.n	800464c <_scanf_float+0x94>
 8004696:	290e      	cmp	r1, #14
 8004698:	d8c1      	bhi.n	800461e <_scanf_float+0x66>
 800469a:	a001      	add	r0, pc, #4	@ (adr r0, 80046a0 <_scanf_float+0xe8>)
 800469c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80046a0:	08004755 	.word	0x08004755
 80046a4:	0800461f 	.word	0x0800461f
 80046a8:	08004755 	.word	0x08004755
 80046ac:	080047eb 	.word	0x080047eb
 80046b0:	0800461f 	.word	0x0800461f
 80046b4:	080046fd 	.word	0x080046fd
 80046b8:	0800473b 	.word	0x0800473b
 80046bc:	0800473b 	.word	0x0800473b
 80046c0:	0800473b 	.word	0x0800473b
 80046c4:	0800473b 	.word	0x0800473b
 80046c8:	0800473b 	.word	0x0800473b
 80046cc:	0800473b 	.word	0x0800473b
 80046d0:	0800473b 	.word	0x0800473b
 80046d4:	0800473b 	.word	0x0800473b
 80046d8:	0800473b 	.word	0x0800473b
 80046dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80046de:	d809      	bhi.n	80046f4 <_scanf_float+0x13c>
 80046e0:	2b60      	cmp	r3, #96	@ 0x60
 80046e2:	d8b1      	bhi.n	8004648 <_scanf_float+0x90>
 80046e4:	2b54      	cmp	r3, #84	@ 0x54
 80046e6:	d07b      	beq.n	80047e0 <_scanf_float+0x228>
 80046e8:	2b59      	cmp	r3, #89	@ 0x59
 80046ea:	d198      	bne.n	800461e <_scanf_float+0x66>
 80046ec:	2d07      	cmp	r5, #7
 80046ee:	d196      	bne.n	800461e <_scanf_float+0x66>
 80046f0:	2508      	movs	r5, #8
 80046f2:	e02c      	b.n	800474e <_scanf_float+0x196>
 80046f4:	2b74      	cmp	r3, #116	@ 0x74
 80046f6:	d073      	beq.n	80047e0 <_scanf_float+0x228>
 80046f8:	2b79      	cmp	r3, #121	@ 0x79
 80046fa:	e7f6      	b.n	80046ea <_scanf_float+0x132>
 80046fc:	6821      	ldr	r1, [r4, #0]
 80046fe:	05c8      	lsls	r0, r1, #23
 8004700:	d51b      	bpl.n	800473a <_scanf_float+0x182>
 8004702:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004706:	6021      	str	r1, [r4, #0]
 8004708:	f109 0901 	add.w	r9, r9, #1
 800470c:	f1bb 0f00 	cmp.w	fp, #0
 8004710:	d003      	beq.n	800471a <_scanf_float+0x162>
 8004712:	3201      	adds	r2, #1
 8004714:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004718:	60a2      	str	r2, [r4, #8]
 800471a:	68a3      	ldr	r3, [r4, #8]
 800471c:	3b01      	subs	r3, #1
 800471e:	60a3      	str	r3, [r4, #8]
 8004720:	6923      	ldr	r3, [r4, #16]
 8004722:	3301      	adds	r3, #1
 8004724:	6123      	str	r3, [r4, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3b01      	subs	r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	f340 8087 	ble.w	8004840 <_scanf_float+0x288>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	603b      	str	r3, [r7, #0]
 8004738:	e764      	b.n	8004604 <_scanf_float+0x4c>
 800473a:	eb1a 0105 	adds.w	r1, sl, r5
 800473e:	f47f af6e 	bne.w	800461e <_scanf_float+0x66>
 8004742:	460d      	mov	r5, r1
 8004744:	468a      	mov	sl, r1
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	f806 3b01 	strb.w	r3, [r6], #1
 8004752:	e7e2      	b.n	800471a <_scanf_float+0x162>
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	0610      	lsls	r0, r2, #24
 8004758:	f57f af61 	bpl.w	800461e <_scanf_float+0x66>
 800475c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004760:	6022      	str	r2, [r4, #0]
 8004762:	e7f4      	b.n	800474e <_scanf_float+0x196>
 8004764:	f1ba 0f00 	cmp.w	sl, #0
 8004768:	d10e      	bne.n	8004788 <_scanf_float+0x1d0>
 800476a:	f1b9 0f00 	cmp.w	r9, #0
 800476e:	d10e      	bne.n	800478e <_scanf_float+0x1d6>
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004776:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800477a:	d108      	bne.n	800478e <_scanf_float+0x1d6>
 800477c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004780:	f04f 0a01 	mov.w	sl, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	e7e2      	b.n	800474e <_scanf_float+0x196>
 8004788:	f1ba 0f02 	cmp.w	sl, #2
 800478c:	d055      	beq.n	800483a <_scanf_float+0x282>
 800478e:	2d01      	cmp	r5, #1
 8004790:	d002      	beq.n	8004798 <_scanf_float+0x1e0>
 8004792:	2d04      	cmp	r5, #4
 8004794:	f47f af43 	bne.w	800461e <_scanf_float+0x66>
 8004798:	3501      	adds	r5, #1
 800479a:	b2ed      	uxtb	r5, r5
 800479c:	e7d7      	b.n	800474e <_scanf_float+0x196>
 800479e:	f1ba 0f01 	cmp.w	sl, #1
 80047a2:	f47f af3c 	bne.w	800461e <_scanf_float+0x66>
 80047a6:	f04f 0a02 	mov.w	sl, #2
 80047aa:	e7d0      	b.n	800474e <_scanf_float+0x196>
 80047ac:	b97d      	cbnz	r5, 80047ce <_scanf_float+0x216>
 80047ae:	f1b9 0f00 	cmp.w	r9, #0
 80047b2:	f47f af37 	bne.w	8004624 <_scanf_float+0x6c>
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80047bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80047c0:	f040 8103 	bne.w	80049ca <_scanf_float+0x412>
 80047c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80047c8:	2501      	movs	r5, #1
 80047ca:	6022      	str	r2, [r4, #0]
 80047cc:	e7bf      	b.n	800474e <_scanf_float+0x196>
 80047ce:	2d03      	cmp	r5, #3
 80047d0:	d0e2      	beq.n	8004798 <_scanf_float+0x1e0>
 80047d2:	2d05      	cmp	r5, #5
 80047d4:	e7de      	b.n	8004794 <_scanf_float+0x1dc>
 80047d6:	2d02      	cmp	r5, #2
 80047d8:	f47f af21 	bne.w	800461e <_scanf_float+0x66>
 80047dc:	2503      	movs	r5, #3
 80047de:	e7b6      	b.n	800474e <_scanf_float+0x196>
 80047e0:	2d06      	cmp	r5, #6
 80047e2:	f47f af1c 	bne.w	800461e <_scanf_float+0x66>
 80047e6:	2507      	movs	r5, #7
 80047e8:	e7b1      	b.n	800474e <_scanf_float+0x196>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	0591      	lsls	r1, r2, #22
 80047ee:	f57f af16 	bpl.w	800461e <_scanf_float+0x66>
 80047f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80047fc:	e7a7      	b.n	800474e <_scanf_float+0x196>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004804:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004808:	d006      	beq.n	8004818 <_scanf_float+0x260>
 800480a:	0550      	lsls	r0, r2, #21
 800480c:	f57f af07 	bpl.w	800461e <_scanf_float+0x66>
 8004810:	f1b9 0f00 	cmp.w	r9, #0
 8004814:	f000 80d9 	beq.w	80049ca <_scanf_float+0x412>
 8004818:	0591      	lsls	r1, r2, #22
 800481a:	bf58      	it	pl
 800481c:	9902      	ldrpl	r1, [sp, #8]
 800481e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004822:	bf58      	it	pl
 8004824:	eba9 0101 	subpl.w	r1, r9, r1
 8004828:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800482c:	f04f 0900 	mov.w	r9, #0
 8004830:	bf58      	it	pl
 8004832:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004836:	6022      	str	r2, [r4, #0]
 8004838:	e789      	b.n	800474e <_scanf_float+0x196>
 800483a:	f04f 0a03 	mov.w	sl, #3
 800483e:	e786      	b.n	800474e <_scanf_float+0x196>
 8004840:	4639      	mov	r1, r7
 8004842:	4640      	mov	r0, r8
 8004844:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004848:	4798      	blx	r3
 800484a:	2800      	cmp	r0, #0
 800484c:	f43f aeda 	beq.w	8004604 <_scanf_float+0x4c>
 8004850:	e6e5      	b.n	800461e <_scanf_float+0x66>
 8004852:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004856:	463a      	mov	r2, r7
 8004858:	4640      	mov	r0, r8
 800485a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800485e:	4798      	blx	r3
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	3b01      	subs	r3, #1
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	e6e7      	b.n	8004638 <_scanf_float+0x80>
 8004868:	1e6b      	subs	r3, r5, #1
 800486a:	2b06      	cmp	r3, #6
 800486c:	d824      	bhi.n	80048b8 <_scanf_float+0x300>
 800486e:	2d02      	cmp	r5, #2
 8004870:	d836      	bhi.n	80048e0 <_scanf_float+0x328>
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	429e      	cmp	r6, r3
 8004876:	f67f aee3 	bls.w	8004640 <_scanf_float+0x88>
 800487a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800487e:	463a      	mov	r2, r7
 8004880:	4640      	mov	r0, r8
 8004882:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004886:	4798      	blx	r3
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	3b01      	subs	r3, #1
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	e7f0      	b.n	8004872 <_scanf_float+0x2ba>
 8004890:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004894:	463a      	mov	r2, r7
 8004896:	4640      	mov	r0, r8
 8004898:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800489c:	4798      	blx	r3
 800489e:	6923      	ldr	r3, [r4, #16]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	6123      	str	r3, [r4, #16]
 80048a4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80048a8:	fa5f fa8a 	uxtb.w	sl, sl
 80048ac:	f1ba 0f02 	cmp.w	sl, #2
 80048b0:	d1ee      	bne.n	8004890 <_scanf_float+0x2d8>
 80048b2:	3d03      	subs	r5, #3
 80048b4:	b2ed      	uxtb	r5, r5
 80048b6:	1b76      	subs	r6, r6, r5
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	05da      	lsls	r2, r3, #23
 80048bc:	d530      	bpl.n	8004920 <_scanf_float+0x368>
 80048be:	055b      	lsls	r3, r3, #21
 80048c0:	d511      	bpl.n	80048e6 <_scanf_float+0x32e>
 80048c2:	9b01      	ldr	r3, [sp, #4]
 80048c4:	429e      	cmp	r6, r3
 80048c6:	f67f aebb 	bls.w	8004640 <_scanf_float+0x88>
 80048ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80048ce:	463a      	mov	r2, r7
 80048d0:	4640      	mov	r0, r8
 80048d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048d6:	4798      	blx	r3
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	3b01      	subs	r3, #1
 80048dc:	6123      	str	r3, [r4, #16]
 80048de:	e7f0      	b.n	80048c2 <_scanf_float+0x30a>
 80048e0:	46aa      	mov	sl, r5
 80048e2:	46b3      	mov	fp, r6
 80048e4:	e7de      	b.n	80048a4 <_scanf_float+0x2ec>
 80048e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	2965      	cmp	r1, #101	@ 0x65
 80048ee:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80048f2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	d00c      	beq.n	8004914 <_scanf_float+0x35c>
 80048fa:	2945      	cmp	r1, #69	@ 0x45
 80048fc:	d00a      	beq.n	8004914 <_scanf_float+0x35c>
 80048fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004902:	463a      	mov	r2, r7
 8004904:	4640      	mov	r0, r8
 8004906:	4798      	blx	r3
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800490e:	3b01      	subs	r3, #1
 8004910:	1eb5      	subs	r5, r6, #2
 8004912:	6123      	str	r3, [r4, #16]
 8004914:	463a      	mov	r2, r7
 8004916:	4640      	mov	r0, r8
 8004918:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800491c:	4798      	blx	r3
 800491e:	462e      	mov	r6, r5
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	f012 0210 	ands.w	r2, r2, #16
 8004926:	d001      	beq.n	800492c <_scanf_float+0x374>
 8004928:	2000      	movs	r0, #0
 800492a:	e68a      	b.n	8004642 <_scanf_float+0x8a>
 800492c:	7032      	strb	r2, [r6, #0]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004938:	d11c      	bne.n	8004974 <_scanf_float+0x3bc>
 800493a:	9b02      	ldr	r3, [sp, #8]
 800493c:	454b      	cmp	r3, r9
 800493e:	eba3 0209 	sub.w	r2, r3, r9
 8004942:	d123      	bne.n	800498c <_scanf_float+0x3d4>
 8004944:	2200      	movs	r2, #0
 8004946:	4640      	mov	r0, r8
 8004948:	9901      	ldr	r1, [sp, #4]
 800494a:	f002 fbed 	bl	8007128 <_strtod_r>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f015 0f02 	tst.w	r5, #2
 8004958:	4606      	mov	r6, r0
 800495a:	460f      	mov	r7, r1
 800495c:	f103 0204 	add.w	r2, r3, #4
 8004960:	d01f      	beq.n	80049a2 <_scanf_float+0x3ea>
 8004962:	9903      	ldr	r1, [sp, #12]
 8004964:	600a      	str	r2, [r1, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	e9c3 6700 	strd	r6, r7, [r3]
 800496c:	68e3      	ldr	r3, [r4, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60e3      	str	r3, [r4, #12]
 8004972:	e7d9      	b.n	8004928 <_scanf_float+0x370>
 8004974:	9b04      	ldr	r3, [sp, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0e4      	beq.n	8004944 <_scanf_float+0x38c>
 800497a:	9905      	ldr	r1, [sp, #20]
 800497c:	230a      	movs	r3, #10
 800497e:	4640      	mov	r0, r8
 8004980:	3101      	adds	r1, #1
 8004982:	f002 fc51 	bl	8007228 <_strtol_r>
 8004986:	9b04      	ldr	r3, [sp, #16]
 8004988:	9e05      	ldr	r6, [sp, #20]
 800498a:	1ac2      	subs	r2, r0, r3
 800498c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004990:	429e      	cmp	r6, r3
 8004992:	bf28      	it	cs
 8004994:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004998:	4630      	mov	r0, r6
 800499a:	490d      	ldr	r1, [pc, #52]	@ (80049d0 <_scanf_float+0x418>)
 800499c:	f000 f8de 	bl	8004b5c <siprintf>
 80049a0:	e7d0      	b.n	8004944 <_scanf_float+0x38c>
 80049a2:	076d      	lsls	r5, r5, #29
 80049a4:	d4dd      	bmi.n	8004962 <_scanf_float+0x3aa>
 80049a6:	9d03      	ldr	r5, [sp, #12]
 80049a8:	602a      	str	r2, [r5, #0]
 80049aa:	681d      	ldr	r5, [r3, #0]
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	f7fc f82c 	bl	8000a0c <__aeabi_dcmpun>
 80049b4:	b120      	cbz	r0, 80049c0 <_scanf_float+0x408>
 80049b6:	4807      	ldr	r0, [pc, #28]	@ (80049d4 <_scanf_float+0x41c>)
 80049b8:	f000 f9c2 	bl	8004d40 <nanf>
 80049bc:	6028      	str	r0, [r5, #0]
 80049be:	e7d5      	b.n	800496c <_scanf_float+0x3b4>
 80049c0:	4630      	mov	r0, r6
 80049c2:	4639      	mov	r1, r7
 80049c4:	f7fc f880 	bl	8000ac8 <__aeabi_d2f>
 80049c8:	e7f8      	b.n	80049bc <_scanf_float+0x404>
 80049ca:	f04f 0900 	mov.w	r9, #0
 80049ce:	e62d      	b.n	800462c <_scanf_float+0x74>
 80049d0:	080086ac 	.word	0x080086ac
 80049d4:	08008a45 	.word	0x08008a45

080049d8 <std>:
 80049d8:	2300      	movs	r3, #0
 80049da:	b510      	push	{r4, lr}
 80049dc:	4604      	mov	r4, r0
 80049de:	e9c0 3300 	strd	r3, r3, [r0]
 80049e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049e6:	6083      	str	r3, [r0, #8]
 80049e8:	8181      	strh	r1, [r0, #12]
 80049ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80049ec:	81c2      	strh	r2, [r0, #14]
 80049ee:	6183      	str	r3, [r0, #24]
 80049f0:	4619      	mov	r1, r3
 80049f2:	2208      	movs	r2, #8
 80049f4:	305c      	adds	r0, #92	@ 0x5c
 80049f6:	f000 f914 	bl	8004c22 <memset>
 80049fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <std+0x58>)
 80049fc:	6224      	str	r4, [r4, #32]
 80049fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <std+0x5c>)
 8004a02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <std+0x60>)
 8004a06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a08:	4b0c      	ldr	r3, [pc, #48]	@ (8004a3c <std+0x64>)
 8004a0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <std+0x68>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d006      	beq.n	8004a20 <std+0x48>
 8004a12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a16:	4294      	cmp	r4, r2
 8004a18:	d002      	beq.n	8004a20 <std+0x48>
 8004a1a:	33d0      	adds	r3, #208	@ 0xd0
 8004a1c:	429c      	cmp	r4, r3
 8004a1e:	d105      	bne.n	8004a2c <std+0x54>
 8004a20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a28:	f000 b978 	b.w	8004d1c <__retarget_lock_init_recursive>
 8004a2c:	bd10      	pop	{r4, pc}
 8004a2e:	bf00      	nop
 8004a30:	08004b9d 	.word	0x08004b9d
 8004a34:	08004bbf 	.word	0x08004bbf
 8004a38:	08004bf7 	.word	0x08004bf7
 8004a3c:	08004c1b 	.word	0x08004c1b
 8004a40:	2000020c 	.word	0x2000020c

08004a44 <stdio_exit_handler>:
 8004a44:	4a02      	ldr	r2, [pc, #8]	@ (8004a50 <stdio_exit_handler+0xc>)
 8004a46:	4903      	ldr	r1, [pc, #12]	@ (8004a54 <stdio_exit_handler+0x10>)
 8004a48:	4803      	ldr	r0, [pc, #12]	@ (8004a58 <stdio_exit_handler+0x14>)
 8004a4a:	f000 b869 	b.w	8004b20 <_fwalk_sglue>
 8004a4e:	bf00      	nop
 8004a50:	20000020 	.word	0x20000020
 8004a54:	080075dd 	.word	0x080075dd
 8004a58:	20000030 	.word	0x20000030

08004a5c <cleanup_stdio>:
 8004a5c:	6841      	ldr	r1, [r0, #4]
 8004a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <cleanup_stdio+0x34>)
 8004a60:	b510      	push	{r4, lr}
 8004a62:	4299      	cmp	r1, r3
 8004a64:	4604      	mov	r4, r0
 8004a66:	d001      	beq.n	8004a6c <cleanup_stdio+0x10>
 8004a68:	f002 fdb8 	bl	80075dc <_fflush_r>
 8004a6c:	68a1      	ldr	r1, [r4, #8]
 8004a6e:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <cleanup_stdio+0x38>)
 8004a70:	4299      	cmp	r1, r3
 8004a72:	d002      	beq.n	8004a7a <cleanup_stdio+0x1e>
 8004a74:	4620      	mov	r0, r4
 8004a76:	f002 fdb1 	bl	80075dc <_fflush_r>
 8004a7a:	68e1      	ldr	r1, [r4, #12]
 8004a7c:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <cleanup_stdio+0x3c>)
 8004a7e:	4299      	cmp	r1, r3
 8004a80:	d004      	beq.n	8004a8c <cleanup_stdio+0x30>
 8004a82:	4620      	mov	r0, r4
 8004a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a88:	f002 bda8 	b.w	80075dc <_fflush_r>
 8004a8c:	bd10      	pop	{r4, pc}
 8004a8e:	bf00      	nop
 8004a90:	2000020c 	.word	0x2000020c
 8004a94:	20000274 	.word	0x20000274
 8004a98:	200002dc 	.word	0x200002dc

08004a9c <global_stdio_init.part.0>:
 8004a9c:	b510      	push	{r4, lr}
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <global_stdio_init.part.0+0x30>)
 8004aa0:	4c0b      	ldr	r4, [pc, #44]	@ (8004ad0 <global_stdio_init.part.0+0x34>)
 8004aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ad4 <global_stdio_init.part.0+0x38>)
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	2104      	movs	r1, #4
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f7ff ff94 	bl	80049d8 <std>
 8004ab0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2109      	movs	r1, #9
 8004ab8:	f7ff ff8e 	bl	80049d8 <std>
 8004abc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ac6:	2112      	movs	r1, #18
 8004ac8:	f7ff bf86 	b.w	80049d8 <std>
 8004acc:	20000344 	.word	0x20000344
 8004ad0:	2000020c 	.word	0x2000020c
 8004ad4:	08004a45 	.word	0x08004a45

08004ad8 <__sfp_lock_acquire>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	@ (8004ae0 <__sfp_lock_acquire+0x8>)
 8004ada:	f000 b920 	b.w	8004d1e <__retarget_lock_acquire_recursive>
 8004ade:	bf00      	nop
 8004ae0:	2000034d 	.word	0x2000034d

08004ae4 <__sfp_lock_release>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	@ (8004aec <__sfp_lock_release+0x8>)
 8004ae6:	f000 b91b 	b.w	8004d20 <__retarget_lock_release_recursive>
 8004aea:	bf00      	nop
 8004aec:	2000034d 	.word	0x2000034d

08004af0 <__sinit>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4604      	mov	r4, r0
 8004af4:	f7ff fff0 	bl	8004ad8 <__sfp_lock_acquire>
 8004af8:	6a23      	ldr	r3, [r4, #32]
 8004afa:	b11b      	cbz	r3, 8004b04 <__sinit+0x14>
 8004afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b00:	f7ff bff0 	b.w	8004ae4 <__sfp_lock_release>
 8004b04:	4b04      	ldr	r3, [pc, #16]	@ (8004b18 <__sinit+0x28>)
 8004b06:	6223      	str	r3, [r4, #32]
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <__sinit+0x2c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f5      	bne.n	8004afc <__sinit+0xc>
 8004b10:	f7ff ffc4 	bl	8004a9c <global_stdio_init.part.0>
 8004b14:	e7f2      	b.n	8004afc <__sinit+0xc>
 8004b16:	bf00      	nop
 8004b18:	08004a5d 	.word	0x08004a5d
 8004b1c:	20000344 	.word	0x20000344

08004b20 <_fwalk_sglue>:
 8004b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	4607      	mov	r7, r0
 8004b26:	4688      	mov	r8, r1
 8004b28:	4614      	mov	r4, r2
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b30:	f1b9 0901 	subs.w	r9, r9, #1
 8004b34:	d505      	bpl.n	8004b42 <_fwalk_sglue+0x22>
 8004b36:	6824      	ldr	r4, [r4, #0]
 8004b38:	2c00      	cmp	r4, #0
 8004b3a:	d1f7      	bne.n	8004b2c <_fwalk_sglue+0xc>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b42:	89ab      	ldrh	r3, [r5, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d907      	bls.n	8004b58 <_fwalk_sglue+0x38>
 8004b48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	d003      	beq.n	8004b58 <_fwalk_sglue+0x38>
 8004b50:	4629      	mov	r1, r5
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c0      	blx	r8
 8004b56:	4306      	orrs	r6, r0
 8004b58:	3568      	adds	r5, #104	@ 0x68
 8004b5a:	e7e9      	b.n	8004b30 <_fwalk_sglue+0x10>

08004b5c <siprintf>:
 8004b5c:	b40e      	push	{r1, r2, r3}
 8004b5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b62:	b500      	push	{lr}
 8004b64:	b09c      	sub	sp, #112	@ 0x70
 8004b66:	ab1d      	add	r3, sp, #116	@ 0x74
 8004b68:	9002      	str	r0, [sp, #8]
 8004b6a:	9006      	str	r0, [sp, #24]
 8004b6c:	9107      	str	r1, [sp, #28]
 8004b6e:	9104      	str	r1, [sp, #16]
 8004b70:	4808      	ldr	r0, [pc, #32]	@ (8004b94 <siprintf+0x38>)
 8004b72:	4909      	ldr	r1, [pc, #36]	@ (8004b98 <siprintf+0x3c>)
 8004b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b78:	9105      	str	r1, [sp, #20]
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	a902      	add	r1, sp, #8
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	f002 fbb0 	bl	80072e4 <_svfiprintf_r>
 8004b84:	2200      	movs	r2, #0
 8004b86:	9b02      	ldr	r3, [sp, #8]
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	b01c      	add	sp, #112	@ 0x70
 8004b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b90:	b003      	add	sp, #12
 8004b92:	4770      	bx	lr
 8004b94:	2000002c 	.word	0x2000002c
 8004b98:	ffff0208 	.word	0xffff0208

08004b9c <__sread>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba4:	f000 f86c 	bl	8004c80 <_read_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	bfab      	itete	ge
 8004bac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bae:	89a3      	ldrhlt	r3, [r4, #12]
 8004bb0:	181b      	addge	r3, r3, r0
 8004bb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bb6:	bfac      	ite	ge
 8004bb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bba:	81a3      	strhlt	r3, [r4, #12]
 8004bbc:	bd10      	pop	{r4, pc}

08004bbe <__swrite>:
 8004bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	898b      	ldrh	r3, [r1, #12]
 8004bc6:	4605      	mov	r5, r0
 8004bc8:	05db      	lsls	r3, r3, #23
 8004bca:	460c      	mov	r4, r1
 8004bcc:	4616      	mov	r6, r2
 8004bce:	d505      	bpl.n	8004bdc <__swrite+0x1e>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd8:	f000 f840 	bl	8004c5c <_lseek_r>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	4632      	mov	r2, r6
 8004be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004be4:	81a3      	strh	r3, [r4, #12]
 8004be6:	4628      	mov	r0, r5
 8004be8:	463b      	mov	r3, r7
 8004bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf2:	f000 b857 	b.w	8004ca4 <_write_r>

08004bf6 <__sseek>:
 8004bf6:	b510      	push	{r4, lr}
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfe:	f000 f82d 	bl	8004c5c <_lseek_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	bf15      	itete	ne
 8004c08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c12:	81a3      	strheq	r3, [r4, #12]
 8004c14:	bf18      	it	ne
 8004c16:	81a3      	strhne	r3, [r4, #12]
 8004c18:	bd10      	pop	{r4, pc}

08004c1a <__sclose>:
 8004c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1e:	f000 b80d 	b.w	8004c3c <_close_r>

08004c22 <memset>:
 8004c22:	4603      	mov	r3, r0
 8004c24:	4402      	add	r2, r0
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d100      	bne.n	8004c2c <memset+0xa>
 8004c2a:	4770      	bx	lr
 8004c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004c30:	e7f9      	b.n	8004c26 <memset+0x4>
	...

08004c34 <_localeconv_r>:
 8004c34:	4800      	ldr	r0, [pc, #0]	@ (8004c38 <_localeconv_r+0x4>)
 8004c36:	4770      	bx	lr
 8004c38:	2000016c 	.word	0x2000016c

08004c3c <_close_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4d05      	ldr	r5, [pc, #20]	@ (8004c58 <_close_r+0x1c>)
 8004c42:	4604      	mov	r4, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	602b      	str	r3, [r5, #0]
 8004c48:	f7fc ffb5 	bl	8001bb6 <_close>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_close_r+0x1a>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_close_r+0x1a>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000348 	.word	0x20000348

08004c5c <_lseek_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4604      	mov	r4, r0
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	2200      	movs	r2, #0
 8004c66:	4d05      	ldr	r5, [pc, #20]	@ (8004c7c <_lseek_r+0x20>)
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fc ffc7 	bl	8001bfe <_lseek>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_lseek_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_lseek_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000348 	.word	0x20000348

08004c80 <_read_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	4611      	mov	r1, r2
 8004c88:	2200      	movs	r2, #0
 8004c8a:	4d05      	ldr	r5, [pc, #20]	@ (8004ca0 <_read_r+0x20>)
 8004c8c:	602a      	str	r2, [r5, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	f7fc ff58 	bl	8001b44 <_read>
 8004c94:	1c43      	adds	r3, r0, #1
 8004c96:	d102      	bne.n	8004c9e <_read_r+0x1e>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	b103      	cbz	r3, 8004c9e <_read_r+0x1e>
 8004c9c:	6023      	str	r3, [r4, #0]
 8004c9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ca0:	20000348 	.word	0x20000348

08004ca4 <_write_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	2200      	movs	r2, #0
 8004cae:	4d05      	ldr	r5, [pc, #20]	@ (8004cc4 <_write_r+0x20>)
 8004cb0:	602a      	str	r2, [r5, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7fc ff63 	bl	8001b7e <_write>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d102      	bne.n	8004cc2 <_write_r+0x1e>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	b103      	cbz	r3, 8004cc2 <_write_r+0x1e>
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	bd38      	pop	{r3, r4, r5, pc}
 8004cc4:	20000348 	.word	0x20000348

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	@ (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	2000002c 	.word	0x2000002c

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	2600      	movs	r6, #0
 8004cd8:	4d0c      	ldr	r5, [pc, #48]	@ (8004d0c <__libc_init_array+0x38>)
 8004cda:	4c0d      	ldr	r4, [pc, #52]	@ (8004d10 <__libc_init_array+0x3c>)
 8004cdc:	1b64      	subs	r4, r4, r5
 8004cde:	10a4      	asrs	r4, r4, #2
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	f003 fb66 	bl	80083b4 <_init>
 8004ce8:	2600      	movs	r6, #0
 8004cea:	4d0a      	ldr	r5, [pc, #40]	@ (8004d14 <__libc_init_array+0x40>)
 8004cec:	4c0a      	ldr	r4, [pc, #40]	@ (8004d18 <__libc_init_array+0x44>)
 8004cee:	1b64      	subs	r4, r4, r5
 8004cf0:	10a4      	asrs	r4, r4, #2
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08008ab0 	.word	0x08008ab0
 8004d10:	08008ab0 	.word	0x08008ab0
 8004d14:	08008ab0 	.word	0x08008ab0
 8004d18:	08008ab4 	.word	0x08008ab4

08004d1c <__retarget_lock_init_recursive>:
 8004d1c:	4770      	bx	lr

08004d1e <__retarget_lock_acquire_recursive>:
 8004d1e:	4770      	bx	lr

08004d20 <__retarget_lock_release_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <memchr>:
 8004d22:	4603      	mov	r3, r0
 8004d24:	b510      	push	{r4, lr}
 8004d26:	b2c9      	uxtb	r1, r1
 8004d28:	4402      	add	r2, r0
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	d101      	bne.n	8004d34 <memchr+0x12>
 8004d30:	2000      	movs	r0, #0
 8004d32:	e003      	b.n	8004d3c <memchr+0x1a>
 8004d34:	7804      	ldrb	r4, [r0, #0]
 8004d36:	3301      	adds	r3, #1
 8004d38:	428c      	cmp	r4, r1
 8004d3a:	d1f6      	bne.n	8004d2a <memchr+0x8>
 8004d3c:	bd10      	pop	{r4, pc}
	...

08004d40 <nanf>:
 8004d40:	4800      	ldr	r0, [pc, #0]	@ (8004d44 <nanf+0x4>)
 8004d42:	4770      	bx	lr
 8004d44:	7fc00000 	.word	0x7fc00000

08004d48 <quorem>:
 8004d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	6903      	ldr	r3, [r0, #16]
 8004d4e:	690c      	ldr	r4, [r1, #16]
 8004d50:	4607      	mov	r7, r0
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	db7e      	blt.n	8004e54 <quorem+0x10c>
 8004d56:	3c01      	subs	r4, #1
 8004d58:	00a3      	lsls	r3, r4, #2
 8004d5a:	f100 0514 	add.w	r5, r0, #20
 8004d5e:	f101 0814 	add.w	r8, r1, #20
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d68:	9301      	str	r3, [sp, #4]
 8004d6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d72:	3301      	adds	r3, #1
 8004d74:	429a      	cmp	r2, r3
 8004d76:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d7e:	d32e      	bcc.n	8004dde <quorem+0x96>
 8004d80:	f04f 0a00 	mov.w	sl, #0
 8004d84:	46c4      	mov	ip, r8
 8004d86:	46ae      	mov	lr, r5
 8004d88:	46d3      	mov	fp, sl
 8004d8a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d8e:	b298      	uxth	r0, r3
 8004d90:	fb06 a000 	mla	r0, r6, r0, sl
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	0c02      	lsrs	r2, r0, #16
 8004d98:	fb06 2303 	mla	r3, r6, r3, r2
 8004d9c:	f8de 2000 	ldr.w	r2, [lr]
 8004da0:	b280      	uxth	r0, r0
 8004da2:	b292      	uxth	r2, r2
 8004da4:	1a12      	subs	r2, r2, r0
 8004da6:	445a      	add	r2, fp
 8004da8:	f8de 0000 	ldr.w	r0, [lr]
 8004dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004db6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004dba:	b292      	uxth	r2, r2
 8004dbc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004dc0:	45e1      	cmp	r9, ip
 8004dc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004dc6:	f84e 2b04 	str.w	r2, [lr], #4
 8004dca:	d2de      	bcs.n	8004d8a <quorem+0x42>
 8004dcc:	9b00      	ldr	r3, [sp, #0]
 8004dce:	58eb      	ldr	r3, [r5, r3]
 8004dd0:	b92b      	cbnz	r3, 8004dde <quorem+0x96>
 8004dd2:	9b01      	ldr	r3, [sp, #4]
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	429d      	cmp	r5, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	d32f      	bcc.n	8004e3c <quorem+0xf4>
 8004ddc:	613c      	str	r4, [r7, #16]
 8004dde:	4638      	mov	r0, r7
 8004de0:	f001 f9c2 	bl	8006168 <__mcmp>
 8004de4:	2800      	cmp	r0, #0
 8004de6:	db25      	blt.n	8004e34 <quorem+0xec>
 8004de8:	4629      	mov	r1, r5
 8004dea:	2000      	movs	r0, #0
 8004dec:	f858 2b04 	ldr.w	r2, [r8], #4
 8004df0:	f8d1 c000 	ldr.w	ip, [r1]
 8004df4:	fa1f fe82 	uxth.w	lr, r2
 8004df8:	fa1f f38c 	uxth.w	r3, ip
 8004dfc:	eba3 030e 	sub.w	r3, r3, lr
 8004e00:	4403      	add	r3, r0
 8004e02:	0c12      	lsrs	r2, r2, #16
 8004e04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e12:	45c1      	cmp	r9, r8
 8004e14:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e18:	f841 3b04 	str.w	r3, [r1], #4
 8004e1c:	d2e6      	bcs.n	8004dec <quorem+0xa4>
 8004e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e26:	b922      	cbnz	r2, 8004e32 <quorem+0xea>
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	429d      	cmp	r5, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	d30b      	bcc.n	8004e48 <quorem+0x100>
 8004e30:	613c      	str	r4, [r7, #16]
 8004e32:	3601      	adds	r6, #1
 8004e34:	4630      	mov	r0, r6
 8004e36:	b003      	add	sp, #12
 8004e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	3b04      	subs	r3, #4
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d1cb      	bne.n	8004ddc <quorem+0x94>
 8004e44:	3c01      	subs	r4, #1
 8004e46:	e7c6      	b.n	8004dd6 <quorem+0x8e>
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	3b04      	subs	r3, #4
 8004e4c:	2a00      	cmp	r2, #0
 8004e4e:	d1ef      	bne.n	8004e30 <quorem+0xe8>
 8004e50:	3c01      	subs	r4, #1
 8004e52:	e7ea      	b.n	8004e2a <quorem+0xe2>
 8004e54:	2000      	movs	r0, #0
 8004e56:	e7ee      	b.n	8004e36 <quorem+0xee>

08004e58 <_dtoa_r>:
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	461d      	mov	r5, r3
 8004e60:	69c7      	ldr	r7, [r0, #28]
 8004e62:	b097      	sub	sp, #92	@ 0x5c
 8004e64:	4683      	mov	fp, r0
 8004e66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004e6a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004e6c:	b97f      	cbnz	r7, 8004e8e <_dtoa_r+0x36>
 8004e6e:	2010      	movs	r0, #16
 8004e70:	f000 fe02 	bl	8005a78 <malloc>
 8004e74:	4602      	mov	r2, r0
 8004e76:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e7a:	b920      	cbnz	r0, 8004e86 <_dtoa_r+0x2e>
 8004e7c:	21ef      	movs	r1, #239	@ 0xef
 8004e7e:	4ba8      	ldr	r3, [pc, #672]	@ (8005120 <_dtoa_r+0x2c8>)
 8004e80:	48a8      	ldr	r0, [pc, #672]	@ (8005124 <_dtoa_r+0x2cc>)
 8004e82:	f002 fc23 	bl	80076cc <__assert_func>
 8004e86:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e8a:	6007      	str	r7, [r0, #0]
 8004e8c:	60c7      	str	r7, [r0, #12]
 8004e8e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	b159      	cbz	r1, 8004eae <_dtoa_r+0x56>
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	2301      	movs	r3, #1
 8004e9a:	4093      	lsls	r3, r2
 8004e9c:	604a      	str	r2, [r1, #4]
 8004e9e:	608b      	str	r3, [r1, #8]
 8004ea0:	4658      	mov	r0, fp
 8004ea2:	f000 fedf 	bl	8005c64 <_Bfree>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	1e2b      	subs	r3, r5, #0
 8004eb0:	bfaf      	iteee	ge
 8004eb2:	2300      	movge	r3, #0
 8004eb4:	2201      	movlt	r2, #1
 8004eb6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004eba:	9303      	strlt	r3, [sp, #12]
 8004ebc:	bfa8      	it	ge
 8004ebe:	6033      	strge	r3, [r6, #0]
 8004ec0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ec4:	4b98      	ldr	r3, [pc, #608]	@ (8005128 <_dtoa_r+0x2d0>)
 8004ec6:	bfb8      	it	lt
 8004ec8:	6032      	strlt	r2, [r6, #0]
 8004eca:	ea33 0308 	bics.w	r3, r3, r8
 8004ece:	d112      	bne.n	8004ef6 <_dtoa_r+0x9e>
 8004ed0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ed4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004edc:	4323      	orrs	r3, r4
 8004ede:	f000 8550 	beq.w	8005982 <_dtoa_r+0xb2a>
 8004ee2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ee4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800512c <_dtoa_r+0x2d4>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8552 	beq.w	8005992 <_dtoa_r+0xb3a>
 8004eee:	f10a 0303 	add.w	r3, sl, #3
 8004ef2:	f000 bd4c 	b.w	800598e <_dtoa_r+0xb36>
 8004ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004efa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f02:	2200      	movs	r2, #0
 8004f04:	2300      	movs	r3, #0
 8004f06:	f7fb fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	b158      	cbz	r0, 8004f26 <_dtoa_r+0xce>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f16:	b113      	cbz	r3, 8004f1e <_dtoa_r+0xc6>
 8004f18:	4b85      	ldr	r3, [pc, #532]	@ (8005130 <_dtoa_r+0x2d8>)
 8004f1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005134 <_dtoa_r+0x2dc>
 8004f22:	f000 bd36 	b.w	8005992 <_dtoa_r+0xb3a>
 8004f26:	ab14      	add	r3, sp, #80	@ 0x50
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	ab15      	add	r3, sp, #84	@ 0x54
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	4658      	mov	r0, fp
 8004f30:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f34:	f001 fa30 	bl	8006398 <__d2b>
 8004f38:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f3c:	4681      	mov	r9, r0
 8004f3e:	2e00      	cmp	r6, #0
 8004f40:	d077      	beq.n	8005032 <_dtoa_r+0x1da>
 8004f42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f48:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f50:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f54:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f58:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	4b76      	ldr	r3, [pc, #472]	@ (8005138 <_dtoa_r+0x2e0>)
 8004f60:	f7fb f902 	bl	8000168 <__aeabi_dsub>
 8004f64:	a368      	add	r3, pc, #416	@ (adr r3, 8005108 <_dtoa_r+0x2b0>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb fab5 	bl	80004d8 <__aeabi_dmul>
 8004f6e:	a368      	add	r3, pc, #416	@ (adr r3, 8005110 <_dtoa_r+0x2b8>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f7fb f8fa 	bl	800016c <__adddf3>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	f7fb fa41 	bl	8000404 <__aeabi_i2d>
 8004f82:	a365      	add	r3, pc, #404	@ (adr r3, 8005118 <_dtoa_r+0x2c0>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f7fb faa6 	bl	80004d8 <__aeabi_dmul>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb f8ea 	bl	800016c <__adddf3>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	460d      	mov	r5, r1
 8004f9c:	f7fb fd4c 	bl	8000a38 <__aeabi_d2iz>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb fd07 	bl	80009bc <__aeabi_dcmplt>
 8004fae:	b140      	cbz	r0, 8004fc2 <_dtoa_r+0x16a>
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	f7fb fa27 	bl	8000404 <__aeabi_i2d>
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	462b      	mov	r3, r5
 8004fba:	f7fb fcf5 	bl	80009a8 <__aeabi_dcmpeq>
 8004fbe:	b900      	cbnz	r0, 8004fc2 <_dtoa_r+0x16a>
 8004fc0:	3f01      	subs	r7, #1
 8004fc2:	2f16      	cmp	r7, #22
 8004fc4:	d853      	bhi.n	800506e <_dtoa_r+0x216>
 8004fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fca:	4b5c      	ldr	r3, [pc, #368]	@ (800513c <_dtoa_r+0x2e4>)
 8004fcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fcf2 	bl	80009bc <__aeabi_dcmplt>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d04a      	beq.n	8005072 <_dtoa_r+0x21a>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	3f01      	subs	r7, #1
 8004fe0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fe2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	1e5a      	subs	r2, r3, #1
 8004fe8:	bf46      	itte	mi
 8004fea:	f1c3 0801 	rsbmi	r8, r3, #1
 8004fee:	2300      	movmi	r3, #0
 8004ff0:	f04f 0800 	movpl.w	r8, #0
 8004ff4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ff6:	bf48      	it	mi
 8004ff8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004ffa:	2f00      	cmp	r7, #0
 8004ffc:	db3b      	blt.n	8005076 <_dtoa_r+0x21e>
 8004ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005000:	970e      	str	r7, [sp, #56]	@ 0x38
 8005002:	443b      	add	r3, r7
 8005004:	9309      	str	r3, [sp, #36]	@ 0x24
 8005006:	2300      	movs	r3, #0
 8005008:	930a      	str	r3, [sp, #40]	@ 0x28
 800500a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800500c:	2b09      	cmp	r3, #9
 800500e:	d866      	bhi.n	80050de <_dtoa_r+0x286>
 8005010:	2b05      	cmp	r3, #5
 8005012:	bfc4      	itt	gt
 8005014:	3b04      	subgt	r3, #4
 8005016:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005018:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800501a:	bfc8      	it	gt
 800501c:	2400      	movgt	r4, #0
 800501e:	f1a3 0302 	sub.w	r3, r3, #2
 8005022:	bfd8      	it	le
 8005024:	2401      	movle	r4, #1
 8005026:	2b03      	cmp	r3, #3
 8005028:	d864      	bhi.n	80050f4 <_dtoa_r+0x29c>
 800502a:	e8df f003 	tbb	[pc, r3]
 800502e:	382b      	.short	0x382b
 8005030:	5636      	.short	0x5636
 8005032:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005036:	441e      	add	r6, r3
 8005038:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800503c:	2b20      	cmp	r3, #32
 800503e:	bfc1      	itttt	gt
 8005040:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005044:	fa08 f803 	lslgt.w	r8, r8, r3
 8005048:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800504c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005050:	bfd6      	itet	le
 8005052:	f1c3 0320 	rsble	r3, r3, #32
 8005056:	ea48 0003 	orrgt.w	r0, r8, r3
 800505a:	fa04 f003 	lslle.w	r0, r4, r3
 800505e:	f7fb f9c1 	bl	80003e4 <__aeabi_ui2d>
 8005062:	2201      	movs	r2, #1
 8005064:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005068:	3e01      	subs	r6, #1
 800506a:	9212      	str	r2, [sp, #72]	@ 0x48
 800506c:	e775      	b.n	8004f5a <_dtoa_r+0x102>
 800506e:	2301      	movs	r3, #1
 8005070:	e7b6      	b.n	8004fe0 <_dtoa_r+0x188>
 8005072:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005074:	e7b5      	b.n	8004fe2 <_dtoa_r+0x18a>
 8005076:	427b      	negs	r3, r7
 8005078:	930a      	str	r3, [sp, #40]	@ 0x28
 800507a:	2300      	movs	r3, #0
 800507c:	eba8 0807 	sub.w	r8, r8, r7
 8005080:	930e      	str	r3, [sp, #56]	@ 0x38
 8005082:	e7c2      	b.n	800500a <_dtoa_r+0x1b2>
 8005084:	2300      	movs	r3, #0
 8005086:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005088:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800508a:	2b00      	cmp	r3, #0
 800508c:	dc35      	bgt.n	80050fa <_dtoa_r+0x2a2>
 800508e:	2301      	movs	r3, #1
 8005090:	461a      	mov	r2, r3
 8005092:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005096:	9221      	str	r2, [sp, #132]	@ 0x84
 8005098:	e00b      	b.n	80050b2 <_dtoa_r+0x25a>
 800509a:	2301      	movs	r3, #1
 800509c:	e7f3      	b.n	8005086 <_dtoa_r+0x22e>
 800509e:	2300      	movs	r3, #0
 80050a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	9308      	str	r3, [sp, #32]
 80050a8:	3301      	adds	r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	9307      	str	r3, [sp, #28]
 80050ae:	bfb8      	it	lt
 80050b0:	2301      	movlt	r3, #1
 80050b2:	2100      	movs	r1, #0
 80050b4:	2204      	movs	r2, #4
 80050b6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80050ba:	f102 0514 	add.w	r5, r2, #20
 80050be:	429d      	cmp	r5, r3
 80050c0:	d91f      	bls.n	8005102 <_dtoa_r+0x2aa>
 80050c2:	6041      	str	r1, [r0, #4]
 80050c4:	4658      	mov	r0, fp
 80050c6:	f000 fd8d 	bl	8005be4 <_Balloc>
 80050ca:	4682      	mov	sl, r0
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d139      	bne.n	8005144 <_dtoa_r+0x2ec>
 80050d0:	4602      	mov	r2, r0
 80050d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80050d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <_dtoa_r+0x2e8>)
 80050d8:	e6d2      	b.n	8004e80 <_dtoa_r+0x28>
 80050da:	2301      	movs	r3, #1
 80050dc:	e7e0      	b.n	80050a0 <_dtoa_r+0x248>
 80050de:	2401      	movs	r4, #1
 80050e0:	2300      	movs	r3, #0
 80050e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050e4:	9320      	str	r3, [sp, #128]	@ 0x80
 80050e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ea:	2200      	movs	r2, #0
 80050ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050f0:	2312      	movs	r3, #18
 80050f2:	e7d0      	b.n	8005096 <_dtoa_r+0x23e>
 80050f4:	2301      	movs	r3, #1
 80050f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050f8:	e7f5      	b.n	80050e6 <_dtoa_r+0x28e>
 80050fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005100:	e7d7      	b.n	80050b2 <_dtoa_r+0x25a>
 8005102:	3101      	adds	r1, #1
 8005104:	0052      	lsls	r2, r2, #1
 8005106:	e7d8      	b.n	80050ba <_dtoa_r+0x262>
 8005108:	636f4361 	.word	0x636f4361
 800510c:	3fd287a7 	.word	0x3fd287a7
 8005110:	8b60c8b3 	.word	0x8b60c8b3
 8005114:	3fc68a28 	.word	0x3fc68a28
 8005118:	509f79fb 	.word	0x509f79fb
 800511c:	3fd34413 	.word	0x3fd34413
 8005120:	080086be 	.word	0x080086be
 8005124:	080086d5 	.word	0x080086d5
 8005128:	7ff00000 	.word	0x7ff00000
 800512c:	080086ba 	.word	0x080086ba
 8005130:	08008689 	.word	0x08008689
 8005134:	08008688 	.word	0x08008688
 8005138:	3ff80000 	.word	0x3ff80000
 800513c:	080087d0 	.word	0x080087d0
 8005140:	0800872d 	.word	0x0800872d
 8005144:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005148:	6018      	str	r0, [r3, #0]
 800514a:	9b07      	ldr	r3, [sp, #28]
 800514c:	2b0e      	cmp	r3, #14
 800514e:	f200 80a4 	bhi.w	800529a <_dtoa_r+0x442>
 8005152:	2c00      	cmp	r4, #0
 8005154:	f000 80a1 	beq.w	800529a <_dtoa_r+0x442>
 8005158:	2f00      	cmp	r7, #0
 800515a:	dd33      	ble.n	80051c4 <_dtoa_r+0x36c>
 800515c:	4b86      	ldr	r3, [pc, #536]	@ (8005378 <_dtoa_r+0x520>)
 800515e:	f007 020f 	and.w	r2, r7, #15
 8005162:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005166:	05f8      	lsls	r0, r7, #23
 8005168:	e9d3 3400 	ldrd	r3, r4, [r3]
 800516c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005170:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005174:	d516      	bpl.n	80051a4 <_dtoa_r+0x34c>
 8005176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800517a:	4b80      	ldr	r3, [pc, #512]	@ (800537c <_dtoa_r+0x524>)
 800517c:	2603      	movs	r6, #3
 800517e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005182:	f7fb fad3 	bl	800072c <__aeabi_ddiv>
 8005186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800518a:	f004 040f 	and.w	r4, r4, #15
 800518e:	4d7b      	ldr	r5, [pc, #492]	@ (800537c <_dtoa_r+0x524>)
 8005190:	b954      	cbnz	r4, 80051a8 <_dtoa_r+0x350>
 8005192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800519a:	f7fb fac7 	bl	800072c <__aeabi_ddiv>
 800519e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051a2:	e028      	b.n	80051f6 <_dtoa_r+0x39e>
 80051a4:	2602      	movs	r6, #2
 80051a6:	e7f2      	b.n	800518e <_dtoa_r+0x336>
 80051a8:	07e1      	lsls	r1, r4, #31
 80051aa:	d508      	bpl.n	80051be <_dtoa_r+0x366>
 80051ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051b4:	f7fb f990 	bl	80004d8 <__aeabi_dmul>
 80051b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051bc:	3601      	adds	r6, #1
 80051be:	1064      	asrs	r4, r4, #1
 80051c0:	3508      	adds	r5, #8
 80051c2:	e7e5      	b.n	8005190 <_dtoa_r+0x338>
 80051c4:	f000 80d2 	beq.w	800536c <_dtoa_r+0x514>
 80051c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051cc:	427c      	negs	r4, r7
 80051ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005378 <_dtoa_r+0x520>)
 80051d0:	f004 020f 	and.w	r2, r4, #15
 80051d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	f7fb f97c 	bl	80004d8 <__aeabi_dmul>
 80051e0:	2602      	movs	r6, #2
 80051e2:	2300      	movs	r3, #0
 80051e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051e8:	4d64      	ldr	r5, [pc, #400]	@ (800537c <_dtoa_r+0x524>)
 80051ea:	1124      	asrs	r4, r4, #4
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	f040 80b2 	bne.w	8005356 <_dtoa_r+0x4fe>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1d3      	bne.n	800519e <_dtoa_r+0x346>
 80051f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80b7 	beq.w	8005370 <_dtoa_r+0x518>
 8005202:	2200      	movs	r2, #0
 8005204:	4620      	mov	r0, r4
 8005206:	4629      	mov	r1, r5
 8005208:	4b5d      	ldr	r3, [pc, #372]	@ (8005380 <_dtoa_r+0x528>)
 800520a:	f7fb fbd7 	bl	80009bc <__aeabi_dcmplt>
 800520e:	2800      	cmp	r0, #0
 8005210:	f000 80ae 	beq.w	8005370 <_dtoa_r+0x518>
 8005214:	9b07      	ldr	r3, [sp, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80aa 	beq.w	8005370 <_dtoa_r+0x518>
 800521c:	9b08      	ldr	r3, [sp, #32]
 800521e:	2b00      	cmp	r3, #0
 8005220:	dd37      	ble.n	8005292 <_dtoa_r+0x43a>
 8005222:	1e7b      	subs	r3, r7, #1
 8005224:	4620      	mov	r0, r4
 8005226:	9304      	str	r3, [sp, #16]
 8005228:	2200      	movs	r2, #0
 800522a:	4629      	mov	r1, r5
 800522c:	4b55      	ldr	r3, [pc, #340]	@ (8005384 <_dtoa_r+0x52c>)
 800522e:	f7fb f953 	bl	80004d8 <__aeabi_dmul>
 8005232:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005236:	9c08      	ldr	r4, [sp, #32]
 8005238:	3601      	adds	r6, #1
 800523a:	4630      	mov	r0, r6
 800523c:	f7fb f8e2 	bl	8000404 <__aeabi_i2d>
 8005240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005244:	f7fb f948 	bl	80004d8 <__aeabi_dmul>
 8005248:	2200      	movs	r2, #0
 800524a:	4b4f      	ldr	r3, [pc, #316]	@ (8005388 <_dtoa_r+0x530>)
 800524c:	f7fa ff8e 	bl	800016c <__adddf3>
 8005250:	4605      	mov	r5, r0
 8005252:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005256:	2c00      	cmp	r4, #0
 8005258:	f040 809a 	bne.w	8005390 <_dtoa_r+0x538>
 800525c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	4b4a      	ldr	r3, [pc, #296]	@ (800538c <_dtoa_r+0x534>)
 8005264:	f7fa ff80 	bl	8000168 <__aeabi_dsub>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005270:	462a      	mov	r2, r5
 8005272:	4633      	mov	r3, r6
 8005274:	f7fb fbc0 	bl	80009f8 <__aeabi_dcmpgt>
 8005278:	2800      	cmp	r0, #0
 800527a:	f040 828e 	bne.w	800579a <_dtoa_r+0x942>
 800527e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005282:	462a      	mov	r2, r5
 8005284:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005288:	f7fb fb98 	bl	80009bc <__aeabi_dcmplt>
 800528c:	2800      	cmp	r0, #0
 800528e:	f040 8127 	bne.w	80054e0 <_dtoa_r+0x688>
 8005292:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005296:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800529a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800529c:	2b00      	cmp	r3, #0
 800529e:	f2c0 8163 	blt.w	8005568 <_dtoa_r+0x710>
 80052a2:	2f0e      	cmp	r7, #14
 80052a4:	f300 8160 	bgt.w	8005568 <_dtoa_r+0x710>
 80052a8:	4b33      	ldr	r3, [pc, #204]	@ (8005378 <_dtoa_r+0x520>)
 80052aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	da03      	bge.n	80052c4 <_dtoa_r+0x46c>
 80052bc:	9b07      	ldr	r3, [sp, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f340 8100 	ble.w	80054c4 <_dtoa_r+0x66c>
 80052c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052c8:	4656      	mov	r6, sl
 80052ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052ce:	4620      	mov	r0, r4
 80052d0:	4629      	mov	r1, r5
 80052d2:	f7fb fa2b 	bl	800072c <__aeabi_ddiv>
 80052d6:	f7fb fbaf 	bl	8000a38 <__aeabi_d2iz>
 80052da:	4680      	mov	r8, r0
 80052dc:	f7fb f892 	bl	8000404 <__aeabi_i2d>
 80052e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052e4:	f7fb f8f8 	bl	80004d8 <__aeabi_dmul>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4620      	mov	r0, r4
 80052ee:	4629      	mov	r1, r5
 80052f0:	f7fa ff3a 	bl	8000168 <__aeabi_dsub>
 80052f4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80052f8:	9d07      	ldr	r5, [sp, #28]
 80052fa:	f806 4b01 	strb.w	r4, [r6], #1
 80052fe:	eba6 040a 	sub.w	r4, r6, sl
 8005302:	42a5      	cmp	r5, r4
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	f040 8116 	bne.w	8005538 <_dtoa_r+0x6e0>
 800530c:	f7fa ff2e 	bl	800016c <__adddf3>
 8005310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	f7fb fb6e 	bl	80009f8 <__aeabi_dcmpgt>
 800531c:	2800      	cmp	r0, #0
 800531e:	f040 80f8 	bne.w	8005512 <_dtoa_r+0x6ba>
 8005322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005326:	4620      	mov	r0, r4
 8005328:	4629      	mov	r1, r5
 800532a:	f7fb fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800532e:	b118      	cbz	r0, 8005338 <_dtoa_r+0x4e0>
 8005330:	f018 0f01 	tst.w	r8, #1
 8005334:	f040 80ed 	bne.w	8005512 <_dtoa_r+0x6ba>
 8005338:	4649      	mov	r1, r9
 800533a:	4658      	mov	r0, fp
 800533c:	f000 fc92 	bl	8005c64 <_Bfree>
 8005340:	2300      	movs	r3, #0
 8005342:	7033      	strb	r3, [r6, #0]
 8005344:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005346:	3701      	adds	r7, #1
 8005348:	601f      	str	r7, [r3, #0]
 800534a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8320 	beq.w	8005992 <_dtoa_r+0xb3a>
 8005352:	601e      	str	r6, [r3, #0]
 8005354:	e31d      	b.n	8005992 <_dtoa_r+0xb3a>
 8005356:	07e2      	lsls	r2, r4, #31
 8005358:	d505      	bpl.n	8005366 <_dtoa_r+0x50e>
 800535a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800535e:	f7fb f8bb 	bl	80004d8 <__aeabi_dmul>
 8005362:	2301      	movs	r3, #1
 8005364:	3601      	adds	r6, #1
 8005366:	1064      	asrs	r4, r4, #1
 8005368:	3508      	adds	r5, #8
 800536a:	e73f      	b.n	80051ec <_dtoa_r+0x394>
 800536c:	2602      	movs	r6, #2
 800536e:	e742      	b.n	80051f6 <_dtoa_r+0x39e>
 8005370:	9c07      	ldr	r4, [sp, #28]
 8005372:	9704      	str	r7, [sp, #16]
 8005374:	e761      	b.n	800523a <_dtoa_r+0x3e2>
 8005376:	bf00      	nop
 8005378:	080087d0 	.word	0x080087d0
 800537c:	080087a8 	.word	0x080087a8
 8005380:	3ff00000 	.word	0x3ff00000
 8005384:	40240000 	.word	0x40240000
 8005388:	401c0000 	.word	0x401c0000
 800538c:	40140000 	.word	0x40140000
 8005390:	4b70      	ldr	r3, [pc, #448]	@ (8005554 <_dtoa_r+0x6fc>)
 8005392:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005398:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800539c:	4454      	add	r4, sl
 800539e:	2900      	cmp	r1, #0
 80053a0:	d045      	beq.n	800542e <_dtoa_r+0x5d6>
 80053a2:	2000      	movs	r0, #0
 80053a4:	496c      	ldr	r1, [pc, #432]	@ (8005558 <_dtoa_r+0x700>)
 80053a6:	f7fb f9c1 	bl	800072c <__aeabi_ddiv>
 80053aa:	4633      	mov	r3, r6
 80053ac:	462a      	mov	r2, r5
 80053ae:	f7fa fedb 	bl	8000168 <__aeabi_dsub>
 80053b2:	4656      	mov	r6, sl
 80053b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053bc:	f7fb fb3c 	bl	8000a38 <__aeabi_d2iz>
 80053c0:	4605      	mov	r5, r0
 80053c2:	f7fb f81f 	bl	8000404 <__aeabi_i2d>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ce:	f7fa fecb 	bl	8000168 <__aeabi_dsub>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	3530      	adds	r5, #48	@ 0x30
 80053d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053e0:	f806 5b01 	strb.w	r5, [r6], #1
 80053e4:	f7fb faea 	bl	80009bc <__aeabi_dcmplt>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d163      	bne.n	80054b4 <_dtoa_r+0x65c>
 80053ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053f0:	2000      	movs	r0, #0
 80053f2:	495a      	ldr	r1, [pc, #360]	@ (800555c <_dtoa_r+0x704>)
 80053f4:	f7fa feb8 	bl	8000168 <__aeabi_dsub>
 80053f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053fc:	f7fb fade 	bl	80009bc <__aeabi_dcmplt>
 8005400:	2800      	cmp	r0, #0
 8005402:	f040 8087 	bne.w	8005514 <_dtoa_r+0x6bc>
 8005406:	42a6      	cmp	r6, r4
 8005408:	f43f af43 	beq.w	8005292 <_dtoa_r+0x43a>
 800540c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005410:	2200      	movs	r2, #0
 8005412:	4b53      	ldr	r3, [pc, #332]	@ (8005560 <_dtoa_r+0x708>)
 8005414:	f7fb f860 	bl	80004d8 <__aeabi_dmul>
 8005418:	2200      	movs	r2, #0
 800541a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800541e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005422:	4b4f      	ldr	r3, [pc, #316]	@ (8005560 <_dtoa_r+0x708>)
 8005424:	f7fb f858 	bl	80004d8 <__aeabi_dmul>
 8005428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800542c:	e7c4      	b.n	80053b8 <_dtoa_r+0x560>
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	f7fb f851 	bl	80004d8 <__aeabi_dmul>
 8005436:	4656      	mov	r6, sl
 8005438:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800543c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800543e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005442:	f7fb faf9 	bl	8000a38 <__aeabi_d2iz>
 8005446:	4605      	mov	r5, r0
 8005448:	f7fa ffdc 	bl	8000404 <__aeabi_i2d>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005454:	f7fa fe88 	bl	8000168 <__aeabi_dsub>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	3530      	adds	r5, #48	@ 0x30
 800545e:	f806 5b01 	strb.w	r5, [r6], #1
 8005462:	42a6      	cmp	r6, r4
 8005464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	d124      	bne.n	80054b8 <_dtoa_r+0x660>
 800546e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005472:	4b39      	ldr	r3, [pc, #228]	@ (8005558 <_dtoa_r+0x700>)
 8005474:	f7fa fe7a 	bl	800016c <__adddf3>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005480:	f7fb faba 	bl	80009f8 <__aeabi_dcmpgt>
 8005484:	2800      	cmp	r0, #0
 8005486:	d145      	bne.n	8005514 <_dtoa_r+0x6bc>
 8005488:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800548c:	2000      	movs	r0, #0
 800548e:	4932      	ldr	r1, [pc, #200]	@ (8005558 <_dtoa_r+0x700>)
 8005490:	f7fa fe6a 	bl	8000168 <__aeabi_dsub>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800549c:	f7fb fa8e 	bl	80009bc <__aeabi_dcmplt>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	f43f aef6 	beq.w	8005292 <_dtoa_r+0x43a>
 80054a6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054a8:	1e73      	subs	r3, r6, #1
 80054aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054b0:	2b30      	cmp	r3, #48	@ 0x30
 80054b2:	d0f8      	beq.n	80054a6 <_dtoa_r+0x64e>
 80054b4:	9f04      	ldr	r7, [sp, #16]
 80054b6:	e73f      	b.n	8005338 <_dtoa_r+0x4e0>
 80054b8:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <_dtoa_r+0x708>)
 80054ba:	f7fb f80d 	bl	80004d8 <__aeabi_dmul>
 80054be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054c2:	e7bc      	b.n	800543e <_dtoa_r+0x5e6>
 80054c4:	d10c      	bne.n	80054e0 <_dtoa_r+0x688>
 80054c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ca:	2200      	movs	r2, #0
 80054cc:	4b25      	ldr	r3, [pc, #148]	@ (8005564 <_dtoa_r+0x70c>)
 80054ce:	f7fb f803 	bl	80004d8 <__aeabi_dmul>
 80054d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054d6:	f7fb fa85 	bl	80009e4 <__aeabi_dcmpge>
 80054da:	2800      	cmp	r0, #0
 80054dc:	f000 815b 	beq.w	8005796 <_dtoa_r+0x93e>
 80054e0:	2400      	movs	r4, #0
 80054e2:	4625      	mov	r5, r4
 80054e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054e6:	4656      	mov	r6, sl
 80054e8:	43db      	mvns	r3, r3
 80054ea:	9304      	str	r3, [sp, #16]
 80054ec:	2700      	movs	r7, #0
 80054ee:	4621      	mov	r1, r4
 80054f0:	4658      	mov	r0, fp
 80054f2:	f000 fbb7 	bl	8005c64 <_Bfree>
 80054f6:	2d00      	cmp	r5, #0
 80054f8:	d0dc      	beq.n	80054b4 <_dtoa_r+0x65c>
 80054fa:	b12f      	cbz	r7, 8005508 <_dtoa_r+0x6b0>
 80054fc:	42af      	cmp	r7, r5
 80054fe:	d003      	beq.n	8005508 <_dtoa_r+0x6b0>
 8005500:	4639      	mov	r1, r7
 8005502:	4658      	mov	r0, fp
 8005504:	f000 fbae 	bl	8005c64 <_Bfree>
 8005508:	4629      	mov	r1, r5
 800550a:	4658      	mov	r0, fp
 800550c:	f000 fbaa 	bl	8005c64 <_Bfree>
 8005510:	e7d0      	b.n	80054b4 <_dtoa_r+0x65c>
 8005512:	9704      	str	r7, [sp, #16]
 8005514:	4633      	mov	r3, r6
 8005516:	461e      	mov	r6, r3
 8005518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800551c:	2a39      	cmp	r2, #57	@ 0x39
 800551e:	d107      	bne.n	8005530 <_dtoa_r+0x6d8>
 8005520:	459a      	cmp	sl, r3
 8005522:	d1f8      	bne.n	8005516 <_dtoa_r+0x6be>
 8005524:	9a04      	ldr	r2, [sp, #16]
 8005526:	3201      	adds	r2, #1
 8005528:	9204      	str	r2, [sp, #16]
 800552a:	2230      	movs	r2, #48	@ 0x30
 800552c:	f88a 2000 	strb.w	r2, [sl]
 8005530:	781a      	ldrb	r2, [r3, #0]
 8005532:	3201      	adds	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e7bd      	b.n	80054b4 <_dtoa_r+0x65c>
 8005538:	2200      	movs	r2, #0
 800553a:	4b09      	ldr	r3, [pc, #36]	@ (8005560 <_dtoa_r+0x708>)
 800553c:	f7fa ffcc 	bl	80004d8 <__aeabi_dmul>
 8005540:	2200      	movs	r2, #0
 8005542:	2300      	movs	r3, #0
 8005544:	4604      	mov	r4, r0
 8005546:	460d      	mov	r5, r1
 8005548:	f7fb fa2e 	bl	80009a8 <__aeabi_dcmpeq>
 800554c:	2800      	cmp	r0, #0
 800554e:	f43f aebc 	beq.w	80052ca <_dtoa_r+0x472>
 8005552:	e6f1      	b.n	8005338 <_dtoa_r+0x4e0>
 8005554:	080087d0 	.word	0x080087d0
 8005558:	3fe00000 	.word	0x3fe00000
 800555c:	3ff00000 	.word	0x3ff00000
 8005560:	40240000 	.word	0x40240000
 8005564:	40140000 	.word	0x40140000
 8005568:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800556a:	2a00      	cmp	r2, #0
 800556c:	f000 80db 	beq.w	8005726 <_dtoa_r+0x8ce>
 8005570:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005572:	2a01      	cmp	r2, #1
 8005574:	f300 80bf 	bgt.w	80056f6 <_dtoa_r+0x89e>
 8005578:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800557a:	2a00      	cmp	r2, #0
 800557c:	f000 80b7 	beq.w	80056ee <_dtoa_r+0x896>
 8005580:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005584:	4646      	mov	r6, r8
 8005586:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005588:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800558a:	2101      	movs	r1, #1
 800558c:	441a      	add	r2, r3
 800558e:	4658      	mov	r0, fp
 8005590:	4498      	add	r8, r3
 8005592:	9209      	str	r2, [sp, #36]	@ 0x24
 8005594:	f000 fc64 	bl	8005e60 <__i2b>
 8005598:	4605      	mov	r5, r0
 800559a:	b15e      	cbz	r6, 80055b4 <_dtoa_r+0x75c>
 800559c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	dd08      	ble.n	80055b4 <_dtoa_r+0x75c>
 80055a2:	42b3      	cmp	r3, r6
 80055a4:	bfa8      	it	ge
 80055a6:	4633      	movge	r3, r6
 80055a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055aa:	eba8 0803 	sub.w	r8, r8, r3
 80055ae:	1af6      	subs	r6, r6, r3
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055b6:	b1f3      	cbz	r3, 80055f6 <_dtoa_r+0x79e>
 80055b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80b7 	beq.w	800572e <_dtoa_r+0x8d6>
 80055c0:	b18c      	cbz	r4, 80055e6 <_dtoa_r+0x78e>
 80055c2:	4629      	mov	r1, r5
 80055c4:	4622      	mov	r2, r4
 80055c6:	4658      	mov	r0, fp
 80055c8:	f000 fd08 	bl	8005fdc <__pow5mult>
 80055cc:	464a      	mov	r2, r9
 80055ce:	4601      	mov	r1, r0
 80055d0:	4605      	mov	r5, r0
 80055d2:	4658      	mov	r0, fp
 80055d4:	f000 fc5a 	bl	8005e8c <__multiply>
 80055d8:	4649      	mov	r1, r9
 80055da:	9004      	str	r0, [sp, #16]
 80055dc:	4658      	mov	r0, fp
 80055de:	f000 fb41 	bl	8005c64 <_Bfree>
 80055e2:	9b04      	ldr	r3, [sp, #16]
 80055e4:	4699      	mov	r9, r3
 80055e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055e8:	1b1a      	subs	r2, r3, r4
 80055ea:	d004      	beq.n	80055f6 <_dtoa_r+0x79e>
 80055ec:	4649      	mov	r1, r9
 80055ee:	4658      	mov	r0, fp
 80055f0:	f000 fcf4 	bl	8005fdc <__pow5mult>
 80055f4:	4681      	mov	r9, r0
 80055f6:	2101      	movs	r1, #1
 80055f8:	4658      	mov	r0, fp
 80055fa:	f000 fc31 	bl	8005e60 <__i2b>
 80055fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005600:	4604      	mov	r4, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 81c9 	beq.w	800599a <_dtoa_r+0xb42>
 8005608:	461a      	mov	r2, r3
 800560a:	4601      	mov	r1, r0
 800560c:	4658      	mov	r0, fp
 800560e:	f000 fce5 	bl	8005fdc <__pow5mult>
 8005612:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005614:	4604      	mov	r4, r0
 8005616:	2b01      	cmp	r3, #1
 8005618:	f300 808f 	bgt.w	800573a <_dtoa_r+0x8e2>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f040 8087 	bne.w	8005732 <_dtoa_r+0x8da>
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 8083 	bne.w	8005736 <_dtoa_r+0x8de>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	0d1b      	lsrs	r3, r3, #20
 8005638:	051b      	lsls	r3, r3, #20
 800563a:	b12b      	cbz	r3, 8005648 <_dtoa_r+0x7f0>
 800563c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800563e:	f108 0801 	add.w	r8, r8, #1
 8005642:	3301      	adds	r3, #1
 8005644:	9309      	str	r3, [sp, #36]	@ 0x24
 8005646:	2301      	movs	r3, #1
 8005648:	930a      	str	r3, [sp, #40]	@ 0x28
 800564a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 81aa 	beq.w	80059a6 <_dtoa_r+0xb4e>
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005658:	6918      	ldr	r0, [r3, #16]
 800565a:	f000 fbb5 	bl	8005dc8 <__hi0bits>
 800565e:	f1c0 0020 	rsb	r0, r0, #32
 8005662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005664:	4418      	add	r0, r3
 8005666:	f010 001f 	ands.w	r0, r0, #31
 800566a:	d071      	beq.n	8005750 <_dtoa_r+0x8f8>
 800566c:	f1c0 0320 	rsb	r3, r0, #32
 8005670:	2b04      	cmp	r3, #4
 8005672:	dd65      	ble.n	8005740 <_dtoa_r+0x8e8>
 8005674:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005676:	f1c0 001c 	rsb	r0, r0, #28
 800567a:	4403      	add	r3, r0
 800567c:	4480      	add	r8, r0
 800567e:	4406      	add	r6, r0
 8005680:	9309      	str	r3, [sp, #36]	@ 0x24
 8005682:	f1b8 0f00 	cmp.w	r8, #0
 8005686:	dd05      	ble.n	8005694 <_dtoa_r+0x83c>
 8005688:	4649      	mov	r1, r9
 800568a:	4642      	mov	r2, r8
 800568c:	4658      	mov	r0, fp
 800568e:	f000 fcff 	bl	8006090 <__lshift>
 8005692:	4681      	mov	r9, r0
 8005694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	dd05      	ble.n	80056a6 <_dtoa_r+0x84e>
 800569a:	4621      	mov	r1, r4
 800569c:	461a      	mov	r2, r3
 800569e:	4658      	mov	r0, fp
 80056a0:	f000 fcf6 	bl	8006090 <__lshift>
 80056a4:	4604      	mov	r4, r0
 80056a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d053      	beq.n	8005754 <_dtoa_r+0x8fc>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4648      	mov	r0, r9
 80056b0:	f000 fd5a 	bl	8006168 <__mcmp>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	da4d      	bge.n	8005754 <_dtoa_r+0x8fc>
 80056b8:	1e7b      	subs	r3, r7, #1
 80056ba:	4649      	mov	r1, r9
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	220a      	movs	r2, #10
 80056c0:	2300      	movs	r3, #0
 80056c2:	4658      	mov	r0, fp
 80056c4:	f000 faf0 	bl	8005ca8 <__multadd>
 80056c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ca:	4681      	mov	r9, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 816c 	beq.w	80059aa <_dtoa_r+0xb52>
 80056d2:	2300      	movs	r3, #0
 80056d4:	4629      	mov	r1, r5
 80056d6:	220a      	movs	r2, #10
 80056d8:	4658      	mov	r0, fp
 80056da:	f000 fae5 	bl	8005ca8 <__multadd>
 80056de:	9b08      	ldr	r3, [sp, #32]
 80056e0:	4605      	mov	r5, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	dc61      	bgt.n	80057aa <_dtoa_r+0x952>
 80056e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	dc3b      	bgt.n	8005764 <_dtoa_r+0x90c>
 80056ec:	e05d      	b.n	80057aa <_dtoa_r+0x952>
 80056ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056f0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056f4:	e746      	b.n	8005584 <_dtoa_r+0x72c>
 80056f6:	9b07      	ldr	r3, [sp, #28]
 80056f8:	1e5c      	subs	r4, r3, #1
 80056fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056fc:	42a3      	cmp	r3, r4
 80056fe:	bfbf      	itttt	lt
 8005700:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005702:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005704:	1ae3      	sublt	r3, r4, r3
 8005706:	18d2      	addlt	r2, r2, r3
 8005708:	bfa8      	it	ge
 800570a:	1b1c      	subge	r4, r3, r4
 800570c:	9b07      	ldr	r3, [sp, #28]
 800570e:	bfbe      	ittt	lt
 8005710:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005712:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005714:	2400      	movlt	r4, #0
 8005716:	2b00      	cmp	r3, #0
 8005718:	bfb5      	itete	lt
 800571a:	eba8 0603 	sublt.w	r6, r8, r3
 800571e:	4646      	movge	r6, r8
 8005720:	2300      	movlt	r3, #0
 8005722:	9b07      	ldrge	r3, [sp, #28]
 8005724:	e730      	b.n	8005588 <_dtoa_r+0x730>
 8005726:	4646      	mov	r6, r8
 8005728:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800572a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800572c:	e735      	b.n	800559a <_dtoa_r+0x742>
 800572e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005730:	e75c      	b.n	80055ec <_dtoa_r+0x794>
 8005732:	2300      	movs	r3, #0
 8005734:	e788      	b.n	8005648 <_dtoa_r+0x7f0>
 8005736:	9b02      	ldr	r3, [sp, #8]
 8005738:	e786      	b.n	8005648 <_dtoa_r+0x7f0>
 800573a:	2300      	movs	r3, #0
 800573c:	930a      	str	r3, [sp, #40]	@ 0x28
 800573e:	e788      	b.n	8005652 <_dtoa_r+0x7fa>
 8005740:	d09f      	beq.n	8005682 <_dtoa_r+0x82a>
 8005742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005744:	331c      	adds	r3, #28
 8005746:	441a      	add	r2, r3
 8005748:	4498      	add	r8, r3
 800574a:	441e      	add	r6, r3
 800574c:	9209      	str	r2, [sp, #36]	@ 0x24
 800574e:	e798      	b.n	8005682 <_dtoa_r+0x82a>
 8005750:	4603      	mov	r3, r0
 8005752:	e7f6      	b.n	8005742 <_dtoa_r+0x8ea>
 8005754:	9b07      	ldr	r3, [sp, #28]
 8005756:	9704      	str	r7, [sp, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dc20      	bgt.n	800579e <_dtoa_r+0x946>
 800575c:	9308      	str	r3, [sp, #32]
 800575e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005760:	2b02      	cmp	r3, #2
 8005762:	dd1e      	ble.n	80057a2 <_dtoa_r+0x94a>
 8005764:	9b08      	ldr	r3, [sp, #32]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f47f aebc 	bne.w	80054e4 <_dtoa_r+0x68c>
 800576c:	4621      	mov	r1, r4
 800576e:	2205      	movs	r2, #5
 8005770:	4658      	mov	r0, fp
 8005772:	f000 fa99 	bl	8005ca8 <__multadd>
 8005776:	4601      	mov	r1, r0
 8005778:	4604      	mov	r4, r0
 800577a:	4648      	mov	r0, r9
 800577c:	f000 fcf4 	bl	8006168 <__mcmp>
 8005780:	2800      	cmp	r0, #0
 8005782:	f77f aeaf 	ble.w	80054e4 <_dtoa_r+0x68c>
 8005786:	2331      	movs	r3, #49	@ 0x31
 8005788:	4656      	mov	r6, sl
 800578a:	f806 3b01 	strb.w	r3, [r6], #1
 800578e:	9b04      	ldr	r3, [sp, #16]
 8005790:	3301      	adds	r3, #1
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	e6aa      	b.n	80054ec <_dtoa_r+0x694>
 8005796:	9c07      	ldr	r4, [sp, #28]
 8005798:	9704      	str	r7, [sp, #16]
 800579a:	4625      	mov	r5, r4
 800579c:	e7f3      	b.n	8005786 <_dtoa_r+0x92e>
 800579e:	9b07      	ldr	r3, [sp, #28]
 80057a0:	9308      	str	r3, [sp, #32]
 80057a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8104 	beq.w	80059b2 <_dtoa_r+0xb5a>
 80057aa:	2e00      	cmp	r6, #0
 80057ac:	dd05      	ble.n	80057ba <_dtoa_r+0x962>
 80057ae:	4629      	mov	r1, r5
 80057b0:	4632      	mov	r2, r6
 80057b2:	4658      	mov	r0, fp
 80057b4:	f000 fc6c 	bl	8006090 <__lshift>
 80057b8:	4605      	mov	r5, r0
 80057ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d05a      	beq.n	8005876 <_dtoa_r+0xa1e>
 80057c0:	4658      	mov	r0, fp
 80057c2:	6869      	ldr	r1, [r5, #4]
 80057c4:	f000 fa0e 	bl	8005be4 <_Balloc>
 80057c8:	4606      	mov	r6, r0
 80057ca:	b928      	cbnz	r0, 80057d8 <_dtoa_r+0x980>
 80057cc:	4602      	mov	r2, r0
 80057ce:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057d2:	4b83      	ldr	r3, [pc, #524]	@ (80059e0 <_dtoa_r+0xb88>)
 80057d4:	f7ff bb54 	b.w	8004e80 <_dtoa_r+0x28>
 80057d8:	692a      	ldr	r2, [r5, #16]
 80057da:	f105 010c 	add.w	r1, r5, #12
 80057de:	3202      	adds	r2, #2
 80057e0:	0092      	lsls	r2, r2, #2
 80057e2:	300c      	adds	r0, #12
 80057e4:	f001 ff5e 	bl	80076a4 <memcpy>
 80057e8:	2201      	movs	r2, #1
 80057ea:	4631      	mov	r1, r6
 80057ec:	4658      	mov	r0, fp
 80057ee:	f000 fc4f 	bl	8006090 <__lshift>
 80057f2:	462f      	mov	r7, r5
 80057f4:	4605      	mov	r5, r0
 80057f6:	f10a 0301 	add.w	r3, sl, #1
 80057fa:	9307      	str	r3, [sp, #28]
 80057fc:	9b08      	ldr	r3, [sp, #32]
 80057fe:	4453      	add	r3, sl
 8005800:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005802:	9b02      	ldr	r3, [sp, #8]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	930a      	str	r3, [sp, #40]	@ 0x28
 800580a:	9b07      	ldr	r3, [sp, #28]
 800580c:	4621      	mov	r1, r4
 800580e:	3b01      	subs	r3, #1
 8005810:	4648      	mov	r0, r9
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	f7ff fa98 	bl	8004d48 <quorem>
 8005818:	4639      	mov	r1, r7
 800581a:	9008      	str	r0, [sp, #32]
 800581c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005820:	4648      	mov	r0, r9
 8005822:	f000 fca1 	bl	8006168 <__mcmp>
 8005826:	462a      	mov	r2, r5
 8005828:	9009      	str	r0, [sp, #36]	@ 0x24
 800582a:	4621      	mov	r1, r4
 800582c:	4658      	mov	r0, fp
 800582e:	f000 fcb7 	bl	80061a0 <__mdiff>
 8005832:	68c2      	ldr	r2, [r0, #12]
 8005834:	4606      	mov	r6, r0
 8005836:	bb02      	cbnz	r2, 800587a <_dtoa_r+0xa22>
 8005838:	4601      	mov	r1, r0
 800583a:	4648      	mov	r0, r9
 800583c:	f000 fc94 	bl	8006168 <__mcmp>
 8005840:	4602      	mov	r2, r0
 8005842:	4631      	mov	r1, r6
 8005844:	4658      	mov	r0, fp
 8005846:	920c      	str	r2, [sp, #48]	@ 0x30
 8005848:	f000 fa0c 	bl	8005c64 <_Bfree>
 800584c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800584e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005850:	9e07      	ldr	r6, [sp, #28]
 8005852:	ea43 0102 	orr.w	r1, r3, r2
 8005856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005858:	4319      	orrs	r1, r3
 800585a:	d110      	bne.n	800587e <_dtoa_r+0xa26>
 800585c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005860:	d029      	beq.n	80058b6 <_dtoa_r+0xa5e>
 8005862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	dd02      	ble.n	800586e <_dtoa_r+0xa16>
 8005868:	9b08      	ldr	r3, [sp, #32]
 800586a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800586e:	9b02      	ldr	r3, [sp, #8]
 8005870:	f883 8000 	strb.w	r8, [r3]
 8005874:	e63b      	b.n	80054ee <_dtoa_r+0x696>
 8005876:	4628      	mov	r0, r5
 8005878:	e7bb      	b.n	80057f2 <_dtoa_r+0x99a>
 800587a:	2201      	movs	r2, #1
 800587c:	e7e1      	b.n	8005842 <_dtoa_r+0x9ea>
 800587e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	db04      	blt.n	800588e <_dtoa_r+0xa36>
 8005884:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005886:	430b      	orrs	r3, r1
 8005888:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800588a:	430b      	orrs	r3, r1
 800588c:	d120      	bne.n	80058d0 <_dtoa_r+0xa78>
 800588e:	2a00      	cmp	r2, #0
 8005890:	dded      	ble.n	800586e <_dtoa_r+0xa16>
 8005892:	4649      	mov	r1, r9
 8005894:	2201      	movs	r2, #1
 8005896:	4658      	mov	r0, fp
 8005898:	f000 fbfa 	bl	8006090 <__lshift>
 800589c:	4621      	mov	r1, r4
 800589e:	4681      	mov	r9, r0
 80058a0:	f000 fc62 	bl	8006168 <__mcmp>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	dc03      	bgt.n	80058b0 <_dtoa_r+0xa58>
 80058a8:	d1e1      	bne.n	800586e <_dtoa_r+0xa16>
 80058aa:	f018 0f01 	tst.w	r8, #1
 80058ae:	d0de      	beq.n	800586e <_dtoa_r+0xa16>
 80058b0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058b4:	d1d8      	bne.n	8005868 <_dtoa_r+0xa10>
 80058b6:	2339      	movs	r3, #57	@ 0x39
 80058b8:	9a02      	ldr	r2, [sp, #8]
 80058ba:	7013      	strb	r3, [r2, #0]
 80058bc:	4633      	mov	r3, r6
 80058be:	461e      	mov	r6, r3
 80058c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80058c4:	3b01      	subs	r3, #1
 80058c6:	2a39      	cmp	r2, #57	@ 0x39
 80058c8:	d052      	beq.n	8005970 <_dtoa_r+0xb18>
 80058ca:	3201      	adds	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	e60e      	b.n	80054ee <_dtoa_r+0x696>
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	dd07      	ble.n	80058e4 <_dtoa_r+0xa8c>
 80058d4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058d8:	d0ed      	beq.n	80058b6 <_dtoa_r+0xa5e>
 80058da:	9a02      	ldr	r2, [sp, #8]
 80058dc:	f108 0301 	add.w	r3, r8, #1
 80058e0:	7013      	strb	r3, [r2, #0]
 80058e2:	e604      	b.n	80054ee <_dtoa_r+0x696>
 80058e4:	9b07      	ldr	r3, [sp, #28]
 80058e6:	9a07      	ldr	r2, [sp, #28]
 80058e8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80058ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d028      	beq.n	8005944 <_dtoa_r+0xaec>
 80058f2:	4649      	mov	r1, r9
 80058f4:	2300      	movs	r3, #0
 80058f6:	220a      	movs	r2, #10
 80058f8:	4658      	mov	r0, fp
 80058fa:	f000 f9d5 	bl	8005ca8 <__multadd>
 80058fe:	42af      	cmp	r7, r5
 8005900:	4681      	mov	r9, r0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	f04f 020a 	mov.w	r2, #10
 800590a:	4639      	mov	r1, r7
 800590c:	4658      	mov	r0, fp
 800590e:	d107      	bne.n	8005920 <_dtoa_r+0xac8>
 8005910:	f000 f9ca 	bl	8005ca8 <__multadd>
 8005914:	4607      	mov	r7, r0
 8005916:	4605      	mov	r5, r0
 8005918:	9b07      	ldr	r3, [sp, #28]
 800591a:	3301      	adds	r3, #1
 800591c:	9307      	str	r3, [sp, #28]
 800591e:	e774      	b.n	800580a <_dtoa_r+0x9b2>
 8005920:	f000 f9c2 	bl	8005ca8 <__multadd>
 8005924:	4629      	mov	r1, r5
 8005926:	4607      	mov	r7, r0
 8005928:	2300      	movs	r3, #0
 800592a:	220a      	movs	r2, #10
 800592c:	4658      	mov	r0, fp
 800592e:	f000 f9bb 	bl	8005ca8 <__multadd>
 8005932:	4605      	mov	r5, r0
 8005934:	e7f0      	b.n	8005918 <_dtoa_r+0xac0>
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	2700      	movs	r7, #0
 800593a:	2b00      	cmp	r3, #0
 800593c:	bfcc      	ite	gt
 800593e:	461e      	movgt	r6, r3
 8005940:	2601      	movle	r6, #1
 8005942:	4456      	add	r6, sl
 8005944:	4649      	mov	r1, r9
 8005946:	2201      	movs	r2, #1
 8005948:	4658      	mov	r0, fp
 800594a:	f000 fba1 	bl	8006090 <__lshift>
 800594e:	4621      	mov	r1, r4
 8005950:	4681      	mov	r9, r0
 8005952:	f000 fc09 	bl	8006168 <__mcmp>
 8005956:	2800      	cmp	r0, #0
 8005958:	dcb0      	bgt.n	80058bc <_dtoa_r+0xa64>
 800595a:	d102      	bne.n	8005962 <_dtoa_r+0xb0a>
 800595c:	f018 0f01 	tst.w	r8, #1
 8005960:	d1ac      	bne.n	80058bc <_dtoa_r+0xa64>
 8005962:	4633      	mov	r3, r6
 8005964:	461e      	mov	r6, r3
 8005966:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800596a:	2a30      	cmp	r2, #48	@ 0x30
 800596c:	d0fa      	beq.n	8005964 <_dtoa_r+0xb0c>
 800596e:	e5be      	b.n	80054ee <_dtoa_r+0x696>
 8005970:	459a      	cmp	sl, r3
 8005972:	d1a4      	bne.n	80058be <_dtoa_r+0xa66>
 8005974:	9b04      	ldr	r3, [sp, #16]
 8005976:	3301      	adds	r3, #1
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	2331      	movs	r3, #49	@ 0x31
 800597c:	f88a 3000 	strb.w	r3, [sl]
 8005980:	e5b5      	b.n	80054ee <_dtoa_r+0x696>
 8005982:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005984:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80059e4 <_dtoa_r+0xb8c>
 8005988:	b11b      	cbz	r3, 8005992 <_dtoa_r+0xb3a>
 800598a:	f10a 0308 	add.w	r3, sl, #8
 800598e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4650      	mov	r0, sl
 8005994:	b017      	add	sp, #92	@ 0x5c
 8005996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800599c:	2b01      	cmp	r3, #1
 800599e:	f77f ae3d 	ble.w	800561c <_dtoa_r+0x7c4>
 80059a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a6:	2001      	movs	r0, #1
 80059a8:	e65b      	b.n	8005662 <_dtoa_r+0x80a>
 80059aa:	9b08      	ldr	r3, [sp, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f77f aed6 	ble.w	800575e <_dtoa_r+0x906>
 80059b2:	4656      	mov	r6, sl
 80059b4:	4621      	mov	r1, r4
 80059b6:	4648      	mov	r0, r9
 80059b8:	f7ff f9c6 	bl	8004d48 <quorem>
 80059bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	f806 8b01 	strb.w	r8, [r6], #1
 80059c6:	eba6 020a 	sub.w	r2, r6, sl
 80059ca:	4293      	cmp	r3, r2
 80059cc:	ddb3      	ble.n	8005936 <_dtoa_r+0xade>
 80059ce:	4649      	mov	r1, r9
 80059d0:	2300      	movs	r3, #0
 80059d2:	220a      	movs	r2, #10
 80059d4:	4658      	mov	r0, fp
 80059d6:	f000 f967 	bl	8005ca8 <__multadd>
 80059da:	4681      	mov	r9, r0
 80059dc:	e7ea      	b.n	80059b4 <_dtoa_r+0xb5c>
 80059de:	bf00      	nop
 80059e0:	0800872d 	.word	0x0800872d
 80059e4:	080086b1 	.word	0x080086b1

080059e8 <_free_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d040      	beq.n	8005a72 <_free_r+0x8a>
 80059f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f4:	1f0c      	subs	r4, r1, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bfb8      	it	lt
 80059fa:	18e4      	addlt	r4, r4, r3
 80059fc:	f000 f8e6 	bl	8005bcc <__malloc_lock>
 8005a00:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <_free_r+0x8c>)
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	b933      	cbnz	r3, 8005a14 <_free_r+0x2c>
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	6014      	str	r4, [r2, #0]
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a10:	f000 b8e2 	b.w	8005bd8 <__malloc_unlock>
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	d908      	bls.n	8005a2a <_free_r+0x42>
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	1821      	adds	r1, r4, r0
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf01      	itttt	eq
 8005a20:	6819      	ldreq	r1, [r3, #0]
 8005a22:	685b      	ldreq	r3, [r3, #4]
 8005a24:	1809      	addeq	r1, r1, r0
 8005a26:	6021      	streq	r1, [r4, #0]
 8005a28:	e7ed      	b.n	8005a06 <_free_r+0x1e>
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b10b      	cbz	r3, 8005a34 <_free_r+0x4c>
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	d9fa      	bls.n	8005a2a <_free_r+0x42>
 8005a34:	6811      	ldr	r1, [r2, #0]
 8005a36:	1850      	adds	r0, r2, r1
 8005a38:	42a0      	cmp	r0, r4
 8005a3a:	d10b      	bne.n	8005a54 <_free_r+0x6c>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	4401      	add	r1, r0
 8005a40:	1850      	adds	r0, r2, r1
 8005a42:	4283      	cmp	r3, r0
 8005a44:	6011      	str	r1, [r2, #0]
 8005a46:	d1e0      	bne.n	8005a0a <_free_r+0x22>
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4408      	add	r0, r1
 8005a4e:	6010      	str	r0, [r2, #0]
 8005a50:	6053      	str	r3, [r2, #4]
 8005a52:	e7da      	b.n	8005a0a <_free_r+0x22>
 8005a54:	d902      	bls.n	8005a5c <_free_r+0x74>
 8005a56:	230c      	movs	r3, #12
 8005a58:	602b      	str	r3, [r5, #0]
 8005a5a:	e7d6      	b.n	8005a0a <_free_r+0x22>
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	1821      	adds	r1, r4, r0
 8005a60:	428b      	cmp	r3, r1
 8005a62:	bf01      	itttt	eq
 8005a64:	6819      	ldreq	r1, [r3, #0]
 8005a66:	685b      	ldreq	r3, [r3, #4]
 8005a68:	1809      	addeq	r1, r1, r0
 8005a6a:	6021      	streq	r1, [r4, #0]
 8005a6c:	6063      	str	r3, [r4, #4]
 8005a6e:	6054      	str	r4, [r2, #4]
 8005a70:	e7cb      	b.n	8005a0a <_free_r+0x22>
 8005a72:	bd38      	pop	{r3, r4, r5, pc}
 8005a74:	20000354 	.word	0x20000354

08005a78 <malloc>:
 8005a78:	4b02      	ldr	r3, [pc, #8]	@ (8005a84 <malloc+0xc>)
 8005a7a:	4601      	mov	r1, r0
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	f000 b825 	b.w	8005acc <_malloc_r>
 8005a82:	bf00      	nop
 8005a84:	2000002c 	.word	0x2000002c

08005a88 <sbrk_aligned>:
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ac8 <sbrk_aligned+0x40>)
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	6831      	ldr	r1, [r6, #0]
 8005a90:	4605      	mov	r5, r0
 8005a92:	b911      	cbnz	r1, 8005a9a <sbrk_aligned+0x12>
 8005a94:	f001 fdf6 	bl	8007684 <_sbrk_r>
 8005a98:	6030      	str	r0, [r6, #0]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f001 fdf1 	bl	8007684 <_sbrk_r>
 8005aa2:	1c43      	adds	r3, r0, #1
 8005aa4:	d103      	bne.n	8005aae <sbrk_aligned+0x26>
 8005aa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aaa:	4620      	mov	r0, r4
 8005aac:	bd70      	pop	{r4, r5, r6, pc}
 8005aae:	1cc4      	adds	r4, r0, #3
 8005ab0:	f024 0403 	bic.w	r4, r4, #3
 8005ab4:	42a0      	cmp	r0, r4
 8005ab6:	d0f8      	beq.n	8005aaa <sbrk_aligned+0x22>
 8005ab8:	1a21      	subs	r1, r4, r0
 8005aba:	4628      	mov	r0, r5
 8005abc:	f001 fde2 	bl	8007684 <_sbrk_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d1f2      	bne.n	8005aaa <sbrk_aligned+0x22>
 8005ac4:	e7ef      	b.n	8005aa6 <sbrk_aligned+0x1e>
 8005ac6:	bf00      	nop
 8005ac8:	20000350 	.word	0x20000350

08005acc <_malloc_r>:
 8005acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ad0:	1ccd      	adds	r5, r1, #3
 8005ad2:	f025 0503 	bic.w	r5, r5, #3
 8005ad6:	3508      	adds	r5, #8
 8005ad8:	2d0c      	cmp	r5, #12
 8005ada:	bf38      	it	cc
 8005adc:	250c      	movcc	r5, #12
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	db01      	blt.n	8005ae8 <_malloc_r+0x1c>
 8005ae4:	42a9      	cmp	r1, r5
 8005ae6:	d904      	bls.n	8005af2 <_malloc_r+0x26>
 8005ae8:	230c      	movs	r3, #12
 8005aea:	6033      	str	r3, [r6, #0]
 8005aec:	2000      	movs	r0, #0
 8005aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bc8 <_malloc_r+0xfc>
 8005af6:	f000 f869 	bl	8005bcc <__malloc_lock>
 8005afa:	f8d8 3000 	ldr.w	r3, [r8]
 8005afe:	461c      	mov	r4, r3
 8005b00:	bb44      	cbnz	r4, 8005b54 <_malloc_r+0x88>
 8005b02:	4629      	mov	r1, r5
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7ff ffbf 	bl	8005a88 <sbrk_aligned>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	d158      	bne.n	8005bc2 <_malloc_r+0xf6>
 8005b10:	f8d8 4000 	ldr.w	r4, [r8]
 8005b14:	4627      	mov	r7, r4
 8005b16:	2f00      	cmp	r7, #0
 8005b18:	d143      	bne.n	8005ba2 <_malloc_r+0xd6>
 8005b1a:	2c00      	cmp	r4, #0
 8005b1c:	d04b      	beq.n	8005bb6 <_malloc_r+0xea>
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	4639      	mov	r1, r7
 8005b22:	4630      	mov	r0, r6
 8005b24:	eb04 0903 	add.w	r9, r4, r3
 8005b28:	f001 fdac 	bl	8007684 <_sbrk_r>
 8005b2c:	4581      	cmp	r9, r0
 8005b2e:	d142      	bne.n	8005bb6 <_malloc_r+0xea>
 8005b30:	6821      	ldr	r1, [r4, #0]
 8005b32:	4630      	mov	r0, r6
 8005b34:	1a6d      	subs	r5, r5, r1
 8005b36:	4629      	mov	r1, r5
 8005b38:	f7ff ffa6 	bl	8005a88 <sbrk_aligned>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	d03a      	beq.n	8005bb6 <_malloc_r+0xea>
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	442b      	add	r3, r5
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	f8d8 3000 	ldr.w	r3, [r8]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	bb62      	cbnz	r2, 8005ba8 <_malloc_r+0xdc>
 8005b4e:	f8c8 7000 	str.w	r7, [r8]
 8005b52:	e00f      	b.n	8005b74 <_malloc_r+0xa8>
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	1b52      	subs	r2, r2, r5
 8005b58:	d420      	bmi.n	8005b9c <_malloc_r+0xd0>
 8005b5a:	2a0b      	cmp	r2, #11
 8005b5c:	d917      	bls.n	8005b8e <_malloc_r+0xc2>
 8005b5e:	1961      	adds	r1, r4, r5
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	6025      	str	r5, [r4, #0]
 8005b64:	bf18      	it	ne
 8005b66:	6059      	strne	r1, [r3, #4]
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	bf08      	it	eq
 8005b6c:	f8c8 1000 	streq.w	r1, [r8]
 8005b70:	5162      	str	r2, [r4, r5]
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	4630      	mov	r0, r6
 8005b76:	f000 f82f 	bl	8005bd8 <__malloc_unlock>
 8005b7a:	f104 000b 	add.w	r0, r4, #11
 8005b7e:	1d23      	adds	r3, r4, #4
 8005b80:	f020 0007 	bic.w	r0, r0, #7
 8005b84:	1ac2      	subs	r2, r0, r3
 8005b86:	bf1c      	itt	ne
 8005b88:	1a1b      	subne	r3, r3, r0
 8005b8a:	50a3      	strne	r3, [r4, r2]
 8005b8c:	e7af      	b.n	8005aee <_malloc_r+0x22>
 8005b8e:	6862      	ldr	r2, [r4, #4]
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	bf0c      	ite	eq
 8005b94:	f8c8 2000 	streq.w	r2, [r8]
 8005b98:	605a      	strne	r2, [r3, #4]
 8005b9a:	e7eb      	b.n	8005b74 <_malloc_r+0xa8>
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	6864      	ldr	r4, [r4, #4]
 8005ba0:	e7ae      	b.n	8005b00 <_malloc_r+0x34>
 8005ba2:	463c      	mov	r4, r7
 8005ba4:	687f      	ldr	r7, [r7, #4]
 8005ba6:	e7b6      	b.n	8005b16 <_malloc_r+0x4a>
 8005ba8:	461a      	mov	r2, r3
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d1fb      	bne.n	8005ba8 <_malloc_r+0xdc>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6053      	str	r3, [r2, #4]
 8005bb4:	e7de      	b.n	8005b74 <_malloc_r+0xa8>
 8005bb6:	230c      	movs	r3, #12
 8005bb8:	4630      	mov	r0, r6
 8005bba:	6033      	str	r3, [r6, #0]
 8005bbc:	f000 f80c 	bl	8005bd8 <__malloc_unlock>
 8005bc0:	e794      	b.n	8005aec <_malloc_r+0x20>
 8005bc2:	6005      	str	r5, [r0, #0]
 8005bc4:	e7d6      	b.n	8005b74 <_malloc_r+0xa8>
 8005bc6:	bf00      	nop
 8005bc8:	20000354 	.word	0x20000354

08005bcc <__malloc_lock>:
 8005bcc:	4801      	ldr	r0, [pc, #4]	@ (8005bd4 <__malloc_lock+0x8>)
 8005bce:	f7ff b8a6 	b.w	8004d1e <__retarget_lock_acquire_recursive>
 8005bd2:	bf00      	nop
 8005bd4:	2000034c 	.word	0x2000034c

08005bd8 <__malloc_unlock>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	@ (8005be0 <__malloc_unlock+0x8>)
 8005bda:	f7ff b8a1 	b.w	8004d20 <__retarget_lock_release_recursive>
 8005bde:	bf00      	nop
 8005be0:	2000034c 	.word	0x2000034c

08005be4 <_Balloc>:
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	69c6      	ldr	r6, [r0, #28]
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	b976      	cbnz	r6, 8005c0c <_Balloc+0x28>
 8005bee:	2010      	movs	r0, #16
 8005bf0:	f7ff ff42 	bl	8005a78 <malloc>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	61e0      	str	r0, [r4, #28]
 8005bf8:	b920      	cbnz	r0, 8005c04 <_Balloc+0x20>
 8005bfa:	216b      	movs	r1, #107	@ 0x6b
 8005bfc:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <_Balloc+0x78>)
 8005bfe:	4818      	ldr	r0, [pc, #96]	@ (8005c60 <_Balloc+0x7c>)
 8005c00:	f001 fd64 	bl	80076cc <__assert_func>
 8005c04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c08:	6006      	str	r6, [r0, #0]
 8005c0a:	60c6      	str	r6, [r0, #12]
 8005c0c:	69e6      	ldr	r6, [r4, #28]
 8005c0e:	68f3      	ldr	r3, [r6, #12]
 8005c10:	b183      	cbz	r3, 8005c34 <_Balloc+0x50>
 8005c12:	69e3      	ldr	r3, [r4, #28]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c1a:	b9b8      	cbnz	r0, 8005c4c <_Balloc+0x68>
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c22:	1d72      	adds	r2, r6, #5
 8005c24:	4620      	mov	r0, r4
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	f001 fd6e 	bl	8007708 <_calloc_r>
 8005c2c:	b160      	cbz	r0, 8005c48 <_Balloc+0x64>
 8005c2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c32:	e00e      	b.n	8005c52 <_Balloc+0x6e>
 8005c34:	2221      	movs	r2, #33	@ 0x21
 8005c36:	2104      	movs	r1, #4
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f001 fd65 	bl	8007708 <_calloc_r>
 8005c3e:	69e3      	ldr	r3, [r4, #28]
 8005c40:	60f0      	str	r0, [r6, #12]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e4      	bne.n	8005c12 <_Balloc+0x2e>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	bd70      	pop	{r4, r5, r6, pc}
 8005c4c:	6802      	ldr	r2, [r0, #0]
 8005c4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c52:	2300      	movs	r3, #0
 8005c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c58:	e7f7      	b.n	8005c4a <_Balloc+0x66>
 8005c5a:	bf00      	nop
 8005c5c:	080086be 	.word	0x080086be
 8005c60:	0800873e 	.word	0x0800873e

08005c64 <_Bfree>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	69c6      	ldr	r6, [r0, #28]
 8005c68:	4605      	mov	r5, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	b976      	cbnz	r6, 8005c8c <_Bfree+0x28>
 8005c6e:	2010      	movs	r0, #16
 8005c70:	f7ff ff02 	bl	8005a78 <malloc>
 8005c74:	4602      	mov	r2, r0
 8005c76:	61e8      	str	r0, [r5, #28]
 8005c78:	b920      	cbnz	r0, 8005c84 <_Bfree+0x20>
 8005c7a:	218f      	movs	r1, #143	@ 0x8f
 8005c7c:	4b08      	ldr	r3, [pc, #32]	@ (8005ca0 <_Bfree+0x3c>)
 8005c7e:	4809      	ldr	r0, [pc, #36]	@ (8005ca4 <_Bfree+0x40>)
 8005c80:	f001 fd24 	bl	80076cc <__assert_func>
 8005c84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c88:	6006      	str	r6, [r0, #0]
 8005c8a:	60c6      	str	r6, [r0, #12]
 8005c8c:	b13c      	cbz	r4, 8005c9e <_Bfree+0x3a>
 8005c8e:	69eb      	ldr	r3, [r5, #28]
 8005c90:	6862      	ldr	r2, [r4, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c98:	6021      	str	r1, [r4, #0]
 8005c9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	080086be 	.word	0x080086be
 8005ca4:	0800873e 	.word	0x0800873e

08005ca8 <__multadd>:
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	4607      	mov	r7, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	461e      	mov	r6, r3
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	690d      	ldr	r5, [r1, #16]
 8005cb6:	f101 0c14 	add.w	ip, r1, #20
 8005cba:	f8dc 3000 	ldr.w	r3, [ip]
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	b299      	uxth	r1, r3
 8005cc2:	fb02 6101 	mla	r1, r2, r1, r6
 8005cc6:	0c1e      	lsrs	r6, r3, #16
 8005cc8:	0c0b      	lsrs	r3, r1, #16
 8005cca:	fb02 3306 	mla	r3, r2, r6, r3
 8005cce:	b289      	uxth	r1, r1
 8005cd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cd4:	4285      	cmp	r5, r0
 8005cd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cda:	f84c 1b04 	str.w	r1, [ip], #4
 8005cde:	dcec      	bgt.n	8005cba <__multadd+0x12>
 8005ce0:	b30e      	cbz	r6, 8005d26 <__multadd+0x7e>
 8005ce2:	68a3      	ldr	r3, [r4, #8]
 8005ce4:	42ab      	cmp	r3, r5
 8005ce6:	dc19      	bgt.n	8005d1c <__multadd+0x74>
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	4638      	mov	r0, r7
 8005cec:	3101      	adds	r1, #1
 8005cee:	f7ff ff79 	bl	8005be4 <_Balloc>
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	b928      	cbnz	r0, 8005d02 <__multadd+0x5a>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	21ba      	movs	r1, #186	@ 0xba
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <__multadd+0x84>)
 8005cfc:	480c      	ldr	r0, [pc, #48]	@ (8005d30 <__multadd+0x88>)
 8005cfe:	f001 fce5 	bl	80076cc <__assert_func>
 8005d02:	6922      	ldr	r2, [r4, #16]
 8005d04:	f104 010c 	add.w	r1, r4, #12
 8005d08:	3202      	adds	r2, #2
 8005d0a:	0092      	lsls	r2, r2, #2
 8005d0c:	300c      	adds	r0, #12
 8005d0e:	f001 fcc9 	bl	80076a4 <memcpy>
 8005d12:	4621      	mov	r1, r4
 8005d14:	4638      	mov	r0, r7
 8005d16:	f7ff ffa5 	bl	8005c64 <_Bfree>
 8005d1a:	4644      	mov	r4, r8
 8005d1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d20:	3501      	adds	r5, #1
 8005d22:	615e      	str	r6, [r3, #20]
 8005d24:	6125      	str	r5, [r4, #16]
 8005d26:	4620      	mov	r0, r4
 8005d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d2c:	0800872d 	.word	0x0800872d
 8005d30:	0800873e 	.word	0x0800873e

08005d34 <__s2b>:
 8005d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d38:	4615      	mov	r5, r2
 8005d3a:	2209      	movs	r2, #9
 8005d3c:	461f      	mov	r7, r3
 8005d3e:	3308      	adds	r3, #8
 8005d40:	460c      	mov	r4, r1
 8005d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d46:	4606      	mov	r6, r0
 8005d48:	2201      	movs	r2, #1
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	db09      	blt.n	8005d64 <__s2b+0x30>
 8005d50:	4630      	mov	r0, r6
 8005d52:	f7ff ff47 	bl	8005be4 <_Balloc>
 8005d56:	b940      	cbnz	r0, 8005d6a <__s2b+0x36>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	21d3      	movs	r1, #211	@ 0xd3
 8005d5c:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <__s2b+0x8c>)
 8005d5e:	4819      	ldr	r0, [pc, #100]	@ (8005dc4 <__s2b+0x90>)
 8005d60:	f001 fcb4 	bl	80076cc <__assert_func>
 8005d64:	0052      	lsls	r2, r2, #1
 8005d66:	3101      	adds	r1, #1
 8005d68:	e7f0      	b.n	8005d4c <__s2b+0x18>
 8005d6a:	9b08      	ldr	r3, [sp, #32]
 8005d6c:	2d09      	cmp	r5, #9
 8005d6e:	6143      	str	r3, [r0, #20]
 8005d70:	f04f 0301 	mov.w	r3, #1
 8005d74:	6103      	str	r3, [r0, #16]
 8005d76:	dd16      	ble.n	8005da6 <__s2b+0x72>
 8005d78:	f104 0909 	add.w	r9, r4, #9
 8005d7c:	46c8      	mov	r8, r9
 8005d7e:	442c      	add	r4, r5
 8005d80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d84:	4601      	mov	r1, r0
 8005d86:	220a      	movs	r2, #10
 8005d88:	4630      	mov	r0, r6
 8005d8a:	3b30      	subs	r3, #48	@ 0x30
 8005d8c:	f7ff ff8c 	bl	8005ca8 <__multadd>
 8005d90:	45a0      	cmp	r8, r4
 8005d92:	d1f5      	bne.n	8005d80 <__s2b+0x4c>
 8005d94:	f1a5 0408 	sub.w	r4, r5, #8
 8005d98:	444c      	add	r4, r9
 8005d9a:	1b2d      	subs	r5, r5, r4
 8005d9c:	1963      	adds	r3, r4, r5
 8005d9e:	42bb      	cmp	r3, r7
 8005da0:	db04      	blt.n	8005dac <__s2b+0x78>
 8005da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da6:	2509      	movs	r5, #9
 8005da8:	340a      	adds	r4, #10
 8005daa:	e7f6      	b.n	8005d9a <__s2b+0x66>
 8005dac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005db0:	4601      	mov	r1, r0
 8005db2:	220a      	movs	r2, #10
 8005db4:	4630      	mov	r0, r6
 8005db6:	3b30      	subs	r3, #48	@ 0x30
 8005db8:	f7ff ff76 	bl	8005ca8 <__multadd>
 8005dbc:	e7ee      	b.n	8005d9c <__s2b+0x68>
 8005dbe:	bf00      	nop
 8005dc0:	0800872d 	.word	0x0800872d
 8005dc4:	0800873e 	.word	0x0800873e

08005dc8 <__hi0bits>:
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005dce:	bf3a      	itte	cc
 8005dd0:	0403      	lslcc	r3, r0, #16
 8005dd2:	2010      	movcc	r0, #16
 8005dd4:	2000      	movcs	r0, #0
 8005dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dda:	bf3c      	itt	cc
 8005ddc:	021b      	lslcc	r3, r3, #8
 8005dde:	3008      	addcc	r0, #8
 8005de0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005de4:	bf3c      	itt	cc
 8005de6:	011b      	lslcc	r3, r3, #4
 8005de8:	3004      	addcc	r0, #4
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dee:	bf3c      	itt	cc
 8005df0:	009b      	lslcc	r3, r3, #2
 8005df2:	3002      	addcc	r0, #2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	db05      	blt.n	8005e04 <__hi0bits+0x3c>
 8005df8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005dfc:	f100 0001 	add.w	r0, r0, #1
 8005e00:	bf08      	it	eq
 8005e02:	2020      	moveq	r0, #32
 8005e04:	4770      	bx	lr

08005e06 <__lo0bits>:
 8005e06:	6803      	ldr	r3, [r0, #0]
 8005e08:	4602      	mov	r2, r0
 8005e0a:	f013 0007 	ands.w	r0, r3, #7
 8005e0e:	d00b      	beq.n	8005e28 <__lo0bits+0x22>
 8005e10:	07d9      	lsls	r1, r3, #31
 8005e12:	d421      	bmi.n	8005e58 <__lo0bits+0x52>
 8005e14:	0798      	lsls	r0, r3, #30
 8005e16:	bf49      	itett	mi
 8005e18:	085b      	lsrmi	r3, r3, #1
 8005e1a:	089b      	lsrpl	r3, r3, #2
 8005e1c:	2001      	movmi	r0, #1
 8005e1e:	6013      	strmi	r3, [r2, #0]
 8005e20:	bf5c      	itt	pl
 8005e22:	2002      	movpl	r0, #2
 8005e24:	6013      	strpl	r3, [r2, #0]
 8005e26:	4770      	bx	lr
 8005e28:	b299      	uxth	r1, r3
 8005e2a:	b909      	cbnz	r1, 8005e30 <__lo0bits+0x2a>
 8005e2c:	2010      	movs	r0, #16
 8005e2e:	0c1b      	lsrs	r3, r3, #16
 8005e30:	b2d9      	uxtb	r1, r3
 8005e32:	b909      	cbnz	r1, 8005e38 <__lo0bits+0x32>
 8005e34:	3008      	adds	r0, #8
 8005e36:	0a1b      	lsrs	r3, r3, #8
 8005e38:	0719      	lsls	r1, r3, #28
 8005e3a:	bf04      	itt	eq
 8005e3c:	091b      	lsreq	r3, r3, #4
 8005e3e:	3004      	addeq	r0, #4
 8005e40:	0799      	lsls	r1, r3, #30
 8005e42:	bf04      	itt	eq
 8005e44:	089b      	lsreq	r3, r3, #2
 8005e46:	3002      	addeq	r0, #2
 8005e48:	07d9      	lsls	r1, r3, #31
 8005e4a:	d403      	bmi.n	8005e54 <__lo0bits+0x4e>
 8005e4c:	085b      	lsrs	r3, r3, #1
 8005e4e:	f100 0001 	add.w	r0, r0, #1
 8005e52:	d003      	beq.n	8005e5c <__lo0bits+0x56>
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4770      	bx	lr
 8005e58:	2000      	movs	r0, #0
 8005e5a:	4770      	bx	lr
 8005e5c:	2020      	movs	r0, #32
 8005e5e:	4770      	bx	lr

08005e60 <__i2b>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	460c      	mov	r4, r1
 8005e64:	2101      	movs	r1, #1
 8005e66:	f7ff febd 	bl	8005be4 <_Balloc>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	b928      	cbnz	r0, 8005e7a <__i2b+0x1a>
 8005e6e:	f240 1145 	movw	r1, #325	@ 0x145
 8005e72:	4b04      	ldr	r3, [pc, #16]	@ (8005e84 <__i2b+0x24>)
 8005e74:	4804      	ldr	r0, [pc, #16]	@ (8005e88 <__i2b+0x28>)
 8005e76:	f001 fc29 	bl	80076cc <__assert_func>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	6144      	str	r4, [r0, #20]
 8005e7e:	6103      	str	r3, [r0, #16]
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	bf00      	nop
 8005e84:	0800872d 	.word	0x0800872d
 8005e88:	0800873e 	.word	0x0800873e

08005e8c <__multiply>:
 8005e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e90:	4614      	mov	r4, r2
 8005e92:	690a      	ldr	r2, [r1, #16]
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	460f      	mov	r7, r1
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	bfa2      	ittt	ge
 8005e9c:	4623      	movge	r3, r4
 8005e9e:	460c      	movge	r4, r1
 8005ea0:	461f      	movge	r7, r3
 8005ea2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ea6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005eaa:	68a3      	ldr	r3, [r4, #8]
 8005eac:	6861      	ldr	r1, [r4, #4]
 8005eae:	eb0a 0609 	add.w	r6, sl, r9
 8005eb2:	42b3      	cmp	r3, r6
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	bfb8      	it	lt
 8005eb8:	3101      	addlt	r1, #1
 8005eba:	f7ff fe93 	bl	8005be4 <_Balloc>
 8005ebe:	b930      	cbnz	r0, 8005ece <__multiply+0x42>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005ec6:	4b43      	ldr	r3, [pc, #268]	@ (8005fd4 <__multiply+0x148>)
 8005ec8:	4843      	ldr	r0, [pc, #268]	@ (8005fd8 <__multiply+0x14c>)
 8005eca:	f001 fbff 	bl	80076cc <__assert_func>
 8005ece:	f100 0514 	add.w	r5, r0, #20
 8005ed2:	462b      	mov	r3, r5
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005eda:	4543      	cmp	r3, r8
 8005edc:	d321      	bcc.n	8005f22 <__multiply+0x96>
 8005ede:	f107 0114 	add.w	r1, r7, #20
 8005ee2:	f104 0214 	add.w	r2, r4, #20
 8005ee6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005eea:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005eee:	9302      	str	r3, [sp, #8]
 8005ef0:	1b13      	subs	r3, r2, r4
 8005ef2:	3b15      	subs	r3, #21
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	3304      	adds	r3, #4
 8005efa:	f104 0715 	add.w	r7, r4, #21
 8005efe:	42ba      	cmp	r2, r7
 8005f00:	bf38      	it	cc
 8005f02:	2304      	movcc	r3, #4
 8005f04:	9301      	str	r3, [sp, #4]
 8005f06:	9b02      	ldr	r3, [sp, #8]
 8005f08:	9103      	str	r1, [sp, #12]
 8005f0a:	428b      	cmp	r3, r1
 8005f0c:	d80c      	bhi.n	8005f28 <__multiply+0x9c>
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	dd03      	ble.n	8005f1a <__multiply+0x8e>
 8005f12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d05a      	beq.n	8005fd0 <__multiply+0x144>
 8005f1a:	6106      	str	r6, [r0, #16]
 8005f1c:	b005      	add	sp, #20
 8005f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f22:	f843 2b04 	str.w	r2, [r3], #4
 8005f26:	e7d8      	b.n	8005eda <__multiply+0x4e>
 8005f28:	f8b1 a000 	ldrh.w	sl, [r1]
 8005f2c:	f1ba 0f00 	cmp.w	sl, #0
 8005f30:	d023      	beq.n	8005f7a <__multiply+0xee>
 8005f32:	46a9      	mov	r9, r5
 8005f34:	f04f 0c00 	mov.w	ip, #0
 8005f38:	f104 0e14 	add.w	lr, r4, #20
 8005f3c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005f40:	f8d9 3000 	ldr.w	r3, [r9]
 8005f44:	fa1f fb87 	uxth.w	fp, r7
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f4e:	4463      	add	r3, ip
 8005f50:	f8d9 c000 	ldr.w	ip, [r9]
 8005f54:	0c3f      	lsrs	r7, r7, #16
 8005f56:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f5a:	fb0a c707 	mla	r7, sl, r7, ip
 8005f5e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f68:	4572      	cmp	r2, lr
 8005f6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005f6e:	f849 3b04 	str.w	r3, [r9], #4
 8005f72:	d8e3      	bhi.n	8005f3c <__multiply+0xb0>
 8005f74:	9b01      	ldr	r3, [sp, #4]
 8005f76:	f845 c003 	str.w	ip, [r5, r3]
 8005f7a:	9b03      	ldr	r3, [sp, #12]
 8005f7c:	3104      	adds	r1, #4
 8005f7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	d021      	beq.n	8005fcc <__multiply+0x140>
 8005f88:	46ae      	mov	lr, r5
 8005f8a:	f04f 0a00 	mov.w	sl, #0
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	f104 0c14 	add.w	ip, r4, #20
 8005f94:	f8bc b000 	ldrh.w	fp, [ip]
 8005f98:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	fb09 770b 	mla	r7, r9, fp, r7
 8005fa2:	4457      	add	r7, sl
 8005fa4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005fa8:	f84e 3b04 	str.w	r3, [lr], #4
 8005fac:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fb4:	f8be 3000 	ldrh.w	r3, [lr]
 8005fb8:	4562      	cmp	r2, ip
 8005fba:	fb09 330a 	mla	r3, r9, sl, r3
 8005fbe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005fc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fc6:	d8e5      	bhi.n	8005f94 <__multiply+0x108>
 8005fc8:	9f01      	ldr	r7, [sp, #4]
 8005fca:	51eb      	str	r3, [r5, r7]
 8005fcc:	3504      	adds	r5, #4
 8005fce:	e79a      	b.n	8005f06 <__multiply+0x7a>
 8005fd0:	3e01      	subs	r6, #1
 8005fd2:	e79c      	b.n	8005f0e <__multiply+0x82>
 8005fd4:	0800872d 	.word	0x0800872d
 8005fd8:	0800873e 	.word	0x0800873e

08005fdc <__pow5mult>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	f012 0203 	ands.w	r2, r2, #3
 8005fe6:	4607      	mov	r7, r0
 8005fe8:	460e      	mov	r6, r1
 8005fea:	d007      	beq.n	8005ffc <__pow5mult+0x20>
 8005fec:	4c25      	ldr	r4, [pc, #148]	@ (8006084 <__pow5mult+0xa8>)
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ff6:	f7ff fe57 	bl	8005ca8 <__multadd>
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	10ad      	asrs	r5, r5, #2
 8005ffe:	d03d      	beq.n	800607c <__pow5mult+0xa0>
 8006000:	69fc      	ldr	r4, [r7, #28]
 8006002:	b97c      	cbnz	r4, 8006024 <__pow5mult+0x48>
 8006004:	2010      	movs	r0, #16
 8006006:	f7ff fd37 	bl	8005a78 <malloc>
 800600a:	4602      	mov	r2, r0
 800600c:	61f8      	str	r0, [r7, #28]
 800600e:	b928      	cbnz	r0, 800601c <__pow5mult+0x40>
 8006010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006014:	4b1c      	ldr	r3, [pc, #112]	@ (8006088 <__pow5mult+0xac>)
 8006016:	481d      	ldr	r0, [pc, #116]	@ (800608c <__pow5mult+0xb0>)
 8006018:	f001 fb58 	bl	80076cc <__assert_func>
 800601c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006020:	6004      	str	r4, [r0, #0]
 8006022:	60c4      	str	r4, [r0, #12]
 8006024:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800602c:	b94c      	cbnz	r4, 8006042 <__pow5mult+0x66>
 800602e:	f240 2171 	movw	r1, #625	@ 0x271
 8006032:	4638      	mov	r0, r7
 8006034:	f7ff ff14 	bl	8005e60 <__i2b>
 8006038:	2300      	movs	r3, #0
 800603a:	4604      	mov	r4, r0
 800603c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006040:	6003      	str	r3, [r0, #0]
 8006042:	f04f 0900 	mov.w	r9, #0
 8006046:	07eb      	lsls	r3, r5, #31
 8006048:	d50a      	bpl.n	8006060 <__pow5mult+0x84>
 800604a:	4631      	mov	r1, r6
 800604c:	4622      	mov	r2, r4
 800604e:	4638      	mov	r0, r7
 8006050:	f7ff ff1c 	bl	8005e8c <__multiply>
 8006054:	4680      	mov	r8, r0
 8006056:	4631      	mov	r1, r6
 8006058:	4638      	mov	r0, r7
 800605a:	f7ff fe03 	bl	8005c64 <_Bfree>
 800605e:	4646      	mov	r6, r8
 8006060:	106d      	asrs	r5, r5, #1
 8006062:	d00b      	beq.n	800607c <__pow5mult+0xa0>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	b938      	cbnz	r0, 8006078 <__pow5mult+0x9c>
 8006068:	4622      	mov	r2, r4
 800606a:	4621      	mov	r1, r4
 800606c:	4638      	mov	r0, r7
 800606e:	f7ff ff0d 	bl	8005e8c <__multiply>
 8006072:	6020      	str	r0, [r4, #0]
 8006074:	f8c0 9000 	str.w	r9, [r0]
 8006078:	4604      	mov	r4, r0
 800607a:	e7e4      	b.n	8006046 <__pow5mult+0x6a>
 800607c:	4630      	mov	r0, r6
 800607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006082:	bf00      	nop
 8006084:	08008798 	.word	0x08008798
 8006088:	080086be 	.word	0x080086be
 800608c:	0800873e 	.word	0x0800873e

08006090 <__lshift>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	4607      	mov	r7, r0
 8006098:	4691      	mov	r9, r2
 800609a:	6923      	ldr	r3, [r4, #16]
 800609c:	6849      	ldr	r1, [r1, #4]
 800609e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060a8:	f108 0601 	add.w	r6, r8, #1
 80060ac:	42b3      	cmp	r3, r6
 80060ae:	db0b      	blt.n	80060c8 <__lshift+0x38>
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff fd97 	bl	8005be4 <_Balloc>
 80060b6:	4605      	mov	r5, r0
 80060b8:	b948      	cbnz	r0, 80060ce <__lshift+0x3e>
 80060ba:	4602      	mov	r2, r0
 80060bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80060c0:	4b27      	ldr	r3, [pc, #156]	@ (8006160 <__lshift+0xd0>)
 80060c2:	4828      	ldr	r0, [pc, #160]	@ (8006164 <__lshift+0xd4>)
 80060c4:	f001 fb02 	bl	80076cc <__assert_func>
 80060c8:	3101      	adds	r1, #1
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	e7ee      	b.n	80060ac <__lshift+0x1c>
 80060ce:	2300      	movs	r3, #0
 80060d0:	f100 0114 	add.w	r1, r0, #20
 80060d4:	f100 0210 	add.w	r2, r0, #16
 80060d8:	4618      	mov	r0, r3
 80060da:	4553      	cmp	r3, sl
 80060dc:	db33      	blt.n	8006146 <__lshift+0xb6>
 80060de:	6920      	ldr	r0, [r4, #16]
 80060e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060e4:	f104 0314 	add.w	r3, r4, #20
 80060e8:	f019 091f 	ands.w	r9, r9, #31
 80060ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060f4:	d02b      	beq.n	800614e <__lshift+0xbe>
 80060f6:	468a      	mov	sl, r1
 80060f8:	2200      	movs	r2, #0
 80060fa:	f1c9 0e20 	rsb	lr, r9, #32
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	fa00 f009 	lsl.w	r0, r0, r9
 8006104:	4310      	orrs	r0, r2
 8006106:	f84a 0b04 	str.w	r0, [sl], #4
 800610a:	f853 2b04 	ldr.w	r2, [r3], #4
 800610e:	459c      	cmp	ip, r3
 8006110:	fa22 f20e 	lsr.w	r2, r2, lr
 8006114:	d8f3      	bhi.n	80060fe <__lshift+0x6e>
 8006116:	ebac 0304 	sub.w	r3, ip, r4
 800611a:	3b15      	subs	r3, #21
 800611c:	f023 0303 	bic.w	r3, r3, #3
 8006120:	3304      	adds	r3, #4
 8006122:	f104 0015 	add.w	r0, r4, #21
 8006126:	4584      	cmp	ip, r0
 8006128:	bf38      	it	cc
 800612a:	2304      	movcc	r3, #4
 800612c:	50ca      	str	r2, [r1, r3]
 800612e:	b10a      	cbz	r2, 8006134 <__lshift+0xa4>
 8006130:	f108 0602 	add.w	r6, r8, #2
 8006134:	3e01      	subs	r6, #1
 8006136:	4638      	mov	r0, r7
 8006138:	4621      	mov	r1, r4
 800613a:	612e      	str	r6, [r5, #16]
 800613c:	f7ff fd92 	bl	8005c64 <_Bfree>
 8006140:	4628      	mov	r0, r5
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	f842 0f04 	str.w	r0, [r2, #4]!
 800614a:	3301      	adds	r3, #1
 800614c:	e7c5      	b.n	80060da <__lshift+0x4a>
 800614e:	3904      	subs	r1, #4
 8006150:	f853 2b04 	ldr.w	r2, [r3], #4
 8006154:	459c      	cmp	ip, r3
 8006156:	f841 2f04 	str.w	r2, [r1, #4]!
 800615a:	d8f9      	bhi.n	8006150 <__lshift+0xc0>
 800615c:	e7ea      	b.n	8006134 <__lshift+0xa4>
 800615e:	bf00      	nop
 8006160:	0800872d 	.word	0x0800872d
 8006164:	0800873e 	.word	0x0800873e

08006168 <__mcmp>:
 8006168:	4603      	mov	r3, r0
 800616a:	690a      	ldr	r2, [r1, #16]
 800616c:	6900      	ldr	r0, [r0, #16]
 800616e:	b530      	push	{r4, r5, lr}
 8006170:	1a80      	subs	r0, r0, r2
 8006172:	d10e      	bne.n	8006192 <__mcmp+0x2a>
 8006174:	3314      	adds	r3, #20
 8006176:	3114      	adds	r1, #20
 8006178:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800617c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006180:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006184:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006188:	4295      	cmp	r5, r2
 800618a:	d003      	beq.n	8006194 <__mcmp+0x2c>
 800618c:	d205      	bcs.n	800619a <__mcmp+0x32>
 800618e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006192:	bd30      	pop	{r4, r5, pc}
 8006194:	42a3      	cmp	r3, r4
 8006196:	d3f3      	bcc.n	8006180 <__mcmp+0x18>
 8006198:	e7fb      	b.n	8006192 <__mcmp+0x2a>
 800619a:	2001      	movs	r0, #1
 800619c:	e7f9      	b.n	8006192 <__mcmp+0x2a>
	...

080061a0 <__mdiff>:
 80061a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	4689      	mov	r9, r1
 80061a6:	4606      	mov	r6, r0
 80061a8:	4611      	mov	r1, r2
 80061aa:	4648      	mov	r0, r9
 80061ac:	4614      	mov	r4, r2
 80061ae:	f7ff ffdb 	bl	8006168 <__mcmp>
 80061b2:	1e05      	subs	r5, r0, #0
 80061b4:	d112      	bne.n	80061dc <__mdiff+0x3c>
 80061b6:	4629      	mov	r1, r5
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff fd13 	bl	8005be4 <_Balloc>
 80061be:	4602      	mov	r2, r0
 80061c0:	b928      	cbnz	r0, 80061ce <__mdiff+0x2e>
 80061c2:	f240 2137 	movw	r1, #567	@ 0x237
 80061c6:	4b3e      	ldr	r3, [pc, #248]	@ (80062c0 <__mdiff+0x120>)
 80061c8:	483e      	ldr	r0, [pc, #248]	@ (80062c4 <__mdiff+0x124>)
 80061ca:	f001 fa7f 	bl	80076cc <__assert_func>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061d4:	4610      	mov	r0, r2
 80061d6:	b003      	add	sp, #12
 80061d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061dc:	bfbc      	itt	lt
 80061de:	464b      	movlt	r3, r9
 80061e0:	46a1      	movlt	r9, r4
 80061e2:	4630      	mov	r0, r6
 80061e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061e8:	bfba      	itte	lt
 80061ea:	461c      	movlt	r4, r3
 80061ec:	2501      	movlt	r5, #1
 80061ee:	2500      	movge	r5, #0
 80061f0:	f7ff fcf8 	bl	8005be4 <_Balloc>
 80061f4:	4602      	mov	r2, r0
 80061f6:	b918      	cbnz	r0, 8006200 <__mdiff+0x60>
 80061f8:	f240 2145 	movw	r1, #581	@ 0x245
 80061fc:	4b30      	ldr	r3, [pc, #192]	@ (80062c0 <__mdiff+0x120>)
 80061fe:	e7e3      	b.n	80061c8 <__mdiff+0x28>
 8006200:	f100 0b14 	add.w	fp, r0, #20
 8006204:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006208:	f109 0310 	add.w	r3, r9, #16
 800620c:	60c5      	str	r5, [r0, #12]
 800620e:	f04f 0c00 	mov.w	ip, #0
 8006212:	f109 0514 	add.w	r5, r9, #20
 8006216:	46d9      	mov	r9, fp
 8006218:	6926      	ldr	r6, [r4, #16]
 800621a:	f104 0e14 	add.w	lr, r4, #20
 800621e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006222:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006226:	9301      	str	r3, [sp, #4]
 8006228:	9b01      	ldr	r3, [sp, #4]
 800622a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800622e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006232:	b281      	uxth	r1, r0
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	fa1f f38a 	uxth.w	r3, sl
 800623a:	1a5b      	subs	r3, r3, r1
 800623c:	0c00      	lsrs	r0, r0, #16
 800623e:	4463      	add	r3, ip
 8006240:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006244:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006248:	b29b      	uxth	r3, r3
 800624a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800624e:	4576      	cmp	r6, lr
 8006250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006254:	f849 3b04 	str.w	r3, [r9], #4
 8006258:	d8e6      	bhi.n	8006228 <__mdiff+0x88>
 800625a:	1b33      	subs	r3, r6, r4
 800625c:	3b15      	subs	r3, #21
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	3415      	adds	r4, #21
 8006264:	3304      	adds	r3, #4
 8006266:	42a6      	cmp	r6, r4
 8006268:	bf38      	it	cc
 800626a:	2304      	movcc	r3, #4
 800626c:	441d      	add	r5, r3
 800626e:	445b      	add	r3, fp
 8006270:	461e      	mov	r6, r3
 8006272:	462c      	mov	r4, r5
 8006274:	4544      	cmp	r4, r8
 8006276:	d30e      	bcc.n	8006296 <__mdiff+0xf6>
 8006278:	f108 0103 	add.w	r1, r8, #3
 800627c:	1b49      	subs	r1, r1, r5
 800627e:	f021 0103 	bic.w	r1, r1, #3
 8006282:	3d03      	subs	r5, #3
 8006284:	45a8      	cmp	r8, r5
 8006286:	bf38      	it	cc
 8006288:	2100      	movcc	r1, #0
 800628a:	440b      	add	r3, r1
 800628c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006290:	b199      	cbz	r1, 80062ba <__mdiff+0x11a>
 8006292:	6117      	str	r7, [r2, #16]
 8006294:	e79e      	b.n	80061d4 <__mdiff+0x34>
 8006296:	46e6      	mov	lr, ip
 8006298:	f854 1b04 	ldr.w	r1, [r4], #4
 800629c:	fa1f fc81 	uxth.w	ip, r1
 80062a0:	44f4      	add	ip, lr
 80062a2:	0c08      	lsrs	r0, r1, #16
 80062a4:	4471      	add	r1, lr
 80062a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80062aa:	b289      	uxth	r1, r1
 80062ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80062b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80062b4:	f846 1b04 	str.w	r1, [r6], #4
 80062b8:	e7dc      	b.n	8006274 <__mdiff+0xd4>
 80062ba:	3f01      	subs	r7, #1
 80062bc:	e7e6      	b.n	800628c <__mdiff+0xec>
 80062be:	bf00      	nop
 80062c0:	0800872d 	.word	0x0800872d
 80062c4:	0800873e 	.word	0x0800873e

080062c8 <__ulp>:
 80062c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006304 <__ulp+0x3c>)
 80062ca:	400b      	ands	r3, r1
 80062cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dc08      	bgt.n	80062e6 <__ulp+0x1e>
 80062d4:	425b      	negs	r3, r3
 80062d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80062da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062de:	da04      	bge.n	80062ea <__ulp+0x22>
 80062e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80062e4:	4113      	asrs	r3, r2
 80062e6:	2200      	movs	r2, #0
 80062e8:	e008      	b.n	80062fc <__ulp+0x34>
 80062ea:	f1a2 0314 	sub.w	r3, r2, #20
 80062ee:	2b1e      	cmp	r3, #30
 80062f0:	bfd6      	itet	le
 80062f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80062f6:	2201      	movgt	r2, #1
 80062f8:	40da      	lsrle	r2, r3
 80062fa:	2300      	movs	r3, #0
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	7ff00000 	.word	0x7ff00000

08006308 <__b2d>:
 8006308:	6902      	ldr	r2, [r0, #16]
 800630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800630c:	f100 0614 	add.w	r6, r0, #20
 8006310:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006314:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006318:	4f1e      	ldr	r7, [pc, #120]	@ (8006394 <__b2d+0x8c>)
 800631a:	4620      	mov	r0, r4
 800631c:	f7ff fd54 	bl	8005dc8 <__hi0bits>
 8006320:	4603      	mov	r3, r0
 8006322:	f1c0 0020 	rsb	r0, r0, #32
 8006326:	2b0a      	cmp	r3, #10
 8006328:	f1a2 0504 	sub.w	r5, r2, #4
 800632c:	6008      	str	r0, [r1, #0]
 800632e:	dc12      	bgt.n	8006356 <__b2d+0x4e>
 8006330:	42ae      	cmp	r6, r5
 8006332:	bf2c      	ite	cs
 8006334:	2200      	movcs	r2, #0
 8006336:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800633a:	f1c3 0c0b 	rsb	ip, r3, #11
 800633e:	3315      	adds	r3, #21
 8006340:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006344:	fa04 f303 	lsl.w	r3, r4, r3
 8006348:	fa22 f20c 	lsr.w	r2, r2, ip
 800634c:	ea4e 0107 	orr.w	r1, lr, r7
 8006350:	431a      	orrs	r2, r3
 8006352:	4610      	mov	r0, r2
 8006354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006356:	42ae      	cmp	r6, r5
 8006358:	bf36      	itet	cc
 800635a:	f1a2 0508 	subcc.w	r5, r2, #8
 800635e:	2200      	movcs	r2, #0
 8006360:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006364:	3b0b      	subs	r3, #11
 8006366:	d012      	beq.n	800638e <__b2d+0x86>
 8006368:	f1c3 0720 	rsb	r7, r3, #32
 800636c:	fa22 f107 	lsr.w	r1, r2, r7
 8006370:	409c      	lsls	r4, r3
 8006372:	430c      	orrs	r4, r1
 8006374:	42b5      	cmp	r5, r6
 8006376:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800637a:	bf94      	ite	ls
 800637c:	2400      	movls	r4, #0
 800637e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006382:	409a      	lsls	r2, r3
 8006384:	40fc      	lsrs	r4, r7
 8006386:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800638a:	4322      	orrs	r2, r4
 800638c:	e7e1      	b.n	8006352 <__b2d+0x4a>
 800638e:	ea44 0107 	orr.w	r1, r4, r7
 8006392:	e7de      	b.n	8006352 <__b2d+0x4a>
 8006394:	3ff00000 	.word	0x3ff00000

08006398 <__d2b>:
 8006398:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800639c:	2101      	movs	r1, #1
 800639e:	4690      	mov	r8, r2
 80063a0:	4699      	mov	r9, r3
 80063a2:	9e08      	ldr	r6, [sp, #32]
 80063a4:	f7ff fc1e 	bl	8005be4 <_Balloc>
 80063a8:	4604      	mov	r4, r0
 80063aa:	b930      	cbnz	r0, 80063ba <__d2b+0x22>
 80063ac:	4602      	mov	r2, r0
 80063ae:	f240 310f 	movw	r1, #783	@ 0x30f
 80063b2:	4b23      	ldr	r3, [pc, #140]	@ (8006440 <__d2b+0xa8>)
 80063b4:	4823      	ldr	r0, [pc, #140]	@ (8006444 <__d2b+0xac>)
 80063b6:	f001 f989 	bl	80076cc <__assert_func>
 80063ba:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063c2:	b10d      	cbz	r5, 80063c8 <__d2b+0x30>
 80063c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	f1b8 0300 	subs.w	r3, r8, #0
 80063ce:	d024      	beq.n	800641a <__d2b+0x82>
 80063d0:	4668      	mov	r0, sp
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f7ff fd17 	bl	8005e06 <__lo0bits>
 80063d8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063dc:	b1d8      	cbz	r0, 8006416 <__d2b+0x7e>
 80063de:	f1c0 0320 	rsb	r3, r0, #32
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	430b      	orrs	r3, r1
 80063e8:	40c2      	lsrs	r2, r0
 80063ea:	6163      	str	r3, [r4, #20]
 80063ec:	9201      	str	r2, [sp, #4]
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bf0c      	ite	eq
 80063f4:	2201      	moveq	r2, #1
 80063f6:	2202      	movne	r2, #2
 80063f8:	61a3      	str	r3, [r4, #24]
 80063fa:	6122      	str	r2, [r4, #16]
 80063fc:	b1ad      	cbz	r5, 800642a <__d2b+0x92>
 80063fe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006402:	4405      	add	r5, r0
 8006404:	6035      	str	r5, [r6, #0]
 8006406:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800640a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800640c:	6018      	str	r0, [r3, #0]
 800640e:	4620      	mov	r0, r4
 8006410:	b002      	add	sp, #8
 8006412:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006416:	6161      	str	r1, [r4, #20]
 8006418:	e7e9      	b.n	80063ee <__d2b+0x56>
 800641a:	a801      	add	r0, sp, #4
 800641c:	f7ff fcf3 	bl	8005e06 <__lo0bits>
 8006420:	9b01      	ldr	r3, [sp, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	6163      	str	r3, [r4, #20]
 8006426:	3020      	adds	r0, #32
 8006428:	e7e7      	b.n	80063fa <__d2b+0x62>
 800642a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800642e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006432:	6030      	str	r0, [r6, #0]
 8006434:	6918      	ldr	r0, [r3, #16]
 8006436:	f7ff fcc7 	bl	8005dc8 <__hi0bits>
 800643a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800643e:	e7e4      	b.n	800640a <__d2b+0x72>
 8006440:	0800872d 	.word	0x0800872d
 8006444:	0800873e 	.word	0x0800873e

08006448 <__ratio>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	b085      	sub	sp, #20
 800644e:	e9cd 1000 	strd	r1, r0, [sp]
 8006452:	a902      	add	r1, sp, #8
 8006454:	f7ff ff58 	bl	8006308 <__b2d>
 8006458:	468b      	mov	fp, r1
 800645a:	4606      	mov	r6, r0
 800645c:	460f      	mov	r7, r1
 800645e:	9800      	ldr	r0, [sp, #0]
 8006460:	a903      	add	r1, sp, #12
 8006462:	f7ff ff51 	bl	8006308 <__b2d>
 8006466:	460d      	mov	r5, r1
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	4689      	mov	r9, r1
 800646c:	6919      	ldr	r1, [r3, #16]
 800646e:	9b00      	ldr	r3, [sp, #0]
 8006470:	4604      	mov	r4, r0
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	4630      	mov	r0, r6
 8006476:	1ac9      	subs	r1, r1, r3
 8006478:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800647c:	1a9b      	subs	r3, r3, r2
 800647e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006482:	2b00      	cmp	r3, #0
 8006484:	bfcd      	iteet	gt
 8006486:	463a      	movgt	r2, r7
 8006488:	462a      	movle	r2, r5
 800648a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800648e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006492:	bfd8      	it	le
 8006494:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006498:	464b      	mov	r3, r9
 800649a:	4622      	mov	r2, r4
 800649c:	4659      	mov	r1, fp
 800649e:	f7fa f945 	bl	800072c <__aeabi_ddiv>
 80064a2:	b005      	add	sp, #20
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064a8 <__copybits>:
 80064a8:	3901      	subs	r1, #1
 80064aa:	b570      	push	{r4, r5, r6, lr}
 80064ac:	1149      	asrs	r1, r1, #5
 80064ae:	6914      	ldr	r4, [r2, #16]
 80064b0:	3101      	adds	r1, #1
 80064b2:	f102 0314 	add.w	r3, r2, #20
 80064b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064be:	1f05      	subs	r5, r0, #4
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d30c      	bcc.n	80064de <__copybits+0x36>
 80064c4:	1aa3      	subs	r3, r4, r2
 80064c6:	3b11      	subs	r3, #17
 80064c8:	f023 0303 	bic.w	r3, r3, #3
 80064cc:	3211      	adds	r2, #17
 80064ce:	42a2      	cmp	r2, r4
 80064d0:	bf88      	it	hi
 80064d2:	2300      	movhi	r3, #0
 80064d4:	4418      	add	r0, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	4288      	cmp	r0, r1
 80064da:	d305      	bcc.n	80064e8 <__copybits+0x40>
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
 80064de:	f853 6b04 	ldr.w	r6, [r3], #4
 80064e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80064e6:	e7eb      	b.n	80064c0 <__copybits+0x18>
 80064e8:	f840 3b04 	str.w	r3, [r0], #4
 80064ec:	e7f4      	b.n	80064d8 <__copybits+0x30>

080064ee <__any_on>:
 80064ee:	f100 0214 	add.w	r2, r0, #20
 80064f2:	6900      	ldr	r0, [r0, #16]
 80064f4:	114b      	asrs	r3, r1, #5
 80064f6:	4298      	cmp	r0, r3
 80064f8:	b510      	push	{r4, lr}
 80064fa:	db11      	blt.n	8006520 <__any_on+0x32>
 80064fc:	dd0a      	ble.n	8006514 <__any_on+0x26>
 80064fe:	f011 011f 	ands.w	r1, r1, #31
 8006502:	d007      	beq.n	8006514 <__any_on+0x26>
 8006504:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006508:	fa24 f001 	lsr.w	r0, r4, r1
 800650c:	fa00 f101 	lsl.w	r1, r0, r1
 8006510:	428c      	cmp	r4, r1
 8006512:	d10b      	bne.n	800652c <__any_on+0x3e>
 8006514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006518:	4293      	cmp	r3, r2
 800651a:	d803      	bhi.n	8006524 <__any_on+0x36>
 800651c:	2000      	movs	r0, #0
 800651e:	bd10      	pop	{r4, pc}
 8006520:	4603      	mov	r3, r0
 8006522:	e7f7      	b.n	8006514 <__any_on+0x26>
 8006524:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006528:	2900      	cmp	r1, #0
 800652a:	d0f5      	beq.n	8006518 <__any_on+0x2a>
 800652c:	2001      	movs	r0, #1
 800652e:	e7f6      	b.n	800651e <__any_on+0x30>

08006530 <sulp>:
 8006530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006534:	460f      	mov	r7, r1
 8006536:	4690      	mov	r8, r2
 8006538:	f7ff fec6 	bl	80062c8 <__ulp>
 800653c:	4604      	mov	r4, r0
 800653e:	460d      	mov	r5, r1
 8006540:	f1b8 0f00 	cmp.w	r8, #0
 8006544:	d011      	beq.n	800656a <sulp+0x3a>
 8006546:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800654a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800654e:	2b00      	cmp	r3, #0
 8006550:	dd0b      	ble.n	800656a <sulp+0x3a>
 8006552:	2400      	movs	r4, #0
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800655a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800655e:	4622      	mov	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	f7f9 ffb9 	bl	80004d8 <__aeabi_dmul>
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
 800656a:	4620      	mov	r0, r4
 800656c:	4629      	mov	r1, r5
 800656e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006572:	0000      	movs	r0, r0
 8006574:	0000      	movs	r0, r0
	...

08006578 <_strtod_l>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	b09f      	sub	sp, #124	@ 0x7c
 800657e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006580:	2200      	movs	r2, #0
 8006582:	460c      	mov	r4, r1
 8006584:	921a      	str	r2, [sp, #104]	@ 0x68
 8006586:	f04f 0a00 	mov.w	sl, #0
 800658a:	f04f 0b00 	mov.w	fp, #0
 800658e:	460a      	mov	r2, r1
 8006590:	9005      	str	r0, [sp, #20]
 8006592:	9219      	str	r2, [sp, #100]	@ 0x64
 8006594:	7811      	ldrb	r1, [r2, #0]
 8006596:	292b      	cmp	r1, #43	@ 0x2b
 8006598:	d048      	beq.n	800662c <_strtod_l+0xb4>
 800659a:	d836      	bhi.n	800660a <_strtod_l+0x92>
 800659c:	290d      	cmp	r1, #13
 800659e:	d830      	bhi.n	8006602 <_strtod_l+0x8a>
 80065a0:	2908      	cmp	r1, #8
 80065a2:	d830      	bhi.n	8006606 <_strtod_l+0x8e>
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d039      	beq.n	800661c <_strtod_l+0xa4>
 80065a8:	2200      	movs	r2, #0
 80065aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80065ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80065ae:	782a      	ldrb	r2, [r5, #0]
 80065b0:	2a30      	cmp	r2, #48	@ 0x30
 80065b2:	f040 80b1 	bne.w	8006718 <_strtod_l+0x1a0>
 80065b6:	786a      	ldrb	r2, [r5, #1]
 80065b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80065bc:	2a58      	cmp	r2, #88	@ 0x58
 80065be:	d16c      	bne.n	800669a <_strtod_l+0x122>
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065c4:	4a8e      	ldr	r2, [pc, #568]	@ (8006800 <_strtod_l+0x288>)
 80065c6:	9301      	str	r3, [sp, #4]
 80065c8:	ab1a      	add	r3, sp, #104	@ 0x68
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	9805      	ldr	r0, [sp, #20]
 80065ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80065d0:	a919      	add	r1, sp, #100	@ 0x64
 80065d2:	f001 f915 	bl	8007800 <__gethex>
 80065d6:	f010 060f 	ands.w	r6, r0, #15
 80065da:	4604      	mov	r4, r0
 80065dc:	d005      	beq.n	80065ea <_strtod_l+0x72>
 80065de:	2e06      	cmp	r6, #6
 80065e0:	d126      	bne.n	8006630 <_strtod_l+0xb8>
 80065e2:	2300      	movs	r3, #0
 80065e4:	3501      	adds	r5, #1
 80065e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80065e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 8584 	bne.w	80070fa <_strtod_l+0xb82>
 80065f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f4:	b1bb      	cbz	r3, 8006626 <_strtod_l+0xae>
 80065f6:	4650      	mov	r0, sl
 80065f8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80065fc:	b01f      	add	sp, #124	@ 0x7c
 80065fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006602:	2920      	cmp	r1, #32
 8006604:	d1d0      	bne.n	80065a8 <_strtod_l+0x30>
 8006606:	3201      	adds	r2, #1
 8006608:	e7c3      	b.n	8006592 <_strtod_l+0x1a>
 800660a:	292d      	cmp	r1, #45	@ 0x2d
 800660c:	d1cc      	bne.n	80065a8 <_strtod_l+0x30>
 800660e:	2101      	movs	r1, #1
 8006610:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006612:	1c51      	adds	r1, r2, #1
 8006614:	9119      	str	r1, [sp, #100]	@ 0x64
 8006616:	7852      	ldrb	r2, [r2, #1]
 8006618:	2a00      	cmp	r2, #0
 800661a:	d1c7      	bne.n	80065ac <_strtod_l+0x34>
 800661c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800661e:	9419      	str	r4, [sp, #100]	@ 0x64
 8006620:	2b00      	cmp	r3, #0
 8006622:	f040 8568 	bne.w	80070f6 <_strtod_l+0xb7e>
 8006626:	4650      	mov	r0, sl
 8006628:	4659      	mov	r1, fp
 800662a:	e7e7      	b.n	80065fc <_strtod_l+0x84>
 800662c:	2100      	movs	r1, #0
 800662e:	e7ef      	b.n	8006610 <_strtod_l+0x98>
 8006630:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006632:	b13a      	cbz	r2, 8006644 <_strtod_l+0xcc>
 8006634:	2135      	movs	r1, #53	@ 0x35
 8006636:	a81c      	add	r0, sp, #112	@ 0x70
 8006638:	f7ff ff36 	bl	80064a8 <__copybits>
 800663c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800663e:	9805      	ldr	r0, [sp, #20]
 8006640:	f7ff fb10 	bl	8005c64 <_Bfree>
 8006644:	3e01      	subs	r6, #1
 8006646:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006648:	2e04      	cmp	r6, #4
 800664a:	d806      	bhi.n	800665a <_strtod_l+0xe2>
 800664c:	e8df f006 	tbb	[pc, r6]
 8006650:	201d0314 	.word	0x201d0314
 8006654:	14          	.byte	0x14
 8006655:	00          	.byte	0x00
 8006656:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800665a:	05e1      	lsls	r1, r4, #23
 800665c:	bf48      	it	mi
 800665e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006662:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006666:	0d1b      	lsrs	r3, r3, #20
 8006668:	051b      	lsls	r3, r3, #20
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1bd      	bne.n	80065ea <_strtod_l+0x72>
 800666e:	f7fe fb2b 	bl	8004cc8 <__errno>
 8006672:	2322      	movs	r3, #34	@ 0x22
 8006674:	6003      	str	r3, [r0, #0]
 8006676:	e7b8      	b.n	80065ea <_strtod_l+0x72>
 8006678:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800667c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006680:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006684:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006688:	e7e7      	b.n	800665a <_strtod_l+0xe2>
 800668a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8006804 <_strtod_l+0x28c>
 800668e:	e7e4      	b.n	800665a <_strtod_l+0xe2>
 8006690:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006694:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006698:	e7df      	b.n	800665a <_strtod_l+0xe2>
 800669a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	9219      	str	r2, [sp, #100]	@ 0x64
 80066a0:	785b      	ldrb	r3, [r3, #1]
 80066a2:	2b30      	cmp	r3, #48	@ 0x30
 80066a4:	d0f9      	beq.n	800669a <_strtod_l+0x122>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d09f      	beq.n	80065ea <_strtod_l+0x72>
 80066aa:	2301      	movs	r3, #1
 80066ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066b0:	220a      	movs	r2, #10
 80066b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80066b4:	2300      	movs	r3, #0
 80066b6:	461f      	mov	r7, r3
 80066b8:	9308      	str	r3, [sp, #32]
 80066ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80066bc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80066be:	7805      	ldrb	r5, [r0, #0]
 80066c0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80066c4:	b2d9      	uxtb	r1, r3
 80066c6:	2909      	cmp	r1, #9
 80066c8:	d928      	bls.n	800671c <_strtod_l+0x1a4>
 80066ca:	2201      	movs	r2, #1
 80066cc:	494e      	ldr	r1, [pc, #312]	@ (8006808 <_strtod_l+0x290>)
 80066ce:	f000 ffc7 	bl	8007660 <strncmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	d032      	beq.n	800673c <_strtod_l+0x1c4>
 80066d6:	2000      	movs	r0, #0
 80066d8:	462a      	mov	r2, r5
 80066da:	4681      	mov	r9, r0
 80066dc:	463d      	mov	r5, r7
 80066de:	4603      	mov	r3, r0
 80066e0:	2a65      	cmp	r2, #101	@ 0x65
 80066e2:	d001      	beq.n	80066e8 <_strtod_l+0x170>
 80066e4:	2a45      	cmp	r2, #69	@ 0x45
 80066e6:	d114      	bne.n	8006712 <_strtod_l+0x19a>
 80066e8:	b91d      	cbnz	r5, 80066f2 <_strtod_l+0x17a>
 80066ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066ec:	4302      	orrs	r2, r0
 80066ee:	d095      	beq.n	800661c <_strtod_l+0xa4>
 80066f0:	2500      	movs	r5, #0
 80066f2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80066f4:	1c62      	adds	r2, r4, #1
 80066f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80066f8:	7862      	ldrb	r2, [r4, #1]
 80066fa:	2a2b      	cmp	r2, #43	@ 0x2b
 80066fc:	d077      	beq.n	80067ee <_strtod_l+0x276>
 80066fe:	2a2d      	cmp	r2, #45	@ 0x2d
 8006700:	d07b      	beq.n	80067fa <_strtod_l+0x282>
 8006702:	f04f 0c00 	mov.w	ip, #0
 8006706:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800670a:	2909      	cmp	r1, #9
 800670c:	f240 8082 	bls.w	8006814 <_strtod_l+0x29c>
 8006710:	9419      	str	r4, [sp, #100]	@ 0x64
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	e0a2      	b.n	800685e <_strtod_l+0x2e6>
 8006718:	2300      	movs	r3, #0
 800671a:	e7c7      	b.n	80066ac <_strtod_l+0x134>
 800671c:	2f08      	cmp	r7, #8
 800671e:	bfd5      	itete	le
 8006720:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006722:	9908      	ldrgt	r1, [sp, #32]
 8006724:	fb02 3301 	mlale	r3, r2, r1, r3
 8006728:	fb02 3301 	mlagt	r3, r2, r1, r3
 800672c:	f100 0001 	add.w	r0, r0, #1
 8006730:	bfd4      	ite	le
 8006732:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006734:	9308      	strgt	r3, [sp, #32]
 8006736:	3701      	adds	r7, #1
 8006738:	9019      	str	r0, [sp, #100]	@ 0x64
 800673a:	e7bf      	b.n	80066bc <_strtod_l+0x144>
 800673c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	9219      	str	r2, [sp, #100]	@ 0x64
 8006742:	785a      	ldrb	r2, [r3, #1]
 8006744:	b37f      	cbz	r7, 80067a6 <_strtod_l+0x22e>
 8006746:	4681      	mov	r9, r0
 8006748:	463d      	mov	r5, r7
 800674a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800674e:	2b09      	cmp	r3, #9
 8006750:	d912      	bls.n	8006778 <_strtod_l+0x200>
 8006752:	2301      	movs	r3, #1
 8006754:	e7c4      	b.n	80066e0 <_strtod_l+0x168>
 8006756:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006758:	3001      	adds	r0, #1
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	9219      	str	r2, [sp, #100]	@ 0x64
 800675e:	785a      	ldrb	r2, [r3, #1]
 8006760:	2a30      	cmp	r2, #48	@ 0x30
 8006762:	d0f8      	beq.n	8006756 <_strtod_l+0x1de>
 8006764:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006768:	2b08      	cmp	r3, #8
 800676a:	f200 84cb 	bhi.w	8007104 <_strtod_l+0xb8c>
 800676e:	4681      	mov	r9, r0
 8006770:	2000      	movs	r0, #0
 8006772:	4605      	mov	r5, r0
 8006774:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006776:	930c      	str	r3, [sp, #48]	@ 0x30
 8006778:	3a30      	subs	r2, #48	@ 0x30
 800677a:	f100 0301 	add.w	r3, r0, #1
 800677e:	d02a      	beq.n	80067d6 <_strtod_l+0x25e>
 8006780:	4499      	add	r9, r3
 8006782:	210a      	movs	r1, #10
 8006784:	462b      	mov	r3, r5
 8006786:	eb00 0c05 	add.w	ip, r0, r5
 800678a:	4563      	cmp	r3, ip
 800678c:	d10d      	bne.n	80067aa <_strtod_l+0x232>
 800678e:	1c69      	adds	r1, r5, #1
 8006790:	4401      	add	r1, r0
 8006792:	4428      	add	r0, r5
 8006794:	2808      	cmp	r0, #8
 8006796:	dc16      	bgt.n	80067c6 <_strtod_l+0x24e>
 8006798:	230a      	movs	r3, #10
 800679a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800679c:	fb03 2300 	mla	r3, r3, r0, r2
 80067a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80067a2:	2300      	movs	r3, #0
 80067a4:	e018      	b.n	80067d8 <_strtod_l+0x260>
 80067a6:	4638      	mov	r0, r7
 80067a8:	e7da      	b.n	8006760 <_strtod_l+0x1e8>
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	f103 0301 	add.w	r3, r3, #1
 80067b0:	dc03      	bgt.n	80067ba <_strtod_l+0x242>
 80067b2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80067b4:	434e      	muls	r6, r1
 80067b6:	960a      	str	r6, [sp, #40]	@ 0x28
 80067b8:	e7e7      	b.n	800678a <_strtod_l+0x212>
 80067ba:	2b10      	cmp	r3, #16
 80067bc:	bfde      	ittt	le
 80067be:	9e08      	ldrle	r6, [sp, #32]
 80067c0:	434e      	mulle	r6, r1
 80067c2:	9608      	strle	r6, [sp, #32]
 80067c4:	e7e1      	b.n	800678a <_strtod_l+0x212>
 80067c6:	280f      	cmp	r0, #15
 80067c8:	dceb      	bgt.n	80067a2 <_strtod_l+0x22a>
 80067ca:	230a      	movs	r3, #10
 80067cc:	9808      	ldr	r0, [sp, #32]
 80067ce:	fb03 2300 	mla	r3, r3, r0, r2
 80067d2:	9308      	str	r3, [sp, #32]
 80067d4:	e7e5      	b.n	80067a2 <_strtod_l+0x22a>
 80067d6:	4629      	mov	r1, r5
 80067d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067da:	460d      	mov	r5, r1
 80067dc:	1c50      	adds	r0, r2, #1
 80067de:	9019      	str	r0, [sp, #100]	@ 0x64
 80067e0:	7852      	ldrb	r2, [r2, #1]
 80067e2:	4618      	mov	r0, r3
 80067e4:	e7b1      	b.n	800674a <_strtod_l+0x1d2>
 80067e6:	f04f 0900 	mov.w	r9, #0
 80067ea:	2301      	movs	r3, #1
 80067ec:	e77d      	b.n	80066ea <_strtod_l+0x172>
 80067ee:	f04f 0c00 	mov.w	ip, #0
 80067f2:	1ca2      	adds	r2, r4, #2
 80067f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80067f6:	78a2      	ldrb	r2, [r4, #2]
 80067f8:	e785      	b.n	8006706 <_strtod_l+0x18e>
 80067fa:	f04f 0c01 	mov.w	ip, #1
 80067fe:	e7f8      	b.n	80067f2 <_strtod_l+0x27a>
 8006800:	080088b0 	.word	0x080088b0
 8006804:	7ff00000 	.word	0x7ff00000
 8006808:	08008898 	.word	0x08008898
 800680c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800680e:	1c51      	adds	r1, r2, #1
 8006810:	9119      	str	r1, [sp, #100]	@ 0x64
 8006812:	7852      	ldrb	r2, [r2, #1]
 8006814:	2a30      	cmp	r2, #48	@ 0x30
 8006816:	d0f9      	beq.n	800680c <_strtod_l+0x294>
 8006818:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800681c:	2908      	cmp	r1, #8
 800681e:	f63f af78 	bhi.w	8006712 <_strtod_l+0x19a>
 8006822:	f04f 080a 	mov.w	r8, #10
 8006826:	3a30      	subs	r2, #48	@ 0x30
 8006828:	920e      	str	r2, [sp, #56]	@ 0x38
 800682a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800682c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800682e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006830:	1c56      	adds	r6, r2, #1
 8006832:	9619      	str	r6, [sp, #100]	@ 0x64
 8006834:	7852      	ldrb	r2, [r2, #1]
 8006836:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800683a:	f1be 0f09 	cmp.w	lr, #9
 800683e:	d939      	bls.n	80068b4 <_strtod_l+0x33c>
 8006840:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006842:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006846:	1a76      	subs	r6, r6, r1
 8006848:	2e08      	cmp	r6, #8
 800684a:	dc03      	bgt.n	8006854 <_strtod_l+0x2dc>
 800684c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800684e:	4588      	cmp	r8, r1
 8006850:	bfa8      	it	ge
 8006852:	4688      	movge	r8, r1
 8006854:	f1bc 0f00 	cmp.w	ip, #0
 8006858:	d001      	beq.n	800685e <_strtod_l+0x2e6>
 800685a:	f1c8 0800 	rsb	r8, r8, #0
 800685e:	2d00      	cmp	r5, #0
 8006860:	d14e      	bne.n	8006900 <_strtod_l+0x388>
 8006862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006864:	4308      	orrs	r0, r1
 8006866:	f47f aec0 	bne.w	80065ea <_strtod_l+0x72>
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f aed6 	bne.w	800661c <_strtod_l+0xa4>
 8006870:	2a69      	cmp	r2, #105	@ 0x69
 8006872:	d028      	beq.n	80068c6 <_strtod_l+0x34e>
 8006874:	dc25      	bgt.n	80068c2 <_strtod_l+0x34a>
 8006876:	2a49      	cmp	r2, #73	@ 0x49
 8006878:	d025      	beq.n	80068c6 <_strtod_l+0x34e>
 800687a:	2a4e      	cmp	r2, #78	@ 0x4e
 800687c:	f47f aece 	bne.w	800661c <_strtod_l+0xa4>
 8006880:	499a      	ldr	r1, [pc, #616]	@ (8006aec <_strtod_l+0x574>)
 8006882:	a819      	add	r0, sp, #100	@ 0x64
 8006884:	f001 f9de 	bl	8007c44 <__match>
 8006888:	2800      	cmp	r0, #0
 800688a:	f43f aec7 	beq.w	800661c <_strtod_l+0xa4>
 800688e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b28      	cmp	r3, #40	@ 0x28
 8006894:	d12e      	bne.n	80068f4 <_strtod_l+0x37c>
 8006896:	4996      	ldr	r1, [pc, #600]	@ (8006af0 <_strtod_l+0x578>)
 8006898:	aa1c      	add	r2, sp, #112	@ 0x70
 800689a:	a819      	add	r0, sp, #100	@ 0x64
 800689c:	f001 f9e6 	bl	8007c6c <__hexnan>
 80068a0:	2805      	cmp	r0, #5
 80068a2:	d127      	bne.n	80068f4 <_strtod_l+0x37c>
 80068a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068a6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80068aa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80068ae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80068b2:	e69a      	b.n	80065ea <_strtod_l+0x72>
 80068b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80068b6:	fb08 2101 	mla	r1, r8, r1, r2
 80068ba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80068be:	920e      	str	r2, [sp, #56]	@ 0x38
 80068c0:	e7b5      	b.n	800682e <_strtod_l+0x2b6>
 80068c2:	2a6e      	cmp	r2, #110	@ 0x6e
 80068c4:	e7da      	b.n	800687c <_strtod_l+0x304>
 80068c6:	498b      	ldr	r1, [pc, #556]	@ (8006af4 <_strtod_l+0x57c>)
 80068c8:	a819      	add	r0, sp, #100	@ 0x64
 80068ca:	f001 f9bb 	bl	8007c44 <__match>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f43f aea4 	beq.w	800661c <_strtod_l+0xa4>
 80068d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068d6:	4988      	ldr	r1, [pc, #544]	@ (8006af8 <_strtod_l+0x580>)
 80068d8:	3b01      	subs	r3, #1
 80068da:	a819      	add	r0, sp, #100	@ 0x64
 80068dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80068de:	f001 f9b1 	bl	8007c44 <__match>
 80068e2:	b910      	cbnz	r0, 80068ea <_strtod_l+0x372>
 80068e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068e6:	3301      	adds	r3, #1
 80068e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80068ea:	f04f 0a00 	mov.w	sl, #0
 80068ee:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006afc <_strtod_l+0x584>
 80068f2:	e67a      	b.n	80065ea <_strtod_l+0x72>
 80068f4:	4882      	ldr	r0, [pc, #520]	@ (8006b00 <_strtod_l+0x588>)
 80068f6:	f000 fee3 	bl	80076c0 <nan>
 80068fa:	4682      	mov	sl, r0
 80068fc:	468b      	mov	fp, r1
 80068fe:	e674      	b.n	80065ea <_strtod_l+0x72>
 8006900:	eba8 0309 	sub.w	r3, r8, r9
 8006904:	2f00      	cmp	r7, #0
 8006906:	bf08      	it	eq
 8006908:	462f      	moveq	r7, r5
 800690a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800690c:	2d10      	cmp	r5, #16
 800690e:	462c      	mov	r4, r5
 8006910:	9309      	str	r3, [sp, #36]	@ 0x24
 8006912:	bfa8      	it	ge
 8006914:	2410      	movge	r4, #16
 8006916:	f7f9 fd65 	bl	80003e4 <__aeabi_ui2d>
 800691a:	2d09      	cmp	r5, #9
 800691c:	4682      	mov	sl, r0
 800691e:	468b      	mov	fp, r1
 8006920:	dc11      	bgt.n	8006946 <_strtod_l+0x3ce>
 8006922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	f43f ae60 	beq.w	80065ea <_strtod_l+0x72>
 800692a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800692c:	dd76      	ble.n	8006a1c <_strtod_l+0x4a4>
 800692e:	2b16      	cmp	r3, #22
 8006930:	dc5d      	bgt.n	80069ee <_strtod_l+0x476>
 8006932:	4974      	ldr	r1, [pc, #464]	@ (8006b04 <_strtod_l+0x58c>)
 8006934:	4652      	mov	r2, sl
 8006936:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800693a:	465b      	mov	r3, fp
 800693c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006940:	f7f9 fdca 	bl	80004d8 <__aeabi_dmul>
 8006944:	e7d9      	b.n	80068fa <_strtod_l+0x382>
 8006946:	4b6f      	ldr	r3, [pc, #444]	@ (8006b04 <_strtod_l+0x58c>)
 8006948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800694c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006950:	f7f9 fdc2 	bl	80004d8 <__aeabi_dmul>
 8006954:	4682      	mov	sl, r0
 8006956:	9808      	ldr	r0, [sp, #32]
 8006958:	468b      	mov	fp, r1
 800695a:	f7f9 fd43 	bl	80003e4 <__aeabi_ui2d>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4650      	mov	r0, sl
 8006964:	4659      	mov	r1, fp
 8006966:	f7f9 fc01 	bl	800016c <__adddf3>
 800696a:	2d0f      	cmp	r5, #15
 800696c:	4682      	mov	sl, r0
 800696e:	468b      	mov	fp, r1
 8006970:	ddd7      	ble.n	8006922 <_strtod_l+0x3aa>
 8006972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006974:	1b2c      	subs	r4, r5, r4
 8006976:	441c      	add	r4, r3
 8006978:	2c00      	cmp	r4, #0
 800697a:	f340 8096 	ble.w	8006aaa <_strtod_l+0x532>
 800697e:	f014 030f 	ands.w	r3, r4, #15
 8006982:	d00a      	beq.n	800699a <_strtod_l+0x422>
 8006984:	495f      	ldr	r1, [pc, #380]	@ (8006b04 <_strtod_l+0x58c>)
 8006986:	4652      	mov	r2, sl
 8006988:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800698c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006990:	465b      	mov	r3, fp
 8006992:	f7f9 fda1 	bl	80004d8 <__aeabi_dmul>
 8006996:	4682      	mov	sl, r0
 8006998:	468b      	mov	fp, r1
 800699a:	f034 040f 	bics.w	r4, r4, #15
 800699e:	d073      	beq.n	8006a88 <_strtod_l+0x510>
 80069a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80069a4:	dd48      	ble.n	8006a38 <_strtod_l+0x4c0>
 80069a6:	2400      	movs	r4, #0
 80069a8:	46a0      	mov	r8, r4
 80069aa:	46a1      	mov	r9, r4
 80069ac:	940a      	str	r4, [sp, #40]	@ 0x28
 80069ae:	2322      	movs	r3, #34	@ 0x22
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	9a05      	ldr	r2, [sp, #20]
 80069b6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006afc <_strtod_l+0x584>
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f43f ae13 	beq.w	80065ea <_strtod_l+0x72>
 80069c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069c6:	9805      	ldr	r0, [sp, #20]
 80069c8:	f7ff f94c 	bl	8005c64 <_Bfree>
 80069cc:	4649      	mov	r1, r9
 80069ce:	9805      	ldr	r0, [sp, #20]
 80069d0:	f7ff f948 	bl	8005c64 <_Bfree>
 80069d4:	4641      	mov	r1, r8
 80069d6:	9805      	ldr	r0, [sp, #20]
 80069d8:	f7ff f944 	bl	8005c64 <_Bfree>
 80069dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069de:	9805      	ldr	r0, [sp, #20]
 80069e0:	f7ff f940 	bl	8005c64 <_Bfree>
 80069e4:	4621      	mov	r1, r4
 80069e6:	9805      	ldr	r0, [sp, #20]
 80069e8:	f7ff f93c 	bl	8005c64 <_Bfree>
 80069ec:	e5fd      	b.n	80065ea <_strtod_l+0x72>
 80069ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80069f4:	4293      	cmp	r3, r2
 80069f6:	dbbc      	blt.n	8006972 <_strtod_l+0x3fa>
 80069f8:	4c42      	ldr	r4, [pc, #264]	@ (8006b04 <_strtod_l+0x58c>)
 80069fa:	f1c5 050f 	rsb	r5, r5, #15
 80069fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006a02:	4652      	mov	r2, sl
 8006a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a08:	465b      	mov	r3, fp
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a10:	1b5d      	subs	r5, r3, r5
 8006a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a1a:	e791      	b.n	8006940 <_strtod_l+0x3c8>
 8006a1c:	3316      	adds	r3, #22
 8006a1e:	dba8      	blt.n	8006972 <_strtod_l+0x3fa>
 8006a20:	4b38      	ldr	r3, [pc, #224]	@ (8006b04 <_strtod_l+0x58c>)
 8006a22:	eba9 0808 	sub.w	r8, r9, r8
 8006a26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a30:	4659      	mov	r1, fp
 8006a32:	f7f9 fe7b 	bl	800072c <__aeabi_ddiv>
 8006a36:	e760      	b.n	80068fa <_strtod_l+0x382>
 8006a38:	4b33      	ldr	r3, [pc, #204]	@ (8006b08 <_strtod_l+0x590>)
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	9308      	str	r3, [sp, #32]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4659      	mov	r1, fp
 8006a42:	461e      	mov	r6, r3
 8006a44:	1124      	asrs	r4, r4, #4
 8006a46:	2c01      	cmp	r4, #1
 8006a48:	dc21      	bgt.n	8006a8e <_strtod_l+0x516>
 8006a4a:	b10b      	cbz	r3, 8006a50 <_strtod_l+0x4d8>
 8006a4c:	4682      	mov	sl, r0
 8006a4e:	468b      	mov	fp, r1
 8006a50:	492d      	ldr	r1, [pc, #180]	@ (8006b08 <_strtod_l+0x590>)
 8006a52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a5a:	4652      	mov	r2, sl
 8006a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a60:	465b      	mov	r3, fp
 8006a62:	f7f9 fd39 	bl	80004d8 <__aeabi_dmul>
 8006a66:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <_strtod_l+0x584>)
 8006a68:	460a      	mov	r2, r1
 8006a6a:	400b      	ands	r3, r1
 8006a6c:	4927      	ldr	r1, [pc, #156]	@ (8006b0c <_strtod_l+0x594>)
 8006a6e:	4682      	mov	sl, r0
 8006a70:	428b      	cmp	r3, r1
 8006a72:	d898      	bhi.n	80069a6 <_strtod_l+0x42e>
 8006a74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	bf86      	itte	hi
 8006a7c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006a80:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006b10 <_strtod_l+0x598>
 8006a84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a88:	2300      	movs	r3, #0
 8006a8a:	9308      	str	r3, [sp, #32]
 8006a8c:	e07a      	b.n	8006b84 <_strtod_l+0x60c>
 8006a8e:	07e2      	lsls	r2, r4, #31
 8006a90:	d505      	bpl.n	8006a9e <_strtod_l+0x526>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fd1e 	bl	80004d8 <__aeabi_dmul>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	9a08      	ldr	r2, [sp, #32]
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	3208      	adds	r2, #8
 8006aa4:	1064      	asrs	r4, r4, #1
 8006aa6:	9208      	str	r2, [sp, #32]
 8006aa8:	e7cd      	b.n	8006a46 <_strtod_l+0x4ce>
 8006aaa:	d0ed      	beq.n	8006a88 <_strtod_l+0x510>
 8006aac:	4264      	negs	r4, r4
 8006aae:	f014 020f 	ands.w	r2, r4, #15
 8006ab2:	d00a      	beq.n	8006aca <_strtod_l+0x552>
 8006ab4:	4b13      	ldr	r3, [pc, #76]	@ (8006b04 <_strtod_l+0x58c>)
 8006ab6:	4650      	mov	r0, sl
 8006ab8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006abc:	4659      	mov	r1, fp
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fe33 	bl	800072c <__aeabi_ddiv>
 8006ac6:	4682      	mov	sl, r0
 8006ac8:	468b      	mov	fp, r1
 8006aca:	1124      	asrs	r4, r4, #4
 8006acc:	d0dc      	beq.n	8006a88 <_strtod_l+0x510>
 8006ace:	2c1f      	cmp	r4, #31
 8006ad0:	dd20      	ble.n	8006b14 <_strtod_l+0x59c>
 8006ad2:	2400      	movs	r4, #0
 8006ad4:	46a0      	mov	r8, r4
 8006ad6:	46a1      	mov	r9, r4
 8006ad8:	940a      	str	r4, [sp, #40]	@ 0x28
 8006ada:	2322      	movs	r3, #34	@ 0x22
 8006adc:	9a05      	ldr	r2, [sp, #20]
 8006ade:	f04f 0a00 	mov.w	sl, #0
 8006ae2:	f04f 0b00 	mov.w	fp, #0
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e768      	b.n	80069bc <_strtod_l+0x444>
 8006aea:	bf00      	nop
 8006aec:	08008685 	.word	0x08008685
 8006af0:	0800889c 	.word	0x0800889c
 8006af4:	0800867d 	.word	0x0800867d
 8006af8:	080086b4 	.word	0x080086b4
 8006afc:	7ff00000 	.word	0x7ff00000
 8006b00:	08008a45 	.word	0x08008a45
 8006b04:	080087d0 	.word	0x080087d0
 8006b08:	080087a8 	.word	0x080087a8
 8006b0c:	7ca00000 	.word	0x7ca00000
 8006b10:	7fefffff 	.word	0x7fefffff
 8006b14:	f014 0310 	ands.w	r3, r4, #16
 8006b18:	bf18      	it	ne
 8006b1a:	236a      	movne	r3, #106	@ 0x6a
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	9308      	str	r3, [sp, #32]
 8006b20:	4659      	mov	r1, fp
 8006b22:	2300      	movs	r3, #0
 8006b24:	4ea9      	ldr	r6, [pc, #676]	@ (8006dcc <_strtod_l+0x854>)
 8006b26:	07e2      	lsls	r2, r4, #31
 8006b28:	d504      	bpl.n	8006b34 <_strtod_l+0x5bc>
 8006b2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b2e:	f7f9 fcd3 	bl	80004d8 <__aeabi_dmul>
 8006b32:	2301      	movs	r3, #1
 8006b34:	1064      	asrs	r4, r4, #1
 8006b36:	f106 0608 	add.w	r6, r6, #8
 8006b3a:	d1f4      	bne.n	8006b26 <_strtod_l+0x5ae>
 8006b3c:	b10b      	cbz	r3, 8006b42 <_strtod_l+0x5ca>
 8006b3e:	4682      	mov	sl, r0
 8006b40:	468b      	mov	fp, r1
 8006b42:	9b08      	ldr	r3, [sp, #32]
 8006b44:	b1b3      	cbz	r3, 8006b74 <_strtod_l+0x5fc>
 8006b46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	4659      	mov	r1, fp
 8006b52:	dd0f      	ble.n	8006b74 <_strtod_l+0x5fc>
 8006b54:	2b1f      	cmp	r3, #31
 8006b56:	dd57      	ble.n	8006c08 <_strtod_l+0x690>
 8006b58:	2b34      	cmp	r3, #52	@ 0x34
 8006b5a:	bfd8      	it	le
 8006b5c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006b60:	f04f 0a00 	mov.w	sl, #0
 8006b64:	bfcf      	iteee	gt
 8006b66:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b6a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006b6e:	4093      	lslle	r3, r2
 8006b70:	ea03 0b01 	andle.w	fp, r3, r1
 8006b74:	2200      	movs	r2, #0
 8006b76:	2300      	movs	r3, #0
 8006b78:	4650      	mov	r0, sl
 8006b7a:	4659      	mov	r1, fp
 8006b7c:	f7f9 ff14 	bl	80009a8 <__aeabi_dcmpeq>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d1a6      	bne.n	8006ad2 <_strtod_l+0x55a>
 8006b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b86:	463a      	mov	r2, r7
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	9805      	ldr	r0, [sp, #20]
 8006b90:	f7ff f8d0 	bl	8005d34 <__s2b>
 8006b94:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f43f af05 	beq.w	80069a6 <_strtod_l+0x42e>
 8006b9c:	2400      	movs	r4, #0
 8006b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ba0:	eba9 0308 	sub.w	r3, r9, r8
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	bfa8      	it	ge
 8006ba8:	2300      	movge	r3, #0
 8006baa:	46a0      	mov	r8, r4
 8006bac:	9312      	str	r3, [sp, #72]	@ 0x48
 8006bae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006bb2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bb6:	9805      	ldr	r0, [sp, #20]
 8006bb8:	6859      	ldr	r1, [r3, #4]
 8006bba:	f7ff f813 	bl	8005be4 <_Balloc>
 8006bbe:	4681      	mov	r9, r0
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f43f aef4 	beq.w	80069ae <_strtod_l+0x436>
 8006bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bc8:	300c      	adds	r0, #12
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	f103 010c 	add.w	r1, r3, #12
 8006bd0:	3202      	adds	r2, #2
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	f000 fd66 	bl	80076a4 <memcpy>
 8006bd8:	ab1c      	add	r3, sp, #112	@ 0x70
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	4652      	mov	r2, sl
 8006be2:	465b      	mov	r3, fp
 8006be4:	9805      	ldr	r0, [sp, #20]
 8006be6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006bea:	f7ff fbd5 	bl	8006398 <__d2b>
 8006bee:	901a      	str	r0, [sp, #104]	@ 0x68
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f43f aedc 	beq.w	80069ae <_strtod_l+0x436>
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	9805      	ldr	r0, [sp, #20]
 8006bfa:	f7ff f931 	bl	8005e60 <__i2b>
 8006bfe:	4680      	mov	r8, r0
 8006c00:	b948      	cbnz	r0, 8006c16 <_strtod_l+0x69e>
 8006c02:	f04f 0800 	mov.w	r8, #0
 8006c06:	e6d2      	b.n	80069ae <_strtod_l+0x436>
 8006c08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	ea03 0a0a 	and.w	sl, r3, sl
 8006c14:	e7ae      	b.n	8006b74 <_strtod_l+0x5fc>
 8006c16:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006c18:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	bfab      	itete	ge
 8006c1e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006c20:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006c22:	18ef      	addge	r7, r5, r3
 8006c24:	1b5e      	sublt	r6, r3, r5
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	bfa8      	it	ge
 8006c2a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006c2c:	eba5 0503 	sub.w	r5, r5, r3
 8006c30:	4415      	add	r5, r2
 8006c32:	4b67      	ldr	r3, [pc, #412]	@ (8006dd0 <_strtod_l+0x858>)
 8006c34:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006c38:	bfb8      	it	lt
 8006c3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006c3c:	429d      	cmp	r5, r3
 8006c3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c42:	da50      	bge.n	8006ce6 <_strtod_l+0x76e>
 8006c44:	1b5b      	subs	r3, r3, r5
 8006c46:	2b1f      	cmp	r3, #31
 8006c48:	f04f 0101 	mov.w	r1, #1
 8006c4c:	eba2 0203 	sub.w	r2, r2, r3
 8006c50:	dc3d      	bgt.n	8006cce <_strtod_l+0x756>
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c58:	2300      	movs	r3, #0
 8006c5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c5c:	18bd      	adds	r5, r7, r2
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	42af      	cmp	r7, r5
 8006c62:	4416      	add	r6, r2
 8006c64:	441e      	add	r6, r3
 8006c66:	463b      	mov	r3, r7
 8006c68:	bfa8      	it	ge
 8006c6a:	462b      	movge	r3, r5
 8006c6c:	42b3      	cmp	r3, r6
 8006c6e:	bfa8      	it	ge
 8006c70:	4633      	movge	r3, r6
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	bfc2      	ittt	gt
 8006c76:	1aed      	subgt	r5, r5, r3
 8006c78:	1af6      	subgt	r6, r6, r3
 8006c7a:	1aff      	subgt	r7, r7, r3
 8006c7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd16      	ble.n	8006cb0 <_strtod_l+0x738>
 8006c82:	4641      	mov	r1, r8
 8006c84:	461a      	mov	r2, r3
 8006c86:	9805      	ldr	r0, [sp, #20]
 8006c88:	f7ff f9a8 	bl	8005fdc <__pow5mult>
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d0b7      	beq.n	8006c02 <_strtod_l+0x68a>
 8006c92:	4601      	mov	r1, r0
 8006c94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c96:	9805      	ldr	r0, [sp, #20]
 8006c98:	f7ff f8f8 	bl	8005e8c <__multiply>
 8006c9c:	900e      	str	r0, [sp, #56]	@ 0x38
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f43f ae85 	beq.w	80069ae <_strtod_l+0x436>
 8006ca4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ca6:	9805      	ldr	r0, [sp, #20]
 8006ca8:	f7fe ffdc 	bl	8005c64 <_Bfree>
 8006cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	dc1d      	bgt.n	8006cf0 <_strtod_l+0x778>
 8006cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dd23      	ble.n	8006d02 <_strtod_l+0x78a>
 8006cba:	4649      	mov	r1, r9
 8006cbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006cbe:	9805      	ldr	r0, [sp, #20]
 8006cc0:	f7ff f98c 	bl	8005fdc <__pow5mult>
 8006cc4:	4681      	mov	r9, r0
 8006cc6:	b9e0      	cbnz	r0, 8006d02 <_strtod_l+0x78a>
 8006cc8:	f04f 0900 	mov.w	r9, #0
 8006ccc:	e66f      	b.n	80069ae <_strtod_l+0x436>
 8006cce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006cd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006cd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006cda:	35e2      	adds	r5, #226	@ 0xe2
 8006cdc:	fa01 f305 	lsl.w	r3, r1, r5
 8006ce0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ce2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ce4:	e7ba      	b.n	8006c5c <_strtod_l+0x6e4>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cea:	2301      	movs	r3, #1
 8006cec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cee:	e7b5      	b.n	8006c5c <_strtod_l+0x6e4>
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cf4:	9805      	ldr	r0, [sp, #20]
 8006cf6:	f7ff f9cb 	bl	8006090 <__lshift>
 8006cfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d1d9      	bne.n	8006cb4 <_strtod_l+0x73c>
 8006d00:	e655      	b.n	80069ae <_strtod_l+0x436>
 8006d02:	2e00      	cmp	r6, #0
 8006d04:	dd07      	ble.n	8006d16 <_strtod_l+0x79e>
 8006d06:	4649      	mov	r1, r9
 8006d08:	4632      	mov	r2, r6
 8006d0a:	9805      	ldr	r0, [sp, #20]
 8006d0c:	f7ff f9c0 	bl	8006090 <__lshift>
 8006d10:	4681      	mov	r9, r0
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d0d8      	beq.n	8006cc8 <_strtod_l+0x750>
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	dd08      	ble.n	8006d2c <_strtod_l+0x7b4>
 8006d1a:	4641      	mov	r1, r8
 8006d1c:	463a      	mov	r2, r7
 8006d1e:	9805      	ldr	r0, [sp, #20]
 8006d20:	f7ff f9b6 	bl	8006090 <__lshift>
 8006d24:	4680      	mov	r8, r0
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f ae41 	beq.w	80069ae <_strtod_l+0x436>
 8006d2c:	464a      	mov	r2, r9
 8006d2e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d30:	9805      	ldr	r0, [sp, #20]
 8006d32:	f7ff fa35 	bl	80061a0 <__mdiff>
 8006d36:	4604      	mov	r4, r0
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f ae38 	beq.w	80069ae <_strtod_l+0x436>
 8006d3e:	68c3      	ldr	r3, [r0, #12]
 8006d40:	4641      	mov	r1, r8
 8006d42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d44:	2300      	movs	r3, #0
 8006d46:	60c3      	str	r3, [r0, #12]
 8006d48:	f7ff fa0e 	bl	8006168 <__mcmp>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	da45      	bge.n	8006ddc <_strtod_l+0x864>
 8006d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d52:	ea53 030a 	orrs.w	r3, r3, sl
 8006d56:	d16b      	bne.n	8006e30 <_strtod_l+0x8b8>
 8006d58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d167      	bne.n	8006e30 <_strtod_l+0x8b8>
 8006d60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d64:	0d1b      	lsrs	r3, r3, #20
 8006d66:	051b      	lsls	r3, r3, #20
 8006d68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d6c:	d960      	bls.n	8006e30 <_strtod_l+0x8b8>
 8006d6e:	6963      	ldr	r3, [r4, #20]
 8006d70:	b913      	cbnz	r3, 8006d78 <_strtod_l+0x800>
 8006d72:	6923      	ldr	r3, [r4, #16]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	dd5b      	ble.n	8006e30 <_strtod_l+0x8b8>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	9805      	ldr	r0, [sp, #20]
 8006d7e:	f7ff f987 	bl	8006090 <__lshift>
 8006d82:	4641      	mov	r1, r8
 8006d84:	4604      	mov	r4, r0
 8006d86:	f7ff f9ef 	bl	8006168 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	dd50      	ble.n	8006e30 <_strtod_l+0x8b8>
 8006d8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d92:	9a08      	ldr	r2, [sp, #32]
 8006d94:	0d1b      	lsrs	r3, r3, #20
 8006d96:	051b      	lsls	r3, r3, #20
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	d06a      	beq.n	8006e72 <_strtod_l+0x8fa>
 8006d9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006da0:	d867      	bhi.n	8006e72 <_strtod_l+0x8fa>
 8006da2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006da6:	f67f ae98 	bls.w	8006ada <_strtod_l+0x562>
 8006daa:	4650      	mov	r0, sl
 8006dac:	4659      	mov	r1, fp
 8006dae:	4b09      	ldr	r3, [pc, #36]	@ (8006dd4 <_strtod_l+0x85c>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	f7f9 fb91 	bl	80004d8 <__aeabi_dmul>
 8006db6:	4b08      	ldr	r3, [pc, #32]	@ (8006dd8 <_strtod_l+0x860>)
 8006db8:	4682      	mov	sl, r0
 8006dba:	400b      	ands	r3, r1
 8006dbc:	468b      	mov	fp, r1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f47f ae00 	bne.w	80069c4 <_strtod_l+0x44c>
 8006dc4:	2322      	movs	r3, #34	@ 0x22
 8006dc6:	9a05      	ldr	r2, [sp, #20]
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	e5fb      	b.n	80069c4 <_strtod_l+0x44c>
 8006dcc:	080088c8 	.word	0x080088c8
 8006dd0:	fffffc02 	.word	0xfffffc02
 8006dd4:	39500000 	.word	0x39500000
 8006dd8:	7ff00000 	.word	0x7ff00000
 8006ddc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006de0:	d165      	bne.n	8006eae <_strtod_l+0x936>
 8006de2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006de4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006de8:	b35a      	cbz	r2, 8006e42 <_strtod_l+0x8ca>
 8006dea:	4a99      	ldr	r2, [pc, #612]	@ (8007050 <_strtod_l+0xad8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d12b      	bne.n	8006e48 <_strtod_l+0x8d0>
 8006df0:	9b08      	ldr	r3, [sp, #32]
 8006df2:	4651      	mov	r1, sl
 8006df4:	b303      	cbz	r3, 8006e38 <_strtod_l+0x8c0>
 8006df6:	465a      	mov	r2, fp
 8006df8:	4b96      	ldr	r3, [pc, #600]	@ (8007054 <_strtod_l+0xadc>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e04:	d81b      	bhi.n	8006e3e <_strtod_l+0x8c6>
 8006e06:	0d1b      	lsrs	r3, r3, #20
 8006e08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	4299      	cmp	r1, r3
 8006e12:	d119      	bne.n	8006e48 <_strtod_l+0x8d0>
 8006e14:	4b90      	ldr	r3, [pc, #576]	@ (8007058 <_strtod_l+0xae0>)
 8006e16:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d102      	bne.n	8006e22 <_strtod_l+0x8aa>
 8006e1c:	3101      	adds	r1, #1
 8006e1e:	f43f adc6 	beq.w	80069ae <_strtod_l+0x436>
 8006e22:	f04f 0a00 	mov.w	sl, #0
 8006e26:	4b8b      	ldr	r3, [pc, #556]	@ (8007054 <_strtod_l+0xadc>)
 8006e28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1b9      	bne.n	8006daa <_strtod_l+0x832>
 8006e36:	e5c5      	b.n	80069c4 <_strtod_l+0x44c>
 8006e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e3c:	e7e8      	b.n	8006e10 <_strtod_l+0x898>
 8006e3e:	4613      	mov	r3, r2
 8006e40:	e7e6      	b.n	8006e10 <_strtod_l+0x898>
 8006e42:	ea53 030a 	orrs.w	r3, r3, sl
 8006e46:	d0a2      	beq.n	8006d8e <_strtod_l+0x816>
 8006e48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e4a:	b1db      	cbz	r3, 8006e84 <_strtod_l+0x90c>
 8006e4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e4e:	4213      	tst	r3, r2
 8006e50:	d0ee      	beq.n	8006e30 <_strtod_l+0x8b8>
 8006e52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e54:	4650      	mov	r0, sl
 8006e56:	4659      	mov	r1, fp
 8006e58:	9a08      	ldr	r2, [sp, #32]
 8006e5a:	b1bb      	cbz	r3, 8006e8c <_strtod_l+0x914>
 8006e5c:	f7ff fb68 	bl	8006530 <sulp>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e68:	f7f9 f980 	bl	800016c <__adddf3>
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	468b      	mov	fp, r1
 8006e70:	e7de      	b.n	8006e30 <_strtod_l+0x8b8>
 8006e72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006e76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e7a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e82:	e7d5      	b.n	8006e30 <_strtod_l+0x8b8>
 8006e84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e86:	ea13 0f0a 	tst.w	r3, sl
 8006e8a:	e7e1      	b.n	8006e50 <_strtod_l+0x8d8>
 8006e8c:	f7ff fb50 	bl	8006530 <sulp>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e98:	f7f9 f966 	bl	8000168 <__aeabi_dsub>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4682      	mov	sl, r0
 8006ea2:	468b      	mov	fp, r1
 8006ea4:	f7f9 fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d0c1      	beq.n	8006e30 <_strtod_l+0x8b8>
 8006eac:	e615      	b.n	8006ada <_strtod_l+0x562>
 8006eae:	4641      	mov	r1, r8
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f7ff fac9 	bl	8006448 <__ratio>
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ebc:	4606      	mov	r6, r0
 8006ebe:	460f      	mov	r7, r1
 8006ec0:	f7f9 fd86 	bl	80009d0 <__aeabi_dcmple>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d06d      	beq.n	8006fa4 <_strtod_l+0xa2c>
 8006ec8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d178      	bne.n	8006fc0 <_strtod_l+0xa48>
 8006ece:	f1ba 0f00 	cmp.w	sl, #0
 8006ed2:	d156      	bne.n	8006f82 <_strtod_l+0xa0a>
 8006ed4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d158      	bne.n	8006f90 <_strtod_l+0xa18>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800705c <_strtod_l+0xae4>)
 8006ee6:	f7f9 fd69 	bl	80009bc <__aeabi_dcmplt>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d157      	bne.n	8006f9e <_strtod_l+0xa26>
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8007060 <_strtod_l+0xae8>)
 8006ef6:	f7f9 faef 	bl	80004d8 <__aeabi_dmul>
 8006efa:	4606      	mov	r6, r0
 8006efc:	460f      	mov	r7, r1
 8006efe:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006f02:	9606      	str	r6, [sp, #24]
 8006f04:	9307      	str	r3, [sp, #28]
 8006f06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f0a:	4d52      	ldr	r5, [pc, #328]	@ (8007054 <_strtod_l+0xadc>)
 8006f0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006f10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f12:	401d      	ands	r5, r3
 8006f14:	4b53      	ldr	r3, [pc, #332]	@ (8007064 <_strtod_l+0xaec>)
 8006f16:	429d      	cmp	r5, r3
 8006f18:	f040 80aa 	bne.w	8007070 <_strtod_l+0xaf8>
 8006f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f1e:	4650      	mov	r0, sl
 8006f20:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006f24:	4659      	mov	r1, fp
 8006f26:	f7ff f9cf 	bl	80062c8 <__ulp>
 8006f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f2e:	f7f9 fad3 	bl	80004d8 <__aeabi_dmul>
 8006f32:	4652      	mov	r2, sl
 8006f34:	465b      	mov	r3, fp
 8006f36:	f7f9 f919 	bl	800016c <__adddf3>
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4945      	ldr	r1, [pc, #276]	@ (8007054 <_strtod_l+0xadc>)
 8006f3e:	4a4a      	ldr	r2, [pc, #296]	@ (8007068 <_strtod_l+0xaf0>)
 8006f40:	4019      	ands	r1, r3
 8006f42:	4291      	cmp	r1, r2
 8006f44:	4682      	mov	sl, r0
 8006f46:	d942      	bls.n	8006fce <_strtod_l+0xa56>
 8006f48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f4a:	4b43      	ldr	r3, [pc, #268]	@ (8007058 <_strtod_l+0xae0>)
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d103      	bne.n	8006f58 <_strtod_l+0x9e0>
 8006f50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f52:	3301      	adds	r3, #1
 8006f54:	f43f ad2b 	beq.w	80069ae <_strtod_l+0x436>
 8006f58:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006f5c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007058 <_strtod_l+0xae0>
 8006f60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f62:	9805      	ldr	r0, [sp, #20]
 8006f64:	f7fe fe7e 	bl	8005c64 <_Bfree>
 8006f68:	4649      	mov	r1, r9
 8006f6a:	9805      	ldr	r0, [sp, #20]
 8006f6c:	f7fe fe7a 	bl	8005c64 <_Bfree>
 8006f70:	4641      	mov	r1, r8
 8006f72:	9805      	ldr	r0, [sp, #20]
 8006f74:	f7fe fe76 	bl	8005c64 <_Bfree>
 8006f78:	4621      	mov	r1, r4
 8006f7a:	9805      	ldr	r0, [sp, #20]
 8006f7c:	f7fe fe72 	bl	8005c64 <_Bfree>
 8006f80:	e618      	b.n	8006bb4 <_strtod_l+0x63c>
 8006f82:	f1ba 0f01 	cmp.w	sl, #1
 8006f86:	d103      	bne.n	8006f90 <_strtod_l+0xa18>
 8006f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f43f ada5 	beq.w	8006ada <_strtod_l+0x562>
 8006f90:	2200      	movs	r2, #0
 8006f92:	4b36      	ldr	r3, [pc, #216]	@ (800706c <_strtod_l+0xaf4>)
 8006f94:	2600      	movs	r6, #0
 8006f96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f9a:	4f30      	ldr	r7, [pc, #192]	@ (800705c <_strtod_l+0xae4>)
 8006f9c:	e7b3      	b.n	8006f06 <_strtod_l+0x98e>
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	4f2f      	ldr	r7, [pc, #188]	@ (8007060 <_strtod_l+0xae8>)
 8006fa2:	e7ac      	b.n	8006efe <_strtod_l+0x986>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	4639      	mov	r1, r7
 8006fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8007060 <_strtod_l+0xae8>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	f7f9 fa94 	bl	80004d8 <__aeabi_dmul>
 8006fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fb2:	4606      	mov	r6, r0
 8006fb4:	460f      	mov	r7, r1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0a1      	beq.n	8006efe <_strtod_l+0x986>
 8006fba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fbe:	e7a2      	b.n	8006f06 <_strtod_l+0x98e>
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4b26      	ldr	r3, [pc, #152]	@ (800705c <_strtod_l+0xae4>)
 8006fc4:	4616      	mov	r6, r2
 8006fc6:	461f      	mov	r7, r3
 8006fc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006fcc:	e79b      	b.n	8006f06 <_strtod_l+0x98e>
 8006fce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1c1      	bne.n	8006f60 <_strtod_l+0x9e8>
 8006fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fe0:	0d1b      	lsrs	r3, r3, #20
 8006fe2:	051b      	lsls	r3, r3, #20
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	d1bb      	bne.n	8006f60 <_strtod_l+0x9e8>
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fdbc 	bl	8000b68 <__aeabi_d2lz>
 8006ff0:	f7f9 fa44 	bl	800047c <__aeabi_l2d>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	f7f9 f8b4 	bl	8000168 <__aeabi_dsub>
 8007000:	460b      	mov	r3, r1
 8007002:	4602      	mov	r2, r0
 8007004:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007008:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800700c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800700e:	ea46 060a 	orr.w	r6, r6, sl
 8007012:	431e      	orrs	r6, r3
 8007014:	d069      	beq.n	80070ea <_strtod_l+0xb72>
 8007016:	a30a      	add	r3, pc, #40	@ (adr r3, 8007040 <_strtod_l+0xac8>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f7f9 fcce 	bl	80009bc <__aeabi_dcmplt>
 8007020:	2800      	cmp	r0, #0
 8007022:	f47f accf 	bne.w	80069c4 <_strtod_l+0x44c>
 8007026:	a308      	add	r3, pc, #32	@ (adr r3, 8007048 <_strtod_l+0xad0>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007030:	f7f9 fce2 	bl	80009f8 <__aeabi_dcmpgt>
 8007034:	2800      	cmp	r0, #0
 8007036:	d093      	beq.n	8006f60 <_strtod_l+0x9e8>
 8007038:	e4c4      	b.n	80069c4 <_strtod_l+0x44c>
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w
 8007040:	94a03595 	.word	0x94a03595
 8007044:	3fdfffff 	.word	0x3fdfffff
 8007048:	35afe535 	.word	0x35afe535
 800704c:	3fe00000 	.word	0x3fe00000
 8007050:	000fffff 	.word	0x000fffff
 8007054:	7ff00000 	.word	0x7ff00000
 8007058:	7fefffff 	.word	0x7fefffff
 800705c:	3ff00000 	.word	0x3ff00000
 8007060:	3fe00000 	.word	0x3fe00000
 8007064:	7fe00000 	.word	0x7fe00000
 8007068:	7c9fffff 	.word	0x7c9fffff
 800706c:	bff00000 	.word	0xbff00000
 8007070:	9b08      	ldr	r3, [sp, #32]
 8007072:	b323      	cbz	r3, 80070be <_strtod_l+0xb46>
 8007074:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007078:	d821      	bhi.n	80070be <_strtod_l+0xb46>
 800707a:	a327      	add	r3, pc, #156	@ (adr r3, 8007118 <_strtod_l+0xba0>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fca4 	bl	80009d0 <__aeabi_dcmple>
 8007088:	b1a0      	cbz	r0, 80070b4 <_strtod_l+0xb3c>
 800708a:	4639      	mov	r1, r7
 800708c:	4630      	mov	r0, r6
 800708e:	f7f9 fcfb 	bl	8000a88 <__aeabi_d2uiz>
 8007092:	2801      	cmp	r0, #1
 8007094:	bf38      	it	cc
 8007096:	2001      	movcc	r0, #1
 8007098:	f7f9 f9a4 	bl	80003e4 <__aeabi_ui2d>
 800709c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	b9fb      	cbnz	r3, 80070e4 <_strtod_l+0xb6c>
 80070a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80070a8:	9014      	str	r0, [sp, #80]	@ 0x50
 80070aa:	9315      	str	r3, [sp, #84]	@ 0x54
 80070ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80070b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070b6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80070ba:	1b5b      	subs	r3, r3, r5
 80070bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80070be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070c2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80070c6:	f7ff f8ff 	bl	80062c8 <__ulp>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4650      	mov	r0, sl
 80070d0:	4659      	mov	r1, fp
 80070d2:	f7f9 fa01 	bl	80004d8 <__aeabi_dmul>
 80070d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070da:	f7f9 f847 	bl	800016c <__adddf3>
 80070de:	4682      	mov	sl, r0
 80070e0:	468b      	mov	fp, r1
 80070e2:	e776      	b.n	8006fd2 <_strtod_l+0xa5a>
 80070e4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80070e8:	e7e0      	b.n	80070ac <_strtod_l+0xb34>
 80070ea:	a30d      	add	r3, pc, #52	@ (adr r3, 8007120 <_strtod_l+0xba8>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 fc64 	bl	80009bc <__aeabi_dcmplt>
 80070f4:	e79e      	b.n	8007034 <_strtod_l+0xabc>
 80070f6:	2300      	movs	r3, #0
 80070f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070fc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	f7ff ba77 	b.w	80065f2 <_strtod_l+0x7a>
 8007104:	2a65      	cmp	r2, #101	@ 0x65
 8007106:	f43f ab6e 	beq.w	80067e6 <_strtod_l+0x26e>
 800710a:	2a45      	cmp	r2, #69	@ 0x45
 800710c:	f43f ab6b 	beq.w	80067e6 <_strtod_l+0x26e>
 8007110:	2301      	movs	r3, #1
 8007112:	f7ff bba6 	b.w	8006862 <_strtod_l+0x2ea>
 8007116:	bf00      	nop
 8007118:	ffc00000 	.word	0xffc00000
 800711c:	41dfffff 	.word	0x41dfffff
 8007120:	94a03595 	.word	0x94a03595
 8007124:	3fcfffff 	.word	0x3fcfffff

08007128 <_strtod_r>:
 8007128:	4b01      	ldr	r3, [pc, #4]	@ (8007130 <_strtod_r+0x8>)
 800712a:	f7ff ba25 	b.w	8006578 <_strtod_l>
 800712e:	bf00      	nop
 8007130:	2000007c 	.word	0x2000007c

08007134 <_strtol_l.constprop.0>:
 8007134:	2b24      	cmp	r3, #36	@ 0x24
 8007136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800713a:	4686      	mov	lr, r0
 800713c:	4690      	mov	r8, r2
 800713e:	d801      	bhi.n	8007144 <_strtol_l.constprop.0+0x10>
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <_strtol_l.constprop.0+0x1e>
 8007144:	f7fd fdc0 	bl	8004cc8 <__errno>
 8007148:	2316      	movs	r3, #22
 800714a:	6003      	str	r3, [r0, #0]
 800714c:	2000      	movs	r0, #0
 800714e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007152:	460d      	mov	r5, r1
 8007154:	4833      	ldr	r0, [pc, #204]	@ (8007224 <_strtol_l.constprop.0+0xf0>)
 8007156:	462a      	mov	r2, r5
 8007158:	f815 4b01 	ldrb.w	r4, [r5], #1
 800715c:	5d06      	ldrb	r6, [r0, r4]
 800715e:	f016 0608 	ands.w	r6, r6, #8
 8007162:	d1f8      	bne.n	8007156 <_strtol_l.constprop.0+0x22>
 8007164:	2c2d      	cmp	r4, #45	@ 0x2d
 8007166:	d12d      	bne.n	80071c4 <_strtol_l.constprop.0+0x90>
 8007168:	2601      	movs	r6, #1
 800716a:	782c      	ldrb	r4, [r5, #0]
 800716c:	1c95      	adds	r5, r2, #2
 800716e:	f033 0210 	bics.w	r2, r3, #16
 8007172:	d109      	bne.n	8007188 <_strtol_l.constprop.0+0x54>
 8007174:	2c30      	cmp	r4, #48	@ 0x30
 8007176:	d12a      	bne.n	80071ce <_strtol_l.constprop.0+0x9a>
 8007178:	782a      	ldrb	r2, [r5, #0]
 800717a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800717e:	2a58      	cmp	r2, #88	@ 0x58
 8007180:	d125      	bne.n	80071ce <_strtol_l.constprop.0+0x9a>
 8007182:	2310      	movs	r3, #16
 8007184:	786c      	ldrb	r4, [r5, #1]
 8007186:	3502      	adds	r5, #2
 8007188:	2200      	movs	r2, #0
 800718a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800718e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007192:	fbbc f9f3 	udiv	r9, ip, r3
 8007196:	4610      	mov	r0, r2
 8007198:	fb03 ca19 	mls	sl, r3, r9, ip
 800719c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80071a0:	2f09      	cmp	r7, #9
 80071a2:	d81b      	bhi.n	80071dc <_strtol_l.constprop.0+0xa8>
 80071a4:	463c      	mov	r4, r7
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	dd27      	ble.n	80071fa <_strtol_l.constprop.0+0xc6>
 80071aa:	1c57      	adds	r7, r2, #1
 80071ac:	d007      	beq.n	80071be <_strtol_l.constprop.0+0x8a>
 80071ae:	4581      	cmp	r9, r0
 80071b0:	d320      	bcc.n	80071f4 <_strtol_l.constprop.0+0xc0>
 80071b2:	d101      	bne.n	80071b8 <_strtol_l.constprop.0+0x84>
 80071b4:	45a2      	cmp	sl, r4
 80071b6:	db1d      	blt.n	80071f4 <_strtol_l.constprop.0+0xc0>
 80071b8:	2201      	movs	r2, #1
 80071ba:	fb00 4003 	mla	r0, r0, r3, r4
 80071be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c2:	e7eb      	b.n	800719c <_strtol_l.constprop.0+0x68>
 80071c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80071c6:	bf04      	itt	eq
 80071c8:	782c      	ldrbeq	r4, [r5, #0]
 80071ca:	1c95      	addeq	r5, r2, #2
 80071cc:	e7cf      	b.n	800716e <_strtol_l.constprop.0+0x3a>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1da      	bne.n	8007188 <_strtol_l.constprop.0+0x54>
 80071d2:	2c30      	cmp	r4, #48	@ 0x30
 80071d4:	bf0c      	ite	eq
 80071d6:	2308      	moveq	r3, #8
 80071d8:	230a      	movne	r3, #10
 80071da:	e7d5      	b.n	8007188 <_strtol_l.constprop.0+0x54>
 80071dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80071e0:	2f19      	cmp	r7, #25
 80071e2:	d801      	bhi.n	80071e8 <_strtol_l.constprop.0+0xb4>
 80071e4:	3c37      	subs	r4, #55	@ 0x37
 80071e6:	e7de      	b.n	80071a6 <_strtol_l.constprop.0+0x72>
 80071e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80071ec:	2f19      	cmp	r7, #25
 80071ee:	d804      	bhi.n	80071fa <_strtol_l.constprop.0+0xc6>
 80071f0:	3c57      	subs	r4, #87	@ 0x57
 80071f2:	e7d8      	b.n	80071a6 <_strtol_l.constprop.0+0x72>
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071f8:	e7e1      	b.n	80071be <_strtol_l.constprop.0+0x8a>
 80071fa:	1c53      	adds	r3, r2, #1
 80071fc:	d108      	bne.n	8007210 <_strtol_l.constprop.0+0xdc>
 80071fe:	2322      	movs	r3, #34	@ 0x22
 8007200:	4660      	mov	r0, ip
 8007202:	f8ce 3000 	str.w	r3, [lr]
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	d0a0      	beq.n	800714e <_strtol_l.constprop.0+0x1a>
 800720c:	1e69      	subs	r1, r5, #1
 800720e:	e006      	b.n	800721e <_strtol_l.constprop.0+0xea>
 8007210:	b106      	cbz	r6, 8007214 <_strtol_l.constprop.0+0xe0>
 8007212:	4240      	negs	r0, r0
 8007214:	f1b8 0f00 	cmp.w	r8, #0
 8007218:	d099      	beq.n	800714e <_strtol_l.constprop.0+0x1a>
 800721a:	2a00      	cmp	r2, #0
 800721c:	d1f6      	bne.n	800720c <_strtol_l.constprop.0+0xd8>
 800721e:	f8c8 1000 	str.w	r1, [r8]
 8007222:	e794      	b.n	800714e <_strtol_l.constprop.0+0x1a>
 8007224:	080088f1 	.word	0x080088f1

08007228 <_strtol_r>:
 8007228:	f7ff bf84 	b.w	8007134 <_strtol_l.constprop.0>

0800722c <__ssputs_r>:
 800722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	461f      	mov	r7, r3
 8007232:	688e      	ldr	r6, [r1, #8]
 8007234:	4682      	mov	sl, r0
 8007236:	42be      	cmp	r6, r7
 8007238:	460c      	mov	r4, r1
 800723a:	4690      	mov	r8, r2
 800723c:	680b      	ldr	r3, [r1, #0]
 800723e:	d82d      	bhi.n	800729c <__ssputs_r+0x70>
 8007240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007248:	d026      	beq.n	8007298 <__ssputs_r+0x6c>
 800724a:	6965      	ldr	r5, [r4, #20]
 800724c:	6909      	ldr	r1, [r1, #16]
 800724e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007252:	eba3 0901 	sub.w	r9, r3, r1
 8007256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800725a:	1c7b      	adds	r3, r7, #1
 800725c:	444b      	add	r3, r9
 800725e:	106d      	asrs	r5, r5, #1
 8007260:	429d      	cmp	r5, r3
 8007262:	bf38      	it	cc
 8007264:	461d      	movcc	r5, r3
 8007266:	0553      	lsls	r3, r2, #21
 8007268:	d527      	bpl.n	80072ba <__ssputs_r+0x8e>
 800726a:	4629      	mov	r1, r5
 800726c:	f7fe fc2e 	bl	8005acc <_malloc_r>
 8007270:	4606      	mov	r6, r0
 8007272:	b360      	cbz	r0, 80072ce <__ssputs_r+0xa2>
 8007274:	464a      	mov	r2, r9
 8007276:	6921      	ldr	r1, [r4, #16]
 8007278:	f000 fa14 	bl	80076a4 <memcpy>
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	6126      	str	r6, [r4, #16]
 800728a:	444e      	add	r6, r9
 800728c:	6026      	str	r6, [r4, #0]
 800728e:	463e      	mov	r6, r7
 8007290:	6165      	str	r5, [r4, #20]
 8007292:	eba5 0509 	sub.w	r5, r5, r9
 8007296:	60a5      	str	r5, [r4, #8]
 8007298:	42be      	cmp	r6, r7
 800729a:	d900      	bls.n	800729e <__ssputs_r+0x72>
 800729c:	463e      	mov	r6, r7
 800729e:	4632      	mov	r2, r6
 80072a0:	4641      	mov	r1, r8
 80072a2:	6820      	ldr	r0, [r4, #0]
 80072a4:	f000 f9c2 	bl	800762c <memmove>
 80072a8:	2000      	movs	r0, #0
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	1b9b      	subs	r3, r3, r6
 80072ae:	60a3      	str	r3, [r4, #8]
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	4433      	add	r3, r6
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ba:	462a      	mov	r2, r5
 80072bc:	f000 fd83 	bl	8007dc6 <_realloc_r>
 80072c0:	4606      	mov	r6, r0
 80072c2:	2800      	cmp	r0, #0
 80072c4:	d1e0      	bne.n	8007288 <__ssputs_r+0x5c>
 80072c6:	4650      	mov	r0, sl
 80072c8:	6921      	ldr	r1, [r4, #16]
 80072ca:	f7fe fb8d 	bl	80059e8 <_free_r>
 80072ce:	230c      	movs	r3, #12
 80072d0:	f8ca 3000 	str.w	r3, [sl]
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072de:	81a3      	strh	r3, [r4, #12]
 80072e0:	e7e9      	b.n	80072b6 <__ssputs_r+0x8a>
	...

080072e4 <_svfiprintf_r>:
 80072e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	4698      	mov	r8, r3
 80072ea:	898b      	ldrh	r3, [r1, #12]
 80072ec:	4607      	mov	r7, r0
 80072ee:	061b      	lsls	r3, r3, #24
 80072f0:	460d      	mov	r5, r1
 80072f2:	4614      	mov	r4, r2
 80072f4:	b09d      	sub	sp, #116	@ 0x74
 80072f6:	d510      	bpl.n	800731a <_svfiprintf_r+0x36>
 80072f8:	690b      	ldr	r3, [r1, #16]
 80072fa:	b973      	cbnz	r3, 800731a <_svfiprintf_r+0x36>
 80072fc:	2140      	movs	r1, #64	@ 0x40
 80072fe:	f7fe fbe5 	bl	8005acc <_malloc_r>
 8007302:	6028      	str	r0, [r5, #0]
 8007304:	6128      	str	r0, [r5, #16]
 8007306:	b930      	cbnz	r0, 8007316 <_svfiprintf_r+0x32>
 8007308:	230c      	movs	r3, #12
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007310:	b01d      	add	sp, #116	@ 0x74
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	2340      	movs	r3, #64	@ 0x40
 8007318:	616b      	str	r3, [r5, #20]
 800731a:	2300      	movs	r3, #0
 800731c:	9309      	str	r3, [sp, #36]	@ 0x24
 800731e:	2320      	movs	r3, #32
 8007320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007324:	2330      	movs	r3, #48	@ 0x30
 8007326:	f04f 0901 	mov.w	r9, #1
 800732a:	f8cd 800c 	str.w	r8, [sp, #12]
 800732e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80074c8 <_svfiprintf_r+0x1e4>
 8007332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007336:	4623      	mov	r3, r4
 8007338:	469a      	mov	sl, r3
 800733a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733e:	b10a      	cbz	r2, 8007344 <_svfiprintf_r+0x60>
 8007340:	2a25      	cmp	r2, #37	@ 0x25
 8007342:	d1f9      	bne.n	8007338 <_svfiprintf_r+0x54>
 8007344:	ebba 0b04 	subs.w	fp, sl, r4
 8007348:	d00b      	beq.n	8007362 <_svfiprintf_r+0x7e>
 800734a:	465b      	mov	r3, fp
 800734c:	4622      	mov	r2, r4
 800734e:	4629      	mov	r1, r5
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ff6b 	bl	800722c <__ssputs_r>
 8007356:	3001      	adds	r0, #1
 8007358:	f000 80a7 	beq.w	80074aa <_svfiprintf_r+0x1c6>
 800735c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800735e:	445a      	add	r2, fp
 8007360:	9209      	str	r2, [sp, #36]	@ 0x24
 8007362:	f89a 3000 	ldrb.w	r3, [sl]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 809f 	beq.w	80074aa <_svfiprintf_r+0x1c6>
 800736c:	2300      	movs	r3, #0
 800736e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007376:	f10a 0a01 	add.w	sl, sl, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007382:	931a      	str	r3, [sp, #104]	@ 0x68
 8007384:	4654      	mov	r4, sl
 8007386:	2205      	movs	r2, #5
 8007388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738c:	484e      	ldr	r0, [pc, #312]	@ (80074c8 <_svfiprintf_r+0x1e4>)
 800738e:	f7fd fcc8 	bl	8004d22 <memchr>
 8007392:	9a04      	ldr	r2, [sp, #16]
 8007394:	b9d8      	cbnz	r0, 80073ce <_svfiprintf_r+0xea>
 8007396:	06d0      	lsls	r0, r2, #27
 8007398:	bf44      	itt	mi
 800739a:	2320      	movmi	r3, #32
 800739c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a0:	0711      	lsls	r1, r2, #28
 80073a2:	bf44      	itt	mi
 80073a4:	232b      	movmi	r3, #43	@ 0x2b
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b0:	d015      	beq.n	80073de <_svfiprintf_r+0xfa>
 80073b2:	4654      	mov	r4, sl
 80073b4:	2000      	movs	r0, #0
 80073b6:	f04f 0c0a 	mov.w	ip, #10
 80073ba:	9a07      	ldr	r2, [sp, #28]
 80073bc:	4621      	mov	r1, r4
 80073be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c2:	3b30      	subs	r3, #48	@ 0x30
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d94b      	bls.n	8007460 <_svfiprintf_r+0x17c>
 80073c8:	b1b0      	cbz	r0, 80073f8 <_svfiprintf_r+0x114>
 80073ca:	9207      	str	r2, [sp, #28]
 80073cc:	e014      	b.n	80073f8 <_svfiprintf_r+0x114>
 80073ce:	eba0 0308 	sub.w	r3, r0, r8
 80073d2:	fa09 f303 	lsl.w	r3, r9, r3
 80073d6:	4313      	orrs	r3, r2
 80073d8:	46a2      	mov	sl, r4
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	e7d2      	b.n	8007384 <_svfiprintf_r+0xa0>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	1d19      	adds	r1, r3, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	9103      	str	r1, [sp, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bfbb      	ittet	lt
 80073ea:	425b      	neglt	r3, r3
 80073ec:	f042 0202 	orrlt.w	r2, r2, #2
 80073f0:	9307      	strge	r3, [sp, #28]
 80073f2:	9307      	strlt	r3, [sp, #28]
 80073f4:	bfb8      	it	lt
 80073f6:	9204      	strlt	r2, [sp, #16]
 80073f8:	7823      	ldrb	r3, [r4, #0]
 80073fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80073fc:	d10a      	bne.n	8007414 <_svfiprintf_r+0x130>
 80073fe:	7863      	ldrb	r3, [r4, #1]
 8007400:	2b2a      	cmp	r3, #42	@ 0x2a
 8007402:	d132      	bne.n	800746a <_svfiprintf_r+0x186>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	3402      	adds	r4, #2
 8007408:	1d1a      	adds	r2, r3, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	9203      	str	r2, [sp, #12]
 800740e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007412:	9305      	str	r3, [sp, #20]
 8007414:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80074cc <_svfiprintf_r+0x1e8>
 8007418:	2203      	movs	r2, #3
 800741a:	4650      	mov	r0, sl
 800741c:	7821      	ldrb	r1, [r4, #0]
 800741e:	f7fd fc80 	bl	8004d22 <memchr>
 8007422:	b138      	cbz	r0, 8007434 <_svfiprintf_r+0x150>
 8007424:	2240      	movs	r2, #64	@ 0x40
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	eba0 000a 	sub.w	r0, r0, sl
 800742c:	4082      	lsls	r2, r0
 800742e:	4313      	orrs	r3, r2
 8007430:	3401      	adds	r4, #1
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007438:	2206      	movs	r2, #6
 800743a:	4825      	ldr	r0, [pc, #148]	@ (80074d0 <_svfiprintf_r+0x1ec>)
 800743c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007440:	f7fd fc6f 	bl	8004d22 <memchr>
 8007444:	2800      	cmp	r0, #0
 8007446:	d036      	beq.n	80074b6 <_svfiprintf_r+0x1d2>
 8007448:	4b22      	ldr	r3, [pc, #136]	@ (80074d4 <_svfiprintf_r+0x1f0>)
 800744a:	bb1b      	cbnz	r3, 8007494 <_svfiprintf_r+0x1b0>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	3307      	adds	r3, #7
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	3308      	adds	r3, #8
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745a:	4433      	add	r3, r6
 800745c:	9309      	str	r3, [sp, #36]	@ 0x24
 800745e:	e76a      	b.n	8007336 <_svfiprintf_r+0x52>
 8007460:	460c      	mov	r4, r1
 8007462:	2001      	movs	r0, #1
 8007464:	fb0c 3202 	mla	r2, ip, r2, r3
 8007468:	e7a8      	b.n	80073bc <_svfiprintf_r+0xd8>
 800746a:	2300      	movs	r3, #0
 800746c:	f04f 0c0a 	mov.w	ip, #10
 8007470:	4619      	mov	r1, r3
 8007472:	3401      	adds	r4, #1
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	4620      	mov	r0, r4
 8007478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800747c:	3a30      	subs	r2, #48	@ 0x30
 800747e:	2a09      	cmp	r2, #9
 8007480:	d903      	bls.n	800748a <_svfiprintf_r+0x1a6>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0c6      	beq.n	8007414 <_svfiprintf_r+0x130>
 8007486:	9105      	str	r1, [sp, #20]
 8007488:	e7c4      	b.n	8007414 <_svfiprintf_r+0x130>
 800748a:	4604      	mov	r4, r0
 800748c:	2301      	movs	r3, #1
 800748e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007492:	e7f0      	b.n	8007476 <_svfiprintf_r+0x192>
 8007494:	ab03      	add	r3, sp, #12
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	462a      	mov	r2, r5
 800749a:	4638      	mov	r0, r7
 800749c:	4b0e      	ldr	r3, [pc, #56]	@ (80074d8 <_svfiprintf_r+0x1f4>)
 800749e:	a904      	add	r1, sp, #16
 80074a0:	f7fc fccc 	bl	8003e3c <_printf_float>
 80074a4:	1c42      	adds	r2, r0, #1
 80074a6:	4606      	mov	r6, r0
 80074a8:	d1d6      	bne.n	8007458 <_svfiprintf_r+0x174>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	065b      	lsls	r3, r3, #25
 80074ae:	f53f af2d 	bmi.w	800730c <_svfiprintf_r+0x28>
 80074b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074b4:	e72c      	b.n	8007310 <_svfiprintf_r+0x2c>
 80074b6:	ab03      	add	r3, sp, #12
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	462a      	mov	r2, r5
 80074bc:	4638      	mov	r0, r7
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <_svfiprintf_r+0x1f4>)
 80074c0:	a904      	add	r1, sp, #16
 80074c2:	f7fc ff59 	bl	8004378 <_printf_i>
 80074c6:	e7ed      	b.n	80074a4 <_svfiprintf_r+0x1c0>
 80074c8:	080089f1 	.word	0x080089f1
 80074cc:	080089f7 	.word	0x080089f7
 80074d0:	080089fb 	.word	0x080089fb
 80074d4:	08003e3d 	.word	0x08003e3d
 80074d8:	0800722d 	.word	0x0800722d

080074dc <__sflush_r>:
 80074dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	0716      	lsls	r6, r2, #28
 80074e4:	4605      	mov	r5, r0
 80074e6:	460c      	mov	r4, r1
 80074e8:	d454      	bmi.n	8007594 <__sflush_r+0xb8>
 80074ea:	684b      	ldr	r3, [r1, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dc02      	bgt.n	80074f6 <__sflush_r+0x1a>
 80074f0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dd48      	ble.n	8007588 <__sflush_r+0xac>
 80074f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074f8:	2e00      	cmp	r6, #0
 80074fa:	d045      	beq.n	8007588 <__sflush_r+0xac>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007502:	682f      	ldr	r7, [r5, #0]
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	602b      	str	r3, [r5, #0]
 8007508:	d030      	beq.n	800756c <__sflush_r+0x90>
 800750a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	0759      	lsls	r1, r3, #29
 8007510:	d505      	bpl.n	800751e <__sflush_r+0x42>
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	1ad2      	subs	r2, r2, r3
 8007516:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007518:	b10b      	cbz	r3, 800751e <__sflush_r+0x42>
 800751a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800751c:	1ad2      	subs	r2, r2, r3
 800751e:	2300      	movs	r3, #0
 8007520:	4628      	mov	r0, r5
 8007522:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007524:	6a21      	ldr	r1, [r4, #32]
 8007526:	47b0      	blx	r6
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	d106      	bne.n	800753c <__sflush_r+0x60>
 800752e:	6829      	ldr	r1, [r5, #0]
 8007530:	291d      	cmp	r1, #29
 8007532:	d82b      	bhi.n	800758c <__sflush_r+0xb0>
 8007534:	4a28      	ldr	r2, [pc, #160]	@ (80075d8 <__sflush_r+0xfc>)
 8007536:	410a      	asrs	r2, r1
 8007538:	07d6      	lsls	r6, r2, #31
 800753a:	d427      	bmi.n	800758c <__sflush_r+0xb0>
 800753c:	2200      	movs	r2, #0
 800753e:	6062      	str	r2, [r4, #4]
 8007540:	6922      	ldr	r2, [r4, #16]
 8007542:	04d9      	lsls	r1, r3, #19
 8007544:	6022      	str	r2, [r4, #0]
 8007546:	d504      	bpl.n	8007552 <__sflush_r+0x76>
 8007548:	1c42      	adds	r2, r0, #1
 800754a:	d101      	bne.n	8007550 <__sflush_r+0x74>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b903      	cbnz	r3, 8007552 <__sflush_r+0x76>
 8007550:	6560      	str	r0, [r4, #84]	@ 0x54
 8007552:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007554:	602f      	str	r7, [r5, #0]
 8007556:	b1b9      	cbz	r1, 8007588 <__sflush_r+0xac>
 8007558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800755c:	4299      	cmp	r1, r3
 800755e:	d002      	beq.n	8007566 <__sflush_r+0x8a>
 8007560:	4628      	mov	r0, r5
 8007562:	f7fe fa41 	bl	80059e8 <_free_r>
 8007566:	2300      	movs	r3, #0
 8007568:	6363      	str	r3, [r4, #52]	@ 0x34
 800756a:	e00d      	b.n	8007588 <__sflush_r+0xac>
 800756c:	2301      	movs	r3, #1
 800756e:	4628      	mov	r0, r5
 8007570:	47b0      	blx	r6
 8007572:	4602      	mov	r2, r0
 8007574:	1c50      	adds	r0, r2, #1
 8007576:	d1c9      	bne.n	800750c <__sflush_r+0x30>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0c6      	beq.n	800750c <__sflush_r+0x30>
 800757e:	2b1d      	cmp	r3, #29
 8007580:	d001      	beq.n	8007586 <__sflush_r+0xaa>
 8007582:	2b16      	cmp	r3, #22
 8007584:	d11d      	bne.n	80075c2 <__sflush_r+0xe6>
 8007586:	602f      	str	r7, [r5, #0]
 8007588:	2000      	movs	r0, #0
 800758a:	e021      	b.n	80075d0 <__sflush_r+0xf4>
 800758c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007590:	b21b      	sxth	r3, r3
 8007592:	e01a      	b.n	80075ca <__sflush_r+0xee>
 8007594:	690f      	ldr	r7, [r1, #16]
 8007596:	2f00      	cmp	r7, #0
 8007598:	d0f6      	beq.n	8007588 <__sflush_r+0xac>
 800759a:	0793      	lsls	r3, r2, #30
 800759c:	bf18      	it	ne
 800759e:	2300      	movne	r3, #0
 80075a0:	680e      	ldr	r6, [r1, #0]
 80075a2:	bf08      	it	eq
 80075a4:	694b      	ldreq	r3, [r1, #20]
 80075a6:	1bf6      	subs	r6, r6, r7
 80075a8:	600f      	str	r7, [r1, #0]
 80075aa:	608b      	str	r3, [r1, #8]
 80075ac:	2e00      	cmp	r6, #0
 80075ae:	ddeb      	ble.n	8007588 <__sflush_r+0xac>
 80075b0:	4633      	mov	r3, r6
 80075b2:	463a      	mov	r2, r7
 80075b4:	4628      	mov	r0, r5
 80075b6:	6a21      	ldr	r1, [r4, #32]
 80075b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80075bc:	47e0      	blx	ip
 80075be:	2800      	cmp	r0, #0
 80075c0:	dc07      	bgt.n	80075d2 <__sflush_r+0xf6>
 80075c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075d2:	4407      	add	r7, r0
 80075d4:	1a36      	subs	r6, r6, r0
 80075d6:	e7e9      	b.n	80075ac <__sflush_r+0xd0>
 80075d8:	dfbffffe 	.word	0xdfbffffe

080075dc <_fflush_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	690b      	ldr	r3, [r1, #16]
 80075e0:	4605      	mov	r5, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	b913      	cbnz	r3, 80075ec <_fflush_r+0x10>
 80075e6:	2500      	movs	r5, #0
 80075e8:	4628      	mov	r0, r5
 80075ea:	bd38      	pop	{r3, r4, r5, pc}
 80075ec:	b118      	cbz	r0, 80075f6 <_fflush_r+0x1a>
 80075ee:	6a03      	ldr	r3, [r0, #32]
 80075f0:	b90b      	cbnz	r3, 80075f6 <_fflush_r+0x1a>
 80075f2:	f7fd fa7d 	bl	8004af0 <__sinit>
 80075f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f3      	beq.n	80075e6 <_fflush_r+0xa>
 80075fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007600:	07d0      	lsls	r0, r2, #31
 8007602:	d404      	bmi.n	800760e <_fflush_r+0x32>
 8007604:	0599      	lsls	r1, r3, #22
 8007606:	d402      	bmi.n	800760e <_fflush_r+0x32>
 8007608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760a:	f7fd fb88 	bl	8004d1e <__retarget_lock_acquire_recursive>
 800760e:	4628      	mov	r0, r5
 8007610:	4621      	mov	r1, r4
 8007612:	f7ff ff63 	bl	80074dc <__sflush_r>
 8007616:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007618:	4605      	mov	r5, r0
 800761a:	07da      	lsls	r2, r3, #31
 800761c:	d4e4      	bmi.n	80075e8 <_fflush_r+0xc>
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	059b      	lsls	r3, r3, #22
 8007622:	d4e1      	bmi.n	80075e8 <_fflush_r+0xc>
 8007624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007626:	f7fd fb7b 	bl	8004d20 <__retarget_lock_release_recursive>
 800762a:	e7dd      	b.n	80075e8 <_fflush_r+0xc>

0800762c <memmove>:
 800762c:	4288      	cmp	r0, r1
 800762e:	b510      	push	{r4, lr}
 8007630:	eb01 0402 	add.w	r4, r1, r2
 8007634:	d902      	bls.n	800763c <memmove+0x10>
 8007636:	4284      	cmp	r4, r0
 8007638:	4623      	mov	r3, r4
 800763a:	d807      	bhi.n	800764c <memmove+0x20>
 800763c:	1e43      	subs	r3, r0, #1
 800763e:	42a1      	cmp	r1, r4
 8007640:	d008      	beq.n	8007654 <memmove+0x28>
 8007642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800764a:	e7f8      	b.n	800763e <memmove+0x12>
 800764c:	4601      	mov	r1, r0
 800764e:	4402      	add	r2, r0
 8007650:	428a      	cmp	r2, r1
 8007652:	d100      	bne.n	8007656 <memmove+0x2a>
 8007654:	bd10      	pop	{r4, pc}
 8007656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800765e:	e7f7      	b.n	8007650 <memmove+0x24>

08007660 <strncmp>:
 8007660:	b510      	push	{r4, lr}
 8007662:	b16a      	cbz	r2, 8007680 <strncmp+0x20>
 8007664:	3901      	subs	r1, #1
 8007666:	1884      	adds	r4, r0, r2
 8007668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007670:	429a      	cmp	r2, r3
 8007672:	d103      	bne.n	800767c <strncmp+0x1c>
 8007674:	42a0      	cmp	r0, r4
 8007676:	d001      	beq.n	800767c <strncmp+0x1c>
 8007678:	2a00      	cmp	r2, #0
 800767a:	d1f5      	bne.n	8007668 <strncmp+0x8>
 800767c:	1ad0      	subs	r0, r2, r3
 800767e:	bd10      	pop	{r4, pc}
 8007680:	4610      	mov	r0, r2
 8007682:	e7fc      	b.n	800767e <strncmp+0x1e>

08007684 <_sbrk_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	2300      	movs	r3, #0
 8007688:	4d05      	ldr	r5, [pc, #20]	@ (80076a0 <_sbrk_r+0x1c>)
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	602b      	str	r3, [r5, #0]
 8007690:	f7fa fac2 	bl	8001c18 <_sbrk>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_sbrk_r+0x1a>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_sbrk_r+0x1a>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	20000348 	.word	0x20000348

080076a4 <memcpy>:
 80076a4:	440a      	add	r2, r1
 80076a6:	4291      	cmp	r1, r2
 80076a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80076ac:	d100      	bne.n	80076b0 <memcpy+0xc>
 80076ae:	4770      	bx	lr
 80076b0:	b510      	push	{r4, lr}
 80076b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b6:	4291      	cmp	r1, r2
 80076b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076bc:	d1f9      	bne.n	80076b2 <memcpy+0xe>
 80076be:	bd10      	pop	{r4, pc}

080076c0 <nan>:
 80076c0:	2000      	movs	r0, #0
 80076c2:	4901      	ldr	r1, [pc, #4]	@ (80076c8 <nan+0x8>)
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	7ff80000 	.word	0x7ff80000

080076cc <__assert_func>:
 80076cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ce:	4614      	mov	r4, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b09      	ldr	r3, [pc, #36]	@ (80076f8 <__assert_func+0x2c>)
 80076d4:	4605      	mov	r5, r0
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68d8      	ldr	r0, [r3, #12]
 80076da:	b954      	cbnz	r4, 80076f2 <__assert_func+0x26>
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <__assert_func+0x30>)
 80076de:	461c      	mov	r4, r3
 80076e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076e4:	9100      	str	r1, [sp, #0]
 80076e6:	462b      	mov	r3, r5
 80076e8:	4905      	ldr	r1, [pc, #20]	@ (8007700 <__assert_func+0x34>)
 80076ea:	f000 fba7 	bl	8007e3c <fiprintf>
 80076ee:	f000 fbb7 	bl	8007e60 <abort>
 80076f2:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <__assert_func+0x38>)
 80076f4:	e7f4      	b.n	80076e0 <__assert_func+0x14>
 80076f6:	bf00      	nop
 80076f8:	2000002c 	.word	0x2000002c
 80076fc:	08008a45 	.word	0x08008a45
 8007700:	08008a17 	.word	0x08008a17
 8007704:	08008a0a 	.word	0x08008a0a

08007708 <_calloc_r>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	fba1 5402 	umull	r5, r4, r1, r2
 800770e:	b93c      	cbnz	r4, 8007720 <_calloc_r+0x18>
 8007710:	4629      	mov	r1, r5
 8007712:	f7fe f9db 	bl	8005acc <_malloc_r>
 8007716:	4606      	mov	r6, r0
 8007718:	b928      	cbnz	r0, 8007726 <_calloc_r+0x1e>
 800771a:	2600      	movs	r6, #0
 800771c:	4630      	mov	r0, r6
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	220c      	movs	r2, #12
 8007722:	6002      	str	r2, [r0, #0]
 8007724:	e7f9      	b.n	800771a <_calloc_r+0x12>
 8007726:	462a      	mov	r2, r5
 8007728:	4621      	mov	r1, r4
 800772a:	f7fd fa7a 	bl	8004c22 <memset>
 800772e:	e7f5      	b.n	800771c <_calloc_r+0x14>

08007730 <rshift>:
 8007730:	6903      	ldr	r3, [r0, #16]
 8007732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007736:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800773a:	f100 0414 	add.w	r4, r0, #20
 800773e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007742:	dd46      	ble.n	80077d2 <rshift+0xa2>
 8007744:	f011 011f 	ands.w	r1, r1, #31
 8007748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800774c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007750:	d10c      	bne.n	800776c <rshift+0x3c>
 8007752:	4629      	mov	r1, r5
 8007754:	f100 0710 	add.w	r7, r0, #16
 8007758:	42b1      	cmp	r1, r6
 800775a:	d335      	bcc.n	80077c8 <rshift+0x98>
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	1eea      	subs	r2, r5, #3
 8007762:	4296      	cmp	r6, r2
 8007764:	bf38      	it	cc
 8007766:	2300      	movcc	r3, #0
 8007768:	4423      	add	r3, r4
 800776a:	e015      	b.n	8007798 <rshift+0x68>
 800776c:	46a1      	mov	r9, r4
 800776e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007772:	f1c1 0820 	rsb	r8, r1, #32
 8007776:	40cf      	lsrs	r7, r1
 8007778:	f105 0e04 	add.w	lr, r5, #4
 800777c:	4576      	cmp	r6, lr
 800777e:	46f4      	mov	ip, lr
 8007780:	d816      	bhi.n	80077b0 <rshift+0x80>
 8007782:	1a9a      	subs	r2, r3, r2
 8007784:	0092      	lsls	r2, r2, #2
 8007786:	3a04      	subs	r2, #4
 8007788:	3501      	adds	r5, #1
 800778a:	42ae      	cmp	r6, r5
 800778c:	bf38      	it	cc
 800778e:	2200      	movcc	r2, #0
 8007790:	18a3      	adds	r3, r4, r2
 8007792:	50a7      	str	r7, [r4, r2]
 8007794:	b107      	cbz	r7, 8007798 <rshift+0x68>
 8007796:	3304      	adds	r3, #4
 8007798:	42a3      	cmp	r3, r4
 800779a:	eba3 0204 	sub.w	r2, r3, r4
 800779e:	bf08      	it	eq
 80077a0:	2300      	moveq	r3, #0
 80077a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077a6:	6102      	str	r2, [r0, #16]
 80077a8:	bf08      	it	eq
 80077aa:	6143      	streq	r3, [r0, #20]
 80077ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077b0:	f8dc c000 	ldr.w	ip, [ip]
 80077b4:	fa0c fc08 	lsl.w	ip, ip, r8
 80077b8:	ea4c 0707 	orr.w	r7, ip, r7
 80077bc:	f849 7b04 	str.w	r7, [r9], #4
 80077c0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077c4:	40cf      	lsrs	r7, r1
 80077c6:	e7d9      	b.n	800777c <rshift+0x4c>
 80077c8:	f851 cb04 	ldr.w	ip, [r1], #4
 80077cc:	f847 cf04 	str.w	ip, [r7, #4]!
 80077d0:	e7c2      	b.n	8007758 <rshift+0x28>
 80077d2:	4623      	mov	r3, r4
 80077d4:	e7e0      	b.n	8007798 <rshift+0x68>

080077d6 <__hexdig_fun>:
 80077d6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d802      	bhi.n	80077e4 <__hexdig_fun+0xe>
 80077de:	3820      	subs	r0, #32
 80077e0:	b2c0      	uxtb	r0, r0
 80077e2:	4770      	bx	lr
 80077e4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d801      	bhi.n	80077f0 <__hexdig_fun+0x1a>
 80077ec:	3847      	subs	r0, #71	@ 0x47
 80077ee:	e7f7      	b.n	80077e0 <__hexdig_fun+0xa>
 80077f0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d801      	bhi.n	80077fc <__hexdig_fun+0x26>
 80077f8:	3827      	subs	r0, #39	@ 0x27
 80077fa:	e7f1      	b.n	80077e0 <__hexdig_fun+0xa>
 80077fc:	2000      	movs	r0, #0
 80077fe:	4770      	bx	lr

08007800 <__gethex>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	468a      	mov	sl, r1
 8007806:	4690      	mov	r8, r2
 8007808:	b085      	sub	sp, #20
 800780a:	9302      	str	r3, [sp, #8]
 800780c:	680b      	ldr	r3, [r1, #0]
 800780e:	9001      	str	r0, [sp, #4]
 8007810:	1c9c      	adds	r4, r3, #2
 8007812:	46a1      	mov	r9, r4
 8007814:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007818:	2830      	cmp	r0, #48	@ 0x30
 800781a:	d0fa      	beq.n	8007812 <__gethex+0x12>
 800781c:	eba9 0303 	sub.w	r3, r9, r3
 8007820:	f1a3 0b02 	sub.w	fp, r3, #2
 8007824:	f7ff ffd7 	bl	80077d6 <__hexdig_fun>
 8007828:	4605      	mov	r5, r0
 800782a:	2800      	cmp	r0, #0
 800782c:	d168      	bne.n	8007900 <__gethex+0x100>
 800782e:	2201      	movs	r2, #1
 8007830:	4648      	mov	r0, r9
 8007832:	499f      	ldr	r1, [pc, #636]	@ (8007ab0 <__gethex+0x2b0>)
 8007834:	f7ff ff14 	bl	8007660 <strncmp>
 8007838:	4607      	mov	r7, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d167      	bne.n	800790e <__gethex+0x10e>
 800783e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007842:	4626      	mov	r6, r4
 8007844:	f7ff ffc7 	bl	80077d6 <__hexdig_fun>
 8007848:	2800      	cmp	r0, #0
 800784a:	d062      	beq.n	8007912 <__gethex+0x112>
 800784c:	4623      	mov	r3, r4
 800784e:	7818      	ldrb	r0, [r3, #0]
 8007850:	4699      	mov	r9, r3
 8007852:	2830      	cmp	r0, #48	@ 0x30
 8007854:	f103 0301 	add.w	r3, r3, #1
 8007858:	d0f9      	beq.n	800784e <__gethex+0x4e>
 800785a:	f7ff ffbc 	bl	80077d6 <__hexdig_fun>
 800785e:	fab0 f580 	clz	r5, r0
 8007862:	f04f 0b01 	mov.w	fp, #1
 8007866:	096d      	lsrs	r5, r5, #5
 8007868:	464a      	mov	r2, r9
 800786a:	4616      	mov	r6, r2
 800786c:	7830      	ldrb	r0, [r6, #0]
 800786e:	3201      	adds	r2, #1
 8007870:	f7ff ffb1 	bl	80077d6 <__hexdig_fun>
 8007874:	2800      	cmp	r0, #0
 8007876:	d1f8      	bne.n	800786a <__gethex+0x6a>
 8007878:	2201      	movs	r2, #1
 800787a:	4630      	mov	r0, r6
 800787c:	498c      	ldr	r1, [pc, #560]	@ (8007ab0 <__gethex+0x2b0>)
 800787e:	f7ff feef 	bl	8007660 <strncmp>
 8007882:	2800      	cmp	r0, #0
 8007884:	d13f      	bne.n	8007906 <__gethex+0x106>
 8007886:	b944      	cbnz	r4, 800789a <__gethex+0x9a>
 8007888:	1c74      	adds	r4, r6, #1
 800788a:	4622      	mov	r2, r4
 800788c:	4616      	mov	r6, r2
 800788e:	7830      	ldrb	r0, [r6, #0]
 8007890:	3201      	adds	r2, #1
 8007892:	f7ff ffa0 	bl	80077d6 <__hexdig_fun>
 8007896:	2800      	cmp	r0, #0
 8007898:	d1f8      	bne.n	800788c <__gethex+0x8c>
 800789a:	1ba4      	subs	r4, r4, r6
 800789c:	00a7      	lsls	r7, r4, #2
 800789e:	7833      	ldrb	r3, [r6, #0]
 80078a0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80078a4:	2b50      	cmp	r3, #80	@ 0x50
 80078a6:	d13e      	bne.n	8007926 <__gethex+0x126>
 80078a8:	7873      	ldrb	r3, [r6, #1]
 80078aa:	2b2b      	cmp	r3, #43	@ 0x2b
 80078ac:	d033      	beq.n	8007916 <__gethex+0x116>
 80078ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80078b0:	d034      	beq.n	800791c <__gethex+0x11c>
 80078b2:	2400      	movs	r4, #0
 80078b4:	1c71      	adds	r1, r6, #1
 80078b6:	7808      	ldrb	r0, [r1, #0]
 80078b8:	f7ff ff8d 	bl	80077d6 <__hexdig_fun>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b18      	cmp	r3, #24
 80078c2:	d830      	bhi.n	8007926 <__gethex+0x126>
 80078c4:	f1a0 0210 	sub.w	r2, r0, #16
 80078c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078cc:	f7ff ff83 	bl	80077d6 <__hexdig_fun>
 80078d0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80078d4:	fa5f fc8c 	uxtb.w	ip, ip
 80078d8:	f1bc 0f18 	cmp.w	ip, #24
 80078dc:	f04f 030a 	mov.w	r3, #10
 80078e0:	d91e      	bls.n	8007920 <__gethex+0x120>
 80078e2:	b104      	cbz	r4, 80078e6 <__gethex+0xe6>
 80078e4:	4252      	negs	r2, r2
 80078e6:	4417      	add	r7, r2
 80078e8:	f8ca 1000 	str.w	r1, [sl]
 80078ec:	b1ed      	cbz	r5, 800792a <__gethex+0x12a>
 80078ee:	f1bb 0f00 	cmp.w	fp, #0
 80078f2:	bf0c      	ite	eq
 80078f4:	2506      	moveq	r5, #6
 80078f6:	2500      	movne	r5, #0
 80078f8:	4628      	mov	r0, r5
 80078fa:	b005      	add	sp, #20
 80078fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007900:	2500      	movs	r5, #0
 8007902:	462c      	mov	r4, r5
 8007904:	e7b0      	b.n	8007868 <__gethex+0x68>
 8007906:	2c00      	cmp	r4, #0
 8007908:	d1c7      	bne.n	800789a <__gethex+0x9a>
 800790a:	4627      	mov	r7, r4
 800790c:	e7c7      	b.n	800789e <__gethex+0x9e>
 800790e:	464e      	mov	r6, r9
 8007910:	462f      	mov	r7, r5
 8007912:	2501      	movs	r5, #1
 8007914:	e7c3      	b.n	800789e <__gethex+0x9e>
 8007916:	2400      	movs	r4, #0
 8007918:	1cb1      	adds	r1, r6, #2
 800791a:	e7cc      	b.n	80078b6 <__gethex+0xb6>
 800791c:	2401      	movs	r4, #1
 800791e:	e7fb      	b.n	8007918 <__gethex+0x118>
 8007920:	fb03 0002 	mla	r0, r3, r2, r0
 8007924:	e7ce      	b.n	80078c4 <__gethex+0xc4>
 8007926:	4631      	mov	r1, r6
 8007928:	e7de      	b.n	80078e8 <__gethex+0xe8>
 800792a:	4629      	mov	r1, r5
 800792c:	eba6 0309 	sub.w	r3, r6, r9
 8007930:	3b01      	subs	r3, #1
 8007932:	2b07      	cmp	r3, #7
 8007934:	dc0a      	bgt.n	800794c <__gethex+0x14c>
 8007936:	9801      	ldr	r0, [sp, #4]
 8007938:	f7fe f954 	bl	8005be4 <_Balloc>
 800793c:	4604      	mov	r4, r0
 800793e:	b940      	cbnz	r0, 8007952 <__gethex+0x152>
 8007940:	4602      	mov	r2, r0
 8007942:	21e4      	movs	r1, #228	@ 0xe4
 8007944:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab4 <__gethex+0x2b4>)
 8007946:	485c      	ldr	r0, [pc, #368]	@ (8007ab8 <__gethex+0x2b8>)
 8007948:	f7ff fec0 	bl	80076cc <__assert_func>
 800794c:	3101      	adds	r1, #1
 800794e:	105b      	asrs	r3, r3, #1
 8007950:	e7ef      	b.n	8007932 <__gethex+0x132>
 8007952:	2300      	movs	r3, #0
 8007954:	f100 0a14 	add.w	sl, r0, #20
 8007958:	4655      	mov	r5, sl
 800795a:	469b      	mov	fp, r3
 800795c:	45b1      	cmp	r9, r6
 800795e:	d337      	bcc.n	80079d0 <__gethex+0x1d0>
 8007960:	f845 bb04 	str.w	fp, [r5], #4
 8007964:	eba5 050a 	sub.w	r5, r5, sl
 8007968:	10ad      	asrs	r5, r5, #2
 800796a:	6125      	str	r5, [r4, #16]
 800796c:	4658      	mov	r0, fp
 800796e:	f7fe fa2b 	bl	8005dc8 <__hi0bits>
 8007972:	016d      	lsls	r5, r5, #5
 8007974:	f8d8 6000 	ldr.w	r6, [r8]
 8007978:	1a2d      	subs	r5, r5, r0
 800797a:	42b5      	cmp	r5, r6
 800797c:	dd54      	ble.n	8007a28 <__gethex+0x228>
 800797e:	1bad      	subs	r5, r5, r6
 8007980:	4629      	mov	r1, r5
 8007982:	4620      	mov	r0, r4
 8007984:	f7fe fdb3 	bl	80064ee <__any_on>
 8007988:	4681      	mov	r9, r0
 800798a:	b178      	cbz	r0, 80079ac <__gethex+0x1ac>
 800798c:	f04f 0901 	mov.w	r9, #1
 8007990:	1e6b      	subs	r3, r5, #1
 8007992:	1159      	asrs	r1, r3, #5
 8007994:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007998:	f003 021f 	and.w	r2, r3, #31
 800799c:	fa09 f202 	lsl.w	r2, r9, r2
 80079a0:	420a      	tst	r2, r1
 80079a2:	d003      	beq.n	80079ac <__gethex+0x1ac>
 80079a4:	454b      	cmp	r3, r9
 80079a6:	dc36      	bgt.n	8007a16 <__gethex+0x216>
 80079a8:	f04f 0902 	mov.w	r9, #2
 80079ac:	4629      	mov	r1, r5
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7ff febe 	bl	8007730 <rshift>
 80079b4:	442f      	add	r7, r5
 80079b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ba:	42bb      	cmp	r3, r7
 80079bc:	da42      	bge.n	8007a44 <__gethex+0x244>
 80079be:	4621      	mov	r1, r4
 80079c0:	9801      	ldr	r0, [sp, #4]
 80079c2:	f7fe f94f 	bl	8005c64 <_Bfree>
 80079c6:	2300      	movs	r3, #0
 80079c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079ca:	25a3      	movs	r5, #163	@ 0xa3
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	e793      	b.n	80078f8 <__gethex+0xf8>
 80079d0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80079d4:	2a2e      	cmp	r2, #46	@ 0x2e
 80079d6:	d012      	beq.n	80079fe <__gethex+0x1fe>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d104      	bne.n	80079e6 <__gethex+0x1e6>
 80079dc:	f845 bb04 	str.w	fp, [r5], #4
 80079e0:	f04f 0b00 	mov.w	fp, #0
 80079e4:	465b      	mov	r3, fp
 80079e6:	7830      	ldrb	r0, [r6, #0]
 80079e8:	9303      	str	r3, [sp, #12]
 80079ea:	f7ff fef4 	bl	80077d6 <__hexdig_fun>
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	f000 000f 	and.w	r0, r0, #15
 80079f4:	4098      	lsls	r0, r3
 80079f6:	ea4b 0b00 	orr.w	fp, fp, r0
 80079fa:	3304      	adds	r3, #4
 80079fc:	e7ae      	b.n	800795c <__gethex+0x15c>
 80079fe:	45b1      	cmp	r9, r6
 8007a00:	d8ea      	bhi.n	80079d8 <__gethex+0x1d8>
 8007a02:	2201      	movs	r2, #1
 8007a04:	4630      	mov	r0, r6
 8007a06:	492a      	ldr	r1, [pc, #168]	@ (8007ab0 <__gethex+0x2b0>)
 8007a08:	9303      	str	r3, [sp, #12]
 8007a0a:	f7ff fe29 	bl	8007660 <strncmp>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d1e1      	bne.n	80079d8 <__gethex+0x1d8>
 8007a14:	e7a2      	b.n	800795c <__gethex+0x15c>
 8007a16:	4620      	mov	r0, r4
 8007a18:	1ea9      	subs	r1, r5, #2
 8007a1a:	f7fe fd68 	bl	80064ee <__any_on>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d0c2      	beq.n	80079a8 <__gethex+0x1a8>
 8007a22:	f04f 0903 	mov.w	r9, #3
 8007a26:	e7c1      	b.n	80079ac <__gethex+0x1ac>
 8007a28:	da09      	bge.n	8007a3e <__gethex+0x23e>
 8007a2a:	1b75      	subs	r5, r6, r5
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	462a      	mov	r2, r5
 8007a30:	9801      	ldr	r0, [sp, #4]
 8007a32:	f7fe fb2d 	bl	8006090 <__lshift>
 8007a36:	4604      	mov	r4, r0
 8007a38:	1b7f      	subs	r7, r7, r5
 8007a3a:	f100 0a14 	add.w	sl, r0, #20
 8007a3e:	f04f 0900 	mov.w	r9, #0
 8007a42:	e7b8      	b.n	80079b6 <__gethex+0x1b6>
 8007a44:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a48:	42bd      	cmp	r5, r7
 8007a4a:	dd6f      	ble.n	8007b2c <__gethex+0x32c>
 8007a4c:	1bed      	subs	r5, r5, r7
 8007a4e:	42ae      	cmp	r6, r5
 8007a50:	dc34      	bgt.n	8007abc <__gethex+0x2bc>
 8007a52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d022      	beq.n	8007aa0 <__gethex+0x2a0>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d024      	beq.n	8007aa8 <__gethex+0x2a8>
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d115      	bne.n	8007a8e <__gethex+0x28e>
 8007a62:	42ae      	cmp	r6, r5
 8007a64:	d113      	bne.n	8007a8e <__gethex+0x28e>
 8007a66:	2e01      	cmp	r6, #1
 8007a68:	d10b      	bne.n	8007a82 <__gethex+0x282>
 8007a6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a6e:	9a02      	ldr	r2, [sp, #8]
 8007a70:	2562      	movs	r5, #98	@ 0x62
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	2301      	movs	r3, #1
 8007a76:	6123      	str	r3, [r4, #16]
 8007a78:	f8ca 3000 	str.w	r3, [sl]
 8007a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a7e:	601c      	str	r4, [r3, #0]
 8007a80:	e73a      	b.n	80078f8 <__gethex+0xf8>
 8007a82:	4620      	mov	r0, r4
 8007a84:	1e71      	subs	r1, r6, #1
 8007a86:	f7fe fd32 	bl	80064ee <__any_on>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d1ed      	bne.n	8007a6a <__gethex+0x26a>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	9801      	ldr	r0, [sp, #4]
 8007a92:	f7fe f8e7 	bl	8005c64 <_Bfree>
 8007a96:	2300      	movs	r3, #0
 8007a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a9a:	2550      	movs	r5, #80	@ 0x50
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	e72b      	b.n	80078f8 <__gethex+0xf8>
 8007aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f3      	bne.n	8007a8e <__gethex+0x28e>
 8007aa6:	e7e0      	b.n	8007a6a <__gethex+0x26a>
 8007aa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1dd      	bne.n	8007a6a <__gethex+0x26a>
 8007aae:	e7ee      	b.n	8007a8e <__gethex+0x28e>
 8007ab0:	08008898 	.word	0x08008898
 8007ab4:	0800872d 	.word	0x0800872d
 8007ab8:	08008a46 	.word	0x08008a46
 8007abc:	1e6f      	subs	r7, r5, #1
 8007abe:	f1b9 0f00 	cmp.w	r9, #0
 8007ac2:	d130      	bne.n	8007b26 <__gethex+0x326>
 8007ac4:	b127      	cbz	r7, 8007ad0 <__gethex+0x2d0>
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f7fe fd10 	bl	80064ee <__any_on>
 8007ace:	4681      	mov	r9, r0
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	1b76      	subs	r6, r6, r5
 8007ad6:	2502      	movs	r5, #2
 8007ad8:	117a      	asrs	r2, r7, #5
 8007ada:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ade:	f007 071f 	and.w	r7, r7, #31
 8007ae2:	40bb      	lsls	r3, r7
 8007ae4:	4213      	tst	r3, r2
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	bf18      	it	ne
 8007aea:	f049 0902 	orrne.w	r9, r9, #2
 8007aee:	f7ff fe1f 	bl	8007730 <rshift>
 8007af2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007af6:	f1b9 0f00 	cmp.w	r9, #0
 8007afa:	d047      	beq.n	8007b8c <__gethex+0x38c>
 8007afc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d015      	beq.n	8007b30 <__gethex+0x330>
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d017      	beq.n	8007b38 <__gethex+0x338>
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d109      	bne.n	8007b20 <__gethex+0x320>
 8007b0c:	f019 0f02 	tst.w	r9, #2
 8007b10:	d006      	beq.n	8007b20 <__gethex+0x320>
 8007b12:	f8da 3000 	ldr.w	r3, [sl]
 8007b16:	ea49 0903 	orr.w	r9, r9, r3
 8007b1a:	f019 0f01 	tst.w	r9, #1
 8007b1e:	d10e      	bne.n	8007b3e <__gethex+0x33e>
 8007b20:	f045 0510 	orr.w	r5, r5, #16
 8007b24:	e032      	b.n	8007b8c <__gethex+0x38c>
 8007b26:	f04f 0901 	mov.w	r9, #1
 8007b2a:	e7d1      	b.n	8007ad0 <__gethex+0x2d0>
 8007b2c:	2501      	movs	r5, #1
 8007b2e:	e7e2      	b.n	8007af6 <__gethex+0x2f6>
 8007b30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b32:	f1c3 0301 	rsb	r3, r3, #1
 8007b36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0f0      	beq.n	8007b20 <__gethex+0x320>
 8007b3e:	f04f 0c00 	mov.w	ip, #0
 8007b42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b46:	f104 0314 	add.w	r3, r4, #20
 8007b4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b58:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8007b5c:	d01b      	beq.n	8007b96 <__gethex+0x396>
 8007b5e:	3201      	adds	r2, #1
 8007b60:	6002      	str	r2, [r0, #0]
 8007b62:	2d02      	cmp	r5, #2
 8007b64:	f104 0314 	add.w	r3, r4, #20
 8007b68:	d13c      	bne.n	8007be4 <__gethex+0x3e4>
 8007b6a:	f8d8 2000 	ldr.w	r2, [r8]
 8007b6e:	3a01      	subs	r2, #1
 8007b70:	42b2      	cmp	r2, r6
 8007b72:	d109      	bne.n	8007b88 <__gethex+0x388>
 8007b74:	2201      	movs	r2, #1
 8007b76:	1171      	asrs	r1, r6, #5
 8007b78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b7c:	f006 061f 	and.w	r6, r6, #31
 8007b80:	fa02 f606 	lsl.w	r6, r2, r6
 8007b84:	421e      	tst	r6, r3
 8007b86:	d13a      	bne.n	8007bfe <__gethex+0x3fe>
 8007b88:	f045 0520 	orr.w	r5, r5, #32
 8007b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b8e:	601c      	str	r4, [r3, #0]
 8007b90:	9b02      	ldr	r3, [sp, #8]
 8007b92:	601f      	str	r7, [r3, #0]
 8007b94:	e6b0      	b.n	80078f8 <__gethex+0xf8>
 8007b96:	4299      	cmp	r1, r3
 8007b98:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b9c:	d8d9      	bhi.n	8007b52 <__gethex+0x352>
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	459b      	cmp	fp, r3
 8007ba2:	db17      	blt.n	8007bd4 <__gethex+0x3d4>
 8007ba4:	6861      	ldr	r1, [r4, #4]
 8007ba6:	9801      	ldr	r0, [sp, #4]
 8007ba8:	3101      	adds	r1, #1
 8007baa:	f7fe f81b 	bl	8005be4 <_Balloc>
 8007bae:	4681      	mov	r9, r0
 8007bb0:	b918      	cbnz	r0, 8007bba <__gethex+0x3ba>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	2184      	movs	r1, #132	@ 0x84
 8007bb6:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <__gethex+0x41c>)
 8007bb8:	e6c5      	b.n	8007946 <__gethex+0x146>
 8007bba:	6922      	ldr	r2, [r4, #16]
 8007bbc:	f104 010c 	add.w	r1, r4, #12
 8007bc0:	3202      	adds	r2, #2
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	300c      	adds	r0, #12
 8007bc6:	f7ff fd6d 	bl	80076a4 <memcpy>
 8007bca:	4621      	mov	r1, r4
 8007bcc:	9801      	ldr	r0, [sp, #4]
 8007bce:	f7fe f849 	bl	8005c64 <_Bfree>
 8007bd2:	464c      	mov	r4, r9
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	6122      	str	r2, [r4, #16]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007be0:	615a      	str	r2, [r3, #20]
 8007be2:	e7be      	b.n	8007b62 <__gethex+0x362>
 8007be4:	6922      	ldr	r2, [r4, #16]
 8007be6:	455a      	cmp	r2, fp
 8007be8:	dd0b      	ble.n	8007c02 <__gethex+0x402>
 8007bea:	2101      	movs	r1, #1
 8007bec:	4620      	mov	r0, r4
 8007bee:	f7ff fd9f 	bl	8007730 <rshift>
 8007bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bf6:	3701      	adds	r7, #1
 8007bf8:	42bb      	cmp	r3, r7
 8007bfa:	f6ff aee0 	blt.w	80079be <__gethex+0x1be>
 8007bfe:	2501      	movs	r5, #1
 8007c00:	e7c2      	b.n	8007b88 <__gethex+0x388>
 8007c02:	f016 061f 	ands.w	r6, r6, #31
 8007c06:	d0fa      	beq.n	8007bfe <__gethex+0x3fe>
 8007c08:	4453      	add	r3, sl
 8007c0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007c0e:	f7fe f8db 	bl	8005dc8 <__hi0bits>
 8007c12:	f1c6 0620 	rsb	r6, r6, #32
 8007c16:	42b0      	cmp	r0, r6
 8007c18:	dbe7      	blt.n	8007bea <__gethex+0x3ea>
 8007c1a:	e7f0      	b.n	8007bfe <__gethex+0x3fe>
 8007c1c:	0800872d 	.word	0x0800872d

08007c20 <L_shift>:
 8007c20:	f1c2 0208 	rsb	r2, r2, #8
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	b570      	push	{r4, r5, r6, lr}
 8007c28:	f1c2 0620 	rsb	r6, r2, #32
 8007c2c:	6843      	ldr	r3, [r0, #4]
 8007c2e:	6804      	ldr	r4, [r0, #0]
 8007c30:	fa03 f506 	lsl.w	r5, r3, r6
 8007c34:	432c      	orrs	r4, r5
 8007c36:	40d3      	lsrs	r3, r2
 8007c38:	6004      	str	r4, [r0, #0]
 8007c3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c3e:	4288      	cmp	r0, r1
 8007c40:	d3f4      	bcc.n	8007c2c <L_shift+0xc>
 8007c42:	bd70      	pop	{r4, r5, r6, pc}

08007c44 <__match>:
 8007c44:	b530      	push	{r4, r5, lr}
 8007c46:	6803      	ldr	r3, [r0, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c4e:	b914      	cbnz	r4, 8007c56 <__match+0x12>
 8007c50:	6003      	str	r3, [r0, #0]
 8007c52:	2001      	movs	r0, #1
 8007c54:	bd30      	pop	{r4, r5, pc}
 8007c56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c5e:	2d19      	cmp	r5, #25
 8007c60:	bf98      	it	ls
 8007c62:	3220      	addls	r2, #32
 8007c64:	42a2      	cmp	r2, r4
 8007c66:	d0f0      	beq.n	8007c4a <__match+0x6>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	e7f3      	b.n	8007c54 <__match+0x10>

08007c6c <__hexnan>:
 8007c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c70:	2500      	movs	r5, #0
 8007c72:	680b      	ldr	r3, [r1, #0]
 8007c74:	4682      	mov	sl, r0
 8007c76:	115e      	asrs	r6, r3, #5
 8007c78:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c7c:	f013 031f 	ands.w	r3, r3, #31
 8007c80:	bf18      	it	ne
 8007c82:	3604      	addne	r6, #4
 8007c84:	1f37      	subs	r7, r6, #4
 8007c86:	4690      	mov	r8, r2
 8007c88:	46b9      	mov	r9, r7
 8007c8a:	463c      	mov	r4, r7
 8007c8c:	46ab      	mov	fp, r5
 8007c8e:	b087      	sub	sp, #28
 8007c90:	6801      	ldr	r1, [r0, #0]
 8007c92:	9301      	str	r3, [sp, #4]
 8007c94:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c98:	9502      	str	r5, [sp, #8]
 8007c9a:	784a      	ldrb	r2, [r1, #1]
 8007c9c:	1c4b      	adds	r3, r1, #1
 8007c9e:	9303      	str	r3, [sp, #12]
 8007ca0:	b342      	cbz	r2, 8007cf4 <__hexnan+0x88>
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	9105      	str	r1, [sp, #20]
 8007ca6:	9204      	str	r2, [sp, #16]
 8007ca8:	f7ff fd95 	bl	80077d6 <__hexdig_fun>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d151      	bne.n	8007d54 <__hexnan+0xe8>
 8007cb0:	9a04      	ldr	r2, [sp, #16]
 8007cb2:	9905      	ldr	r1, [sp, #20]
 8007cb4:	2a20      	cmp	r2, #32
 8007cb6:	d818      	bhi.n	8007cea <__hexnan+0x7e>
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	459b      	cmp	fp, r3
 8007cbc:	dd13      	ble.n	8007ce6 <__hexnan+0x7a>
 8007cbe:	454c      	cmp	r4, r9
 8007cc0:	d206      	bcs.n	8007cd0 <__hexnan+0x64>
 8007cc2:	2d07      	cmp	r5, #7
 8007cc4:	dc04      	bgt.n	8007cd0 <__hexnan+0x64>
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4649      	mov	r1, r9
 8007cca:	4620      	mov	r0, r4
 8007ccc:	f7ff ffa8 	bl	8007c20 <L_shift>
 8007cd0:	4544      	cmp	r4, r8
 8007cd2:	d952      	bls.n	8007d7a <__hexnan+0x10e>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f1a4 0904 	sub.w	r9, r4, #4
 8007cda:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cde:	461d      	mov	r5, r3
 8007ce0:	464c      	mov	r4, r9
 8007ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8007ce6:	9903      	ldr	r1, [sp, #12]
 8007ce8:	e7d7      	b.n	8007c9a <__hexnan+0x2e>
 8007cea:	2a29      	cmp	r2, #41	@ 0x29
 8007cec:	d157      	bne.n	8007d9e <__hexnan+0x132>
 8007cee:	3102      	adds	r1, #2
 8007cf0:	f8ca 1000 	str.w	r1, [sl]
 8007cf4:	f1bb 0f00 	cmp.w	fp, #0
 8007cf8:	d051      	beq.n	8007d9e <__hexnan+0x132>
 8007cfa:	454c      	cmp	r4, r9
 8007cfc:	d206      	bcs.n	8007d0c <__hexnan+0xa0>
 8007cfe:	2d07      	cmp	r5, #7
 8007d00:	dc04      	bgt.n	8007d0c <__hexnan+0xa0>
 8007d02:	462a      	mov	r2, r5
 8007d04:	4649      	mov	r1, r9
 8007d06:	4620      	mov	r0, r4
 8007d08:	f7ff ff8a 	bl	8007c20 <L_shift>
 8007d0c:	4544      	cmp	r4, r8
 8007d0e:	d936      	bls.n	8007d7e <__hexnan+0x112>
 8007d10:	4623      	mov	r3, r4
 8007d12:	f1a8 0204 	sub.w	r2, r8, #4
 8007d16:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d1a:	429f      	cmp	r7, r3
 8007d1c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d20:	d2f9      	bcs.n	8007d16 <__hexnan+0xaa>
 8007d22:	1b3b      	subs	r3, r7, r4
 8007d24:	f023 0303 	bic.w	r3, r3, #3
 8007d28:	3304      	adds	r3, #4
 8007d2a:	3401      	adds	r4, #1
 8007d2c:	3e03      	subs	r6, #3
 8007d2e:	42b4      	cmp	r4, r6
 8007d30:	bf88      	it	hi
 8007d32:	2304      	movhi	r3, #4
 8007d34:	2200      	movs	r2, #0
 8007d36:	4443      	add	r3, r8
 8007d38:	f843 2b04 	str.w	r2, [r3], #4
 8007d3c:	429f      	cmp	r7, r3
 8007d3e:	d2fb      	bcs.n	8007d38 <__hexnan+0xcc>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	b91b      	cbnz	r3, 8007d4c <__hexnan+0xe0>
 8007d44:	4547      	cmp	r7, r8
 8007d46:	d128      	bne.n	8007d9a <__hexnan+0x12e>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	2005      	movs	r0, #5
 8007d4e:	b007      	add	sp, #28
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	3501      	adds	r5, #1
 8007d56:	2d08      	cmp	r5, #8
 8007d58:	f10b 0b01 	add.w	fp, fp, #1
 8007d5c:	dd06      	ble.n	8007d6c <__hexnan+0x100>
 8007d5e:	4544      	cmp	r4, r8
 8007d60:	d9c1      	bls.n	8007ce6 <__hexnan+0x7a>
 8007d62:	2300      	movs	r3, #0
 8007d64:	2501      	movs	r5, #1
 8007d66:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d6a:	3c04      	subs	r4, #4
 8007d6c:	6822      	ldr	r2, [r4, #0]
 8007d6e:	f000 000f 	and.w	r0, r0, #15
 8007d72:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d76:	6020      	str	r0, [r4, #0]
 8007d78:	e7b5      	b.n	8007ce6 <__hexnan+0x7a>
 8007d7a:	2508      	movs	r5, #8
 8007d7c:	e7b3      	b.n	8007ce6 <__hexnan+0x7a>
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0dd      	beq.n	8007d40 <__hexnan+0xd4>
 8007d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d88:	f1c3 0320 	rsb	r3, r3, #32
 8007d8c:	40da      	lsrs	r2, r3
 8007d8e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d92:	4013      	ands	r3, r2
 8007d94:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d98:	e7d2      	b.n	8007d40 <__hexnan+0xd4>
 8007d9a:	3f04      	subs	r7, #4
 8007d9c:	e7d0      	b.n	8007d40 <__hexnan+0xd4>
 8007d9e:	2004      	movs	r0, #4
 8007da0:	e7d5      	b.n	8007d4e <__hexnan+0xe2>

08007da2 <__ascii_mbtowc>:
 8007da2:	b082      	sub	sp, #8
 8007da4:	b901      	cbnz	r1, 8007da8 <__ascii_mbtowc+0x6>
 8007da6:	a901      	add	r1, sp, #4
 8007da8:	b142      	cbz	r2, 8007dbc <__ascii_mbtowc+0x1a>
 8007daa:	b14b      	cbz	r3, 8007dc0 <__ascii_mbtowc+0x1e>
 8007dac:	7813      	ldrb	r3, [r2, #0]
 8007dae:	600b      	str	r3, [r1, #0]
 8007db0:	7812      	ldrb	r2, [r2, #0]
 8007db2:	1e10      	subs	r0, r2, #0
 8007db4:	bf18      	it	ne
 8007db6:	2001      	movne	r0, #1
 8007db8:	b002      	add	sp, #8
 8007dba:	4770      	bx	lr
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	e7fb      	b.n	8007db8 <__ascii_mbtowc+0x16>
 8007dc0:	f06f 0001 	mvn.w	r0, #1
 8007dc4:	e7f8      	b.n	8007db8 <__ascii_mbtowc+0x16>

08007dc6 <_realloc_r>:
 8007dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dca:	4680      	mov	r8, r0
 8007dcc:	4615      	mov	r5, r2
 8007dce:	460c      	mov	r4, r1
 8007dd0:	b921      	cbnz	r1, 8007ddc <_realloc_r+0x16>
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dd8:	f7fd be78 	b.w	8005acc <_malloc_r>
 8007ddc:	b92a      	cbnz	r2, 8007dea <_realloc_r+0x24>
 8007dde:	f7fd fe03 	bl	80059e8 <_free_r>
 8007de2:	2400      	movs	r4, #0
 8007de4:	4620      	mov	r0, r4
 8007de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dea:	f000 f840 	bl	8007e6e <_malloc_usable_size_r>
 8007dee:	4285      	cmp	r5, r0
 8007df0:	4606      	mov	r6, r0
 8007df2:	d802      	bhi.n	8007dfa <_realloc_r+0x34>
 8007df4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007df8:	d8f4      	bhi.n	8007de4 <_realloc_r+0x1e>
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	f7fd fe65 	bl	8005acc <_malloc_r>
 8007e02:	4607      	mov	r7, r0
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d0ec      	beq.n	8007de2 <_realloc_r+0x1c>
 8007e08:	42b5      	cmp	r5, r6
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	bf28      	it	cs
 8007e10:	4632      	movcs	r2, r6
 8007e12:	f7ff fc47 	bl	80076a4 <memcpy>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4640      	mov	r0, r8
 8007e1a:	f7fd fde5 	bl	80059e8 <_free_r>
 8007e1e:	463c      	mov	r4, r7
 8007e20:	e7e0      	b.n	8007de4 <_realloc_r+0x1e>

08007e22 <__ascii_wctomb>:
 8007e22:	4603      	mov	r3, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	b141      	cbz	r1, 8007e3a <__ascii_wctomb+0x18>
 8007e28:	2aff      	cmp	r2, #255	@ 0xff
 8007e2a:	d904      	bls.n	8007e36 <__ascii_wctomb+0x14>
 8007e2c:	228a      	movs	r2, #138	@ 0x8a
 8007e2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	4770      	bx	lr
 8007e36:	2001      	movs	r0, #1
 8007e38:	700a      	strb	r2, [r1, #0]
 8007e3a:	4770      	bx	lr

08007e3c <fiprintf>:
 8007e3c:	b40e      	push	{r1, r2, r3}
 8007e3e:	b503      	push	{r0, r1, lr}
 8007e40:	4601      	mov	r1, r0
 8007e42:	ab03      	add	r3, sp, #12
 8007e44:	4805      	ldr	r0, [pc, #20]	@ (8007e5c <fiprintf+0x20>)
 8007e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	f000 f83d 	bl	8007ecc <_vfiprintf_r>
 8007e52:	b002      	add	sp, #8
 8007e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e58:	b003      	add	sp, #12
 8007e5a:	4770      	bx	lr
 8007e5c:	2000002c 	.word	0x2000002c

08007e60 <abort>:
 8007e60:	2006      	movs	r0, #6
 8007e62:	b508      	push	{r3, lr}
 8007e64:	f000 fa06 	bl	8008274 <raise>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7f9 fe60 	bl	8001b2e <_exit>

08007e6e <_malloc_usable_size_r>:
 8007e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e72:	1f18      	subs	r0, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbc      	itt	lt
 8007e78:	580b      	ldrlt	r3, [r1, r0]
 8007e7a:	18c0      	addlt	r0, r0, r3
 8007e7c:	4770      	bx	lr

08007e7e <__sfputc_r>:
 8007e7e:	6893      	ldr	r3, [r2, #8]
 8007e80:	b410      	push	{r4}
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	6093      	str	r3, [r2, #8]
 8007e88:	da07      	bge.n	8007e9a <__sfputc_r+0x1c>
 8007e8a:	6994      	ldr	r4, [r2, #24]
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	db01      	blt.n	8007e94 <__sfputc_r+0x16>
 8007e90:	290a      	cmp	r1, #10
 8007e92:	d102      	bne.n	8007e9a <__sfputc_r+0x1c>
 8007e94:	bc10      	pop	{r4}
 8007e96:	f000 b931 	b.w	80080fc <__swbuf_r>
 8007e9a:	6813      	ldr	r3, [r2, #0]
 8007e9c:	1c58      	adds	r0, r3, #1
 8007e9e:	6010      	str	r0, [r2, #0]
 8007ea0:	7019      	strb	r1, [r3, #0]
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	bc10      	pop	{r4}
 8007ea6:	4770      	bx	lr

08007ea8 <__sfputs_r>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	4614      	mov	r4, r2
 8007eb0:	18d5      	adds	r5, r2, r3
 8007eb2:	42ac      	cmp	r4, r5
 8007eb4:	d101      	bne.n	8007eba <__sfputs_r+0x12>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e007      	b.n	8007eca <__sfputs_r+0x22>
 8007eba:	463a      	mov	r2, r7
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec2:	f7ff ffdc 	bl	8007e7e <__sfputc_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	d1f3      	bne.n	8007eb2 <__sfputs_r+0xa>
 8007eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ecc <_vfiprintf_r>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	4614      	mov	r4, r2
 8007ed4:	4698      	mov	r8, r3
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	b09d      	sub	sp, #116	@ 0x74
 8007eda:	b118      	cbz	r0, 8007ee4 <_vfiprintf_r+0x18>
 8007edc:	6a03      	ldr	r3, [r0, #32]
 8007ede:	b90b      	cbnz	r3, 8007ee4 <_vfiprintf_r+0x18>
 8007ee0:	f7fc fe06 	bl	8004af0 <__sinit>
 8007ee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ee6:	07d9      	lsls	r1, r3, #31
 8007ee8:	d405      	bmi.n	8007ef6 <_vfiprintf_r+0x2a>
 8007eea:	89ab      	ldrh	r3, [r5, #12]
 8007eec:	059a      	lsls	r2, r3, #22
 8007eee:	d402      	bmi.n	8007ef6 <_vfiprintf_r+0x2a>
 8007ef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ef2:	f7fc ff14 	bl	8004d1e <__retarget_lock_acquire_recursive>
 8007ef6:	89ab      	ldrh	r3, [r5, #12]
 8007ef8:	071b      	lsls	r3, r3, #28
 8007efa:	d501      	bpl.n	8007f00 <_vfiprintf_r+0x34>
 8007efc:	692b      	ldr	r3, [r5, #16]
 8007efe:	b99b      	cbnz	r3, 8007f28 <_vfiprintf_r+0x5c>
 8007f00:	4629      	mov	r1, r5
 8007f02:	4630      	mov	r0, r6
 8007f04:	f000 f938 	bl	8008178 <__swsetup_r>
 8007f08:	b170      	cbz	r0, 8007f28 <_vfiprintf_r+0x5c>
 8007f0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f0c:	07dc      	lsls	r4, r3, #31
 8007f0e:	d504      	bpl.n	8007f1a <_vfiprintf_r+0x4e>
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f14:	b01d      	add	sp, #116	@ 0x74
 8007f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1a:	89ab      	ldrh	r3, [r5, #12]
 8007f1c:	0598      	lsls	r0, r3, #22
 8007f1e:	d4f7      	bmi.n	8007f10 <_vfiprintf_r+0x44>
 8007f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f22:	f7fc fefd 	bl	8004d20 <__retarget_lock_release_recursive>
 8007f26:	e7f3      	b.n	8007f10 <_vfiprintf_r+0x44>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f32:	2330      	movs	r3, #48	@ 0x30
 8007f34:	f04f 0901 	mov.w	r9, #1
 8007f38:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80080e8 <_vfiprintf_r+0x21c>
 8007f40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f44:	4623      	mov	r3, r4
 8007f46:	469a      	mov	sl, r3
 8007f48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f4c:	b10a      	cbz	r2, 8007f52 <_vfiprintf_r+0x86>
 8007f4e:	2a25      	cmp	r2, #37	@ 0x25
 8007f50:	d1f9      	bne.n	8007f46 <_vfiprintf_r+0x7a>
 8007f52:	ebba 0b04 	subs.w	fp, sl, r4
 8007f56:	d00b      	beq.n	8007f70 <_vfiprintf_r+0xa4>
 8007f58:	465b      	mov	r3, fp
 8007f5a:	4622      	mov	r2, r4
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4630      	mov	r0, r6
 8007f60:	f7ff ffa2 	bl	8007ea8 <__sfputs_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	f000 80a7 	beq.w	80080b8 <_vfiprintf_r+0x1ec>
 8007f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f6c:	445a      	add	r2, fp
 8007f6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f70:	f89a 3000 	ldrb.w	r3, [sl]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 809f 	beq.w	80080b8 <_vfiprintf_r+0x1ec>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f84:	f10a 0a01 	add.w	sl, sl, #1
 8007f88:	9304      	str	r3, [sp, #16]
 8007f8a:	9307      	str	r3, [sp, #28]
 8007f8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f90:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f92:	4654      	mov	r4, sl
 8007f94:	2205      	movs	r2, #5
 8007f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9a:	4853      	ldr	r0, [pc, #332]	@ (80080e8 <_vfiprintf_r+0x21c>)
 8007f9c:	f7fc fec1 	bl	8004d22 <memchr>
 8007fa0:	9a04      	ldr	r2, [sp, #16]
 8007fa2:	b9d8      	cbnz	r0, 8007fdc <_vfiprintf_r+0x110>
 8007fa4:	06d1      	lsls	r1, r2, #27
 8007fa6:	bf44      	itt	mi
 8007fa8:	2320      	movmi	r3, #32
 8007faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fae:	0713      	lsls	r3, r2, #28
 8007fb0:	bf44      	itt	mi
 8007fb2:	232b      	movmi	r3, #43	@ 0x2b
 8007fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fbe:	d015      	beq.n	8007fec <_vfiprintf_r+0x120>
 8007fc0:	4654      	mov	r4, sl
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f04f 0c0a 	mov.w	ip, #10
 8007fc8:	9a07      	ldr	r2, [sp, #28]
 8007fca:	4621      	mov	r1, r4
 8007fcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd0:	3b30      	subs	r3, #48	@ 0x30
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	d94b      	bls.n	800806e <_vfiprintf_r+0x1a2>
 8007fd6:	b1b0      	cbz	r0, 8008006 <_vfiprintf_r+0x13a>
 8007fd8:	9207      	str	r2, [sp, #28]
 8007fda:	e014      	b.n	8008006 <_vfiprintf_r+0x13a>
 8007fdc:	eba0 0308 	sub.w	r3, r0, r8
 8007fe0:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	46a2      	mov	sl, r4
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	e7d2      	b.n	8007f92 <_vfiprintf_r+0xc6>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1d19      	adds	r1, r3, #4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	9103      	str	r1, [sp, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bfbb      	ittet	lt
 8007ff8:	425b      	neglt	r3, r3
 8007ffa:	f042 0202 	orrlt.w	r2, r2, #2
 8007ffe:	9307      	strge	r3, [sp, #28]
 8008000:	9307      	strlt	r3, [sp, #28]
 8008002:	bfb8      	it	lt
 8008004:	9204      	strlt	r2, [sp, #16]
 8008006:	7823      	ldrb	r3, [r4, #0]
 8008008:	2b2e      	cmp	r3, #46	@ 0x2e
 800800a:	d10a      	bne.n	8008022 <_vfiprintf_r+0x156>
 800800c:	7863      	ldrb	r3, [r4, #1]
 800800e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008010:	d132      	bne.n	8008078 <_vfiprintf_r+0x1ac>
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	3402      	adds	r4, #2
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	9203      	str	r2, [sp, #12]
 800801c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008020:	9305      	str	r3, [sp, #20]
 8008022:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80080ec <_vfiprintf_r+0x220>
 8008026:	2203      	movs	r2, #3
 8008028:	4650      	mov	r0, sl
 800802a:	7821      	ldrb	r1, [r4, #0]
 800802c:	f7fc fe79 	bl	8004d22 <memchr>
 8008030:	b138      	cbz	r0, 8008042 <_vfiprintf_r+0x176>
 8008032:	2240      	movs	r2, #64	@ 0x40
 8008034:	9b04      	ldr	r3, [sp, #16]
 8008036:	eba0 000a 	sub.w	r0, r0, sl
 800803a:	4082      	lsls	r2, r0
 800803c:	4313      	orrs	r3, r2
 800803e:	3401      	adds	r4, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008046:	2206      	movs	r2, #6
 8008048:	4829      	ldr	r0, [pc, #164]	@ (80080f0 <_vfiprintf_r+0x224>)
 800804a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800804e:	f7fc fe68 	bl	8004d22 <memchr>
 8008052:	2800      	cmp	r0, #0
 8008054:	d03f      	beq.n	80080d6 <_vfiprintf_r+0x20a>
 8008056:	4b27      	ldr	r3, [pc, #156]	@ (80080f4 <_vfiprintf_r+0x228>)
 8008058:	bb1b      	cbnz	r3, 80080a2 <_vfiprintf_r+0x1d6>
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	3307      	adds	r3, #7
 800805e:	f023 0307 	bic.w	r3, r3, #7
 8008062:	3308      	adds	r3, #8
 8008064:	9303      	str	r3, [sp, #12]
 8008066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008068:	443b      	add	r3, r7
 800806a:	9309      	str	r3, [sp, #36]	@ 0x24
 800806c:	e76a      	b.n	8007f44 <_vfiprintf_r+0x78>
 800806e:	460c      	mov	r4, r1
 8008070:	2001      	movs	r0, #1
 8008072:	fb0c 3202 	mla	r2, ip, r2, r3
 8008076:	e7a8      	b.n	8007fca <_vfiprintf_r+0xfe>
 8008078:	2300      	movs	r3, #0
 800807a:	f04f 0c0a 	mov.w	ip, #10
 800807e:	4619      	mov	r1, r3
 8008080:	3401      	adds	r4, #1
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	4620      	mov	r0, r4
 8008086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808a:	3a30      	subs	r2, #48	@ 0x30
 800808c:	2a09      	cmp	r2, #9
 800808e:	d903      	bls.n	8008098 <_vfiprintf_r+0x1cc>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0c6      	beq.n	8008022 <_vfiprintf_r+0x156>
 8008094:	9105      	str	r1, [sp, #20]
 8008096:	e7c4      	b.n	8008022 <_vfiprintf_r+0x156>
 8008098:	4604      	mov	r4, r0
 800809a:	2301      	movs	r3, #1
 800809c:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a0:	e7f0      	b.n	8008084 <_vfiprintf_r+0x1b8>
 80080a2:	ab03      	add	r3, sp, #12
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	462a      	mov	r2, r5
 80080a8:	4630      	mov	r0, r6
 80080aa:	4b13      	ldr	r3, [pc, #76]	@ (80080f8 <_vfiprintf_r+0x22c>)
 80080ac:	a904      	add	r1, sp, #16
 80080ae:	f7fb fec5 	bl	8003e3c <_printf_float>
 80080b2:	4607      	mov	r7, r0
 80080b4:	1c78      	adds	r0, r7, #1
 80080b6:	d1d6      	bne.n	8008066 <_vfiprintf_r+0x19a>
 80080b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080ba:	07d9      	lsls	r1, r3, #31
 80080bc:	d405      	bmi.n	80080ca <_vfiprintf_r+0x1fe>
 80080be:	89ab      	ldrh	r3, [r5, #12]
 80080c0:	059a      	lsls	r2, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_vfiprintf_r+0x1fe>
 80080c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080c6:	f7fc fe2b 	bl	8004d20 <__retarget_lock_release_recursive>
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	065b      	lsls	r3, r3, #25
 80080ce:	f53f af1f 	bmi.w	8007f10 <_vfiprintf_r+0x44>
 80080d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080d4:	e71e      	b.n	8007f14 <_vfiprintf_r+0x48>
 80080d6:	ab03      	add	r3, sp, #12
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	462a      	mov	r2, r5
 80080dc:	4630      	mov	r0, r6
 80080de:	4b06      	ldr	r3, [pc, #24]	@ (80080f8 <_vfiprintf_r+0x22c>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	f7fc f949 	bl	8004378 <_printf_i>
 80080e6:	e7e4      	b.n	80080b2 <_vfiprintf_r+0x1e6>
 80080e8:	080089f1 	.word	0x080089f1
 80080ec:	080089f7 	.word	0x080089f7
 80080f0:	080089fb 	.word	0x080089fb
 80080f4:	08003e3d 	.word	0x08003e3d
 80080f8:	08007ea9 	.word	0x08007ea9

080080fc <__swbuf_r>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	460e      	mov	r6, r1
 8008100:	4614      	mov	r4, r2
 8008102:	4605      	mov	r5, r0
 8008104:	b118      	cbz	r0, 800810e <__swbuf_r+0x12>
 8008106:	6a03      	ldr	r3, [r0, #32]
 8008108:	b90b      	cbnz	r3, 800810e <__swbuf_r+0x12>
 800810a:	f7fc fcf1 	bl	8004af0 <__sinit>
 800810e:	69a3      	ldr	r3, [r4, #24]
 8008110:	60a3      	str	r3, [r4, #8]
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	071a      	lsls	r2, r3, #28
 8008116:	d501      	bpl.n	800811c <__swbuf_r+0x20>
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	b943      	cbnz	r3, 800812e <__swbuf_r+0x32>
 800811c:	4621      	mov	r1, r4
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f82a 	bl	8008178 <__swsetup_r>
 8008124:	b118      	cbz	r0, 800812e <__swbuf_r+0x32>
 8008126:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800812a:	4638      	mov	r0, r7
 800812c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	6922      	ldr	r2, [r4, #16]
 8008132:	b2f6      	uxtb	r6, r6
 8008134:	1a98      	subs	r0, r3, r2
 8008136:	6963      	ldr	r3, [r4, #20]
 8008138:	4637      	mov	r7, r6
 800813a:	4283      	cmp	r3, r0
 800813c:	dc05      	bgt.n	800814a <__swbuf_r+0x4e>
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	f7ff fa4b 	bl	80075dc <_fflush_r>
 8008146:	2800      	cmp	r0, #0
 8008148:	d1ed      	bne.n	8008126 <__swbuf_r+0x2a>
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	3b01      	subs	r3, #1
 800814e:	60a3      	str	r3, [r4, #8]
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	6022      	str	r2, [r4, #0]
 8008156:	701e      	strb	r6, [r3, #0]
 8008158:	6962      	ldr	r2, [r4, #20]
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	429a      	cmp	r2, r3
 800815e:	d004      	beq.n	800816a <__swbuf_r+0x6e>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	07db      	lsls	r3, r3, #31
 8008164:	d5e1      	bpl.n	800812a <__swbuf_r+0x2e>
 8008166:	2e0a      	cmp	r6, #10
 8008168:	d1df      	bne.n	800812a <__swbuf_r+0x2e>
 800816a:	4621      	mov	r1, r4
 800816c:	4628      	mov	r0, r5
 800816e:	f7ff fa35 	bl	80075dc <_fflush_r>
 8008172:	2800      	cmp	r0, #0
 8008174:	d0d9      	beq.n	800812a <__swbuf_r+0x2e>
 8008176:	e7d6      	b.n	8008126 <__swbuf_r+0x2a>

08008178 <__swsetup_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4b29      	ldr	r3, [pc, #164]	@ (8008220 <__swsetup_r+0xa8>)
 800817c:	4605      	mov	r5, r0
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	460c      	mov	r4, r1
 8008182:	b118      	cbz	r0, 800818c <__swsetup_r+0x14>
 8008184:	6a03      	ldr	r3, [r0, #32]
 8008186:	b90b      	cbnz	r3, 800818c <__swsetup_r+0x14>
 8008188:	f7fc fcb2 	bl	8004af0 <__sinit>
 800818c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008190:	0719      	lsls	r1, r3, #28
 8008192:	d422      	bmi.n	80081da <__swsetup_r+0x62>
 8008194:	06da      	lsls	r2, r3, #27
 8008196:	d407      	bmi.n	80081a8 <__swsetup_r+0x30>
 8008198:	2209      	movs	r2, #9
 800819a:	602a      	str	r2, [r5, #0]
 800819c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a4:	81a3      	strh	r3, [r4, #12]
 80081a6:	e033      	b.n	8008210 <__swsetup_r+0x98>
 80081a8:	0758      	lsls	r0, r3, #29
 80081aa:	d512      	bpl.n	80081d2 <__swsetup_r+0x5a>
 80081ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081ae:	b141      	cbz	r1, 80081c2 <__swsetup_r+0x4a>
 80081b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081b4:	4299      	cmp	r1, r3
 80081b6:	d002      	beq.n	80081be <__swsetup_r+0x46>
 80081b8:	4628      	mov	r0, r5
 80081ba:	f7fd fc15 	bl	80059e8 <_free_r>
 80081be:	2300      	movs	r3, #0
 80081c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	2300      	movs	r3, #0
 80081cc:	6063      	str	r3, [r4, #4]
 80081ce:	6923      	ldr	r3, [r4, #16]
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	f043 0308 	orr.w	r3, r3, #8
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	b94b      	cbnz	r3, 80081f2 <__swsetup_r+0x7a>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081e8:	d003      	beq.n	80081f2 <__swsetup_r+0x7a>
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 f882 	bl	80082f6 <__smakebuf_r>
 80081f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f6:	f013 0201 	ands.w	r2, r3, #1
 80081fa:	d00a      	beq.n	8008212 <__swsetup_r+0x9a>
 80081fc:	2200      	movs	r2, #0
 80081fe:	60a2      	str	r2, [r4, #8]
 8008200:	6962      	ldr	r2, [r4, #20]
 8008202:	4252      	negs	r2, r2
 8008204:	61a2      	str	r2, [r4, #24]
 8008206:	6922      	ldr	r2, [r4, #16]
 8008208:	b942      	cbnz	r2, 800821c <__swsetup_r+0xa4>
 800820a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800820e:	d1c5      	bne.n	800819c <__swsetup_r+0x24>
 8008210:	bd38      	pop	{r3, r4, r5, pc}
 8008212:	0799      	lsls	r1, r3, #30
 8008214:	bf58      	it	pl
 8008216:	6962      	ldrpl	r2, [r4, #20]
 8008218:	60a2      	str	r2, [r4, #8]
 800821a:	e7f4      	b.n	8008206 <__swsetup_r+0x8e>
 800821c:	2000      	movs	r0, #0
 800821e:	e7f7      	b.n	8008210 <__swsetup_r+0x98>
 8008220:	2000002c 	.word	0x2000002c

08008224 <_raise_r>:
 8008224:	291f      	cmp	r1, #31
 8008226:	b538      	push	{r3, r4, r5, lr}
 8008228:	4605      	mov	r5, r0
 800822a:	460c      	mov	r4, r1
 800822c:	d904      	bls.n	8008238 <_raise_r+0x14>
 800822e:	2316      	movs	r3, #22
 8008230:	6003      	str	r3, [r0, #0]
 8008232:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008236:	bd38      	pop	{r3, r4, r5, pc}
 8008238:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800823a:	b112      	cbz	r2, 8008242 <_raise_r+0x1e>
 800823c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008240:	b94b      	cbnz	r3, 8008256 <_raise_r+0x32>
 8008242:	4628      	mov	r0, r5
 8008244:	f000 f830 	bl	80082a8 <_getpid_r>
 8008248:	4622      	mov	r2, r4
 800824a:	4601      	mov	r1, r0
 800824c:	4628      	mov	r0, r5
 800824e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008252:	f000 b817 	b.w	8008284 <_kill_r>
 8008256:	2b01      	cmp	r3, #1
 8008258:	d00a      	beq.n	8008270 <_raise_r+0x4c>
 800825a:	1c59      	adds	r1, r3, #1
 800825c:	d103      	bne.n	8008266 <_raise_r+0x42>
 800825e:	2316      	movs	r3, #22
 8008260:	6003      	str	r3, [r0, #0]
 8008262:	2001      	movs	r0, #1
 8008264:	e7e7      	b.n	8008236 <_raise_r+0x12>
 8008266:	2100      	movs	r1, #0
 8008268:	4620      	mov	r0, r4
 800826a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800826e:	4798      	blx	r3
 8008270:	2000      	movs	r0, #0
 8008272:	e7e0      	b.n	8008236 <_raise_r+0x12>

08008274 <raise>:
 8008274:	4b02      	ldr	r3, [pc, #8]	@ (8008280 <raise+0xc>)
 8008276:	4601      	mov	r1, r0
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	f7ff bfd3 	b.w	8008224 <_raise_r>
 800827e:	bf00      	nop
 8008280:	2000002c 	.word	0x2000002c

08008284 <_kill_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	2300      	movs	r3, #0
 8008288:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_kill_r+0x20>)
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	4611      	mov	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7f9 fc3c 	bl	8001b0e <_kill>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d102      	bne.n	80082a0 <_kill_r+0x1c>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	b103      	cbz	r3, 80082a0 <_kill_r+0x1c>
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd38      	pop	{r3, r4, r5, pc}
 80082a2:	bf00      	nop
 80082a4:	20000348 	.word	0x20000348

080082a8 <_getpid_r>:
 80082a8:	f7f9 bc2a 	b.w	8001b00 <_getpid>

080082ac <__swhatbuf_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	460c      	mov	r4, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	4615      	mov	r5, r2
 80082b6:	2900      	cmp	r1, #0
 80082b8:	461e      	mov	r6, r3
 80082ba:	b096      	sub	sp, #88	@ 0x58
 80082bc:	da0c      	bge.n	80082d8 <__swhatbuf_r+0x2c>
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	2100      	movs	r1, #0
 80082c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082c6:	bf14      	ite	ne
 80082c8:	2340      	movne	r3, #64	@ 0x40
 80082ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082ce:	2000      	movs	r0, #0
 80082d0:	6031      	str	r1, [r6, #0]
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	b016      	add	sp, #88	@ 0x58
 80082d6:	bd70      	pop	{r4, r5, r6, pc}
 80082d8:	466a      	mov	r2, sp
 80082da:	f000 f849 	bl	8008370 <_fstat_r>
 80082de:	2800      	cmp	r0, #0
 80082e0:	dbed      	blt.n	80082be <__swhatbuf_r+0x12>
 80082e2:	9901      	ldr	r1, [sp, #4]
 80082e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082ec:	4259      	negs	r1, r3
 80082ee:	4159      	adcs	r1, r3
 80082f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082f4:	e7eb      	b.n	80082ce <__swhatbuf_r+0x22>

080082f6 <__smakebuf_r>:
 80082f6:	898b      	ldrh	r3, [r1, #12]
 80082f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fa:	079d      	lsls	r5, r3, #30
 80082fc:	4606      	mov	r6, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	d507      	bpl.n	8008312 <__smakebuf_r+0x1c>
 8008302:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	2301      	movs	r3, #1
 800830c:	6163      	str	r3, [r4, #20]
 800830e:	b003      	add	sp, #12
 8008310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008312:	466a      	mov	r2, sp
 8008314:	ab01      	add	r3, sp, #4
 8008316:	f7ff ffc9 	bl	80082ac <__swhatbuf_r>
 800831a:	9f00      	ldr	r7, [sp, #0]
 800831c:	4605      	mov	r5, r0
 800831e:	4639      	mov	r1, r7
 8008320:	4630      	mov	r0, r6
 8008322:	f7fd fbd3 	bl	8005acc <_malloc_r>
 8008326:	b948      	cbnz	r0, 800833c <__smakebuf_r+0x46>
 8008328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800832c:	059a      	lsls	r2, r3, #22
 800832e:	d4ee      	bmi.n	800830e <__smakebuf_r+0x18>
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	f043 0302 	orr.w	r3, r3, #2
 8008338:	81a3      	strh	r3, [r4, #12]
 800833a:	e7e2      	b.n	8008302 <__smakebuf_r+0xc>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	6020      	str	r0, [r4, #0]
 800834c:	b15b      	cbz	r3, 8008366 <__smakebuf_r+0x70>
 800834e:	4630      	mov	r0, r6
 8008350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008354:	f000 f81e 	bl	8008394 <_isatty_r>
 8008358:	b128      	cbz	r0, 8008366 <__smakebuf_r+0x70>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f023 0303 	bic.w	r3, r3, #3
 8008360:	f043 0301 	orr.w	r3, r3, #1
 8008364:	81a3      	strh	r3, [r4, #12]
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	431d      	orrs	r5, r3
 800836a:	81a5      	strh	r5, [r4, #12]
 800836c:	e7cf      	b.n	800830e <__smakebuf_r+0x18>
	...

08008370 <_fstat_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	2300      	movs	r3, #0
 8008374:	4d06      	ldr	r5, [pc, #24]	@ (8008390 <_fstat_r+0x20>)
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	f7f9 fc25 	bl	8001bcc <_fstat>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d102      	bne.n	800838c <_fstat_r+0x1c>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b103      	cbz	r3, 800838c <_fstat_r+0x1c>
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	20000348 	.word	0x20000348

08008394 <_isatty_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	2300      	movs	r3, #0
 8008398:	4d05      	ldr	r5, [pc, #20]	@ (80083b0 <_isatty_r+0x1c>)
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7f9 fc23 	bl	8001bea <_isatty>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_isatty_r+0x1a>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_isatty_r+0x1a>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	20000348 	.word	0x20000348

080083b4 <_init>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr

080083c0 <_fini>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr
